
image:     formato del fichero elf32-lm32

Secciones:
Ind Nombre        Tamaño    VMA       LMA       Desp fich Alin
  0 .text         0000053c  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       00000004  0000053c  0000053c  00000590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000014  00000540  00000540  00000594  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000084  00000554  00000554  000005a8  2**2
                  ALLOC
  4 .debug_abbrev 00000214  00000000  00000000  000005a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000066a  00000000  00000000  000007bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000421  00000000  00000000  00000e26  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000140  00000000  00000000  00001248  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000168  00000000  00000000  00001388  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubnames 0000017a  00000000  00000000  000014f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubtypes 00000078  00000000  00000000  0000166a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000040  00000000  00000000  000016e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000231  00000000  00000000  00001722  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .comment      00000011  00000000  00000000  00001953  2**0
                  CONTENTS, READONLY
 14 .debug_ranges 00000018  00000000  00000000  00001964  2**0
                  CONTENTS, READONLY, DEBUGGING

Desensamblado de la sección .text:

00000000 <_ftext>:
   0:	98 00 00 00 	xor r0,r0,r0
   4:	d0 00 00 00 	wcsr IE,r0
   8:	78 01 00 00 	mvhi r1,0x0
   c:	38 21 00 00 	ori r1,r1,0x0
  10:	d0 e1 00 00 	wcsr EBA,r1
  14:	f8 00 00 3b 	calli 100 <_crt0>
  18:	34 00 00 00 	nop
  1c:	34 00 00 00 	nop

00000020 <_breakpoint_handler>:
  20:	34 00 00 00 	nop
  24:	34 00 00 00 	nop
  28:	34 00 00 00 	nop
  2c:	34 00 00 00 	nop
  30:	34 00 00 00 	nop
  34:	34 00 00 00 	nop
  38:	34 00 00 00 	nop
  3c:	34 00 00 00 	nop

00000040 <_ibuserror_handler>:
  40:	34 00 00 00 	nop
  44:	34 00 00 00 	nop
  48:	34 00 00 00 	nop
  4c:	34 00 00 00 	nop
  50:	34 00 00 00 	nop
  54:	34 00 00 00 	nop
  58:	34 00 00 00 	nop
  5c:	34 00 00 00 	nop

00000060 <_watchpoint_handler>:
  60:	34 00 00 00 	nop
  64:	34 00 00 00 	nop
  68:	34 00 00 00 	nop
  6c:	34 00 00 00 	nop
  70:	34 00 00 00 	nop
  74:	34 00 00 00 	nop
  78:	34 00 00 00 	nop
  7c:	34 00 00 00 	nop

00000080 <_dbuserror_handler>:
  80:	34 00 00 00 	nop
  84:	34 00 00 00 	nop
  88:	34 00 00 00 	nop
  8c:	34 00 00 00 	nop
  90:	34 00 00 00 	nop
  94:	34 00 00 00 	nop
  98:	34 00 00 00 	nop
  9c:	34 00 00 00 	nop

000000a0 <_divzero_handler>:
  a0:	34 00 00 00 	nop
  a4:	34 00 00 00 	nop
  a8:	34 00 00 00 	nop
  ac:	34 00 00 00 	nop
  b0:	34 00 00 00 	nop
  b4:	34 00 00 00 	nop
  b8:	34 00 00 00 	nop
  bc:	34 00 00 00 	nop

000000c0 <_interrupt_handler>:
  c0:	5b 9d 00 00 	sw (sp+0),ra
  c4:	f8 00 00 2b 	calli 170 <_save_all>
  c8:	90 40 08 00 	rcsr r1,IP
  cc:	f8 00 00 81 	calli 2d0 <irq_handler>
  d0:	78 01 ff ff 	mvhi r1,0xffff
  d4:	38 21 ff ff 	ori r1,r1,0xffff
  d8:	d0 41 00 00 	wcsr IP,r1
  dc:	e0 00 00 38 	bi 1bc <_restore_all_and_eret>

000000e0 <_scall_handler>:
  e0:	34 00 00 00 	nop
  e4:	34 00 00 00 	nop
  e8:	34 00 00 00 	nop
  ec:	34 00 00 00 	nop
  f0:	34 00 00 00 	nop
  f4:	34 00 00 00 	nop
  f8:	34 00 00 00 	nop
  fc:	34 00 00 00 	nop

00000100 <_crt0>:
 100:	78 1c 00 00 	mvhi sp,0x0
 104:	3b 9c 0f fc 	ori sp,sp,0xffc
 108:	78 1a 00 00 	mvhi gp,0x0
 10c:	3b 5a 05 60 	ori gp,gp,0x560
 110:	78 01 00 00 	mvhi r1,0x0
 114:	38 21 05 54 	ori r1,r1,0x554
 118:	78 03 00 00 	mvhi r3,0x0
 11c:	38 63 05 d8 	ori r3,r3,0x5d8

00000120 <.clearBSS>:
 120:	44 23 00 04 	be r1,r3,130 <.callMain>
 124:	58 20 00 00 	sw (r1+0),r0
 128:	34 21 00 04 	addi r1,r1,4
 12c:	e3 ff ff fd 	bi 120 <.clearBSS>

00000130 <.callMain>:
 130:	34 01 00 00 	mvi r1,0
 134:	34 02 00 00 	mvi r2,0
 138:	34 03 00 00 	mvi r3,0
 13c:	f8 00 00 33 	calli 208 <main>

00000140 <irq_enable>:
 140:	34 01 00 01 	mvi r1,1
 144:	d0 01 00 00 	wcsr IE,r1
 148:	c3 a0 00 00 	ret

0000014c <irq_disable>:
 14c:	34 01 00 00 	mvi r1,0
 150:	d0 01 00 00 	wcsr IE,r1
 154:	c3 a0 00 00 	ret

00000158 <irq_set_mask>:
 158:	d0 21 00 00 	wcsr IM,r1
 15c:	c3 a0 00 00 	ret

00000160 <irq_get_mask>:
 160:	90 20 08 00 	rcsr r1,IM
 164:	c3 a0 00 00 	ret

00000168 <jump>:
 168:	c0 20 00 00 	b r1

0000016c <halt>:
 16c:	e0 00 00 00 	bi 16c <halt>

00000170 <_save_all>:
 170:	37 9c ff 80 	addi sp,sp,-128
 174:	5b 81 00 04 	sw (sp+4),r1
 178:	5b 82 00 08 	sw (sp+8),r2
 17c:	5b 83 00 0c 	sw (sp+12),r3
 180:	5b 84 00 10 	sw (sp+16),r4
 184:	5b 85 00 14 	sw (sp+20),r5
 188:	5b 86 00 18 	sw (sp+24),r6
 18c:	5b 87 00 1c 	sw (sp+28),r7
 190:	5b 88 00 20 	sw (sp+32),r8
 194:	5b 89 00 24 	sw (sp+36),r9
 198:	5b 8a 00 28 	sw (sp+40),r10
 19c:	5b 9e 00 78 	sw (sp+120),ea
 1a0:	5b 9f 00 7c 	sw (sp+124),ba
 1a4:	2b 81 00 80 	lw r1,(sp+128)
 1a8:	5b 81 00 74 	sw (sp+116),r1
 1ac:	bb 80 08 00 	mv r1,sp
 1b0:	34 21 00 80 	addi r1,r1,128
 1b4:	5b 81 00 70 	sw (sp+112),r1
 1b8:	c3 a0 00 00 	ret

000001bc <_restore_all_and_eret>:
 1bc:	2b 81 00 04 	lw r1,(sp+4)
 1c0:	2b 82 00 08 	lw r2,(sp+8)
 1c4:	2b 83 00 0c 	lw r3,(sp+12)
 1c8:	2b 84 00 10 	lw r4,(sp+16)
 1cc:	2b 85 00 14 	lw r5,(sp+20)
 1d0:	2b 86 00 18 	lw r6,(sp+24)
 1d4:	2b 87 00 1c 	lw r7,(sp+28)
 1d8:	2b 88 00 20 	lw r8,(sp+32)
 1dc:	2b 89 00 24 	lw r9,(sp+36)
 1e0:	2b 8a 00 28 	lw r10,(sp+40)
 1e4:	2b 9d 00 74 	lw ra,(sp+116)
 1e8:	2b 9e 00 78 	lw ea,(sp+120)
 1ec:	2b 9f 00 7c 	lw ba,(sp+124)
 1f0:	2b 9c 00 70 	lw sp,(sp+112)
 1f4:	c3 c0 00 00 	eret

000001f8 <get_sp>:
 1f8:	bb 80 08 00 	mv r1,sp
 1fc:	c3 a0 00 00 	ret

00000200 <get_gp>:
 200:	bb 40 08 00 	mv r1,gp
 204:	c3 a0 00 00 	ret

00000208 <main>:
 */

#include "soc-hw.h"

int main (int argc, char **argv)
{
 208:	37 9c ff fc 	addi sp,sp,-4
 20c:	5b 9d 00 04 	sw (sp+4),ra
	uint32_t x='0';
	x=uart_getchar0();
 210:	f8 00 00 96 	calli 468 <uart_getchar0>
	uart_putchar1(x);
 214:	f8 00 00 a7 	calli 4b0 <uart_putchar1>
	x=uart_getchar1();
 218:	f8 00 00 8b 	calli 444 <uart_getchar1>
	uart_putchar0(x);
 21c:	f8 00 00 9c 	calli 48c <uart_putchar0>

			
}
 220:	2b 9d 00 04 	lw ra,(sp+4)
 224:	37 9c 00 04 	addi sp,sp,4
 228:	c3 a0 00 00 	ret

0000022c <isr_null>:
/***************************************************************************
 * IRQ handling
 */
void isr_null()
{
}
 22c:	c3 a0 00 00 	ret

00000230 <tic_isr>:

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 230:	78 01 00 00 	mvhi r1,0x0
 234:	38 21 05 d4 	ori r1,r1,0x5d4
 238:	28 23 00 00 	lw r3,(r1+0)
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 23c:	78 02 00 00 	mvhi r2,0x0
 240:	38 42 05 44 	ori r2,r2,0x544
 244:	28 42 00 00 	lw r2,(r2+0)

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 248:	34 63 00 01 	addi r3,r3,1
 24c:	58 23 00 00 	sw (r1+0),r3
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 250:	34 01 00 0e 	mvi r1,14
 254:	58 41 00 00 	sw (r2+0),r1
}
 258:	c3 a0 00 00 	ret

0000025c <prueba>:

isr_ptr_t isr_table[32];

void prueba()
{
	   uart0->rxtx=30;
 25c:	78 02 00 00 	mvhi r2,0x0
 260:	38 42 05 40 	ori r2,r2,0x540
	   timer0->tcr0 = 0xAA;
 264:	78 01 00 00 	mvhi r1,0x0

isr_ptr_t isr_table[32];

void prueba()
{
	   uart0->rxtx=30;
 268:	28 44 00 00 	lw r4,(r2+0)
	   timer0->tcr0 = 0xAA;
 26c:	38 21 05 44 	ori r1,r1,0x544
	   gpio0->ctrl=0x55;
 270:	78 02 00 00 	mvhi r2,0x0
isr_ptr_t isr_table[32];

void prueba()
{
	   uart0->rxtx=30;
	   timer0->tcr0 = 0xAA;
 274:	28 23 00 00 	lw r3,(r1+0)
	   gpio0->ctrl=0x55;
 278:	38 42 05 48 	ori r2,r2,0x548
	   spi0->rxtx=1;
 27c:	78 01 00 00 	mvhi r1,0x0

void prueba()
{
	   uart0->rxtx=30;
	   timer0->tcr0 = 0xAA;
	   gpio0->ctrl=0x55;
 280:	28 42 00 00 	lw r2,(r2+0)
	   spi0->rxtx=1;
 284:	38 21 05 50 	ori r1,r1,0x550

isr_ptr_t isr_table[32];

void prueba()
{
	   uart0->rxtx=30;
 288:	34 05 00 1e 	mvi r5,30
 28c:	58 85 00 04 	sw (r4+4),r5
	   timer0->tcr0 = 0xAA;
	   gpio0->ctrl=0x55;
	   spi0->rxtx=1;
 290:	28 21 00 00 	lw r1,(r1+0)
isr_ptr_t isr_table[32];

void prueba()
{
	   uart0->rxtx=30;
	   timer0->tcr0 = 0xAA;
 294:	34 04 00 aa 	mvi r4,170
 298:	58 64 00 00 	sw (r3+0),r4
	   gpio0->ctrl=0x55;
 29c:	34 03 00 55 	mvi r3,85
 2a0:	58 43 00 00 	sw (r2+0),r3
	   spi0->rxtx=1;
 2a4:	34 02 00 01 	mvi r2,1
 2a8:	58 22 00 00 	sw (r1+0),r2
	   spi0->nop1=2;
 2ac:	34 02 00 02 	mvi r2,2
 2b0:	58 22 00 04 	sw (r1+4),r2
	   spi0->cs=3;
 2b4:	34 02 00 03 	mvi r2,3
 2b8:	58 22 00 08 	sw (r1+8),r2
	   spi0->divisor=4;
 2bc:	34 02 00 04 	mvi r2,4
 2c0:	58 22 00 10 	sw (r1+16),r2
	   spi0->nop2=5;
 2c4:	34 02 00 05 	mvi r2,5
 2c8:	58 22 00 0c 	sw (r1+12),r2

}
 2cc:	c3 a0 00 00 	ret

000002d0 <irq_handler>:
void isr_null()
{
}

void irq_handler(uint32_t pending)
{
 2d0:	37 9c ff f0 	addi sp,sp,-16
 2d4:	5b 8b 00 10 	sw (sp+16),r11
 2d8:	5b 8c 00 0c 	sw (sp+12),r12
 2dc:	5b 8d 00 08 	sw (sp+8),r13
 2e0:	5b 9d 00 04 	sw (sp+4),ra
 2e4:	78 0b 00 00 	mvhi r11,0x0
 2e8:	39 6b 05 54 	ori r11,r11,0x554
 2ec:	b8 20 60 00 	mv r12,r1
 */
void isr_null()
{
}

void irq_handler(uint32_t pending)
 2f0:	35 6d 00 80 	addi r13,r11,128
 2f4:	e0 00 00 04 	bi 304 <irq_handler+0x34>
{
	int i;

	for(i=0; i<32; i++) {
		if (pending & 0x01) (*isr_table[i])();
 2f8:	35 6b 00 04 	addi r11,r11,4

void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
 2fc:	45 6d 00 08 	be r11,r13,31c <irq_handler+0x4c>
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
 300:	01 8c 00 01 	srui r12,r12,1
void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
		if (pending & 0x01) (*isr_table[i])();
 304:	21 81 00 01 	andi r1,r12,0x1
 308:	44 20 ff fc 	be r1,r0,2f8 <irq_handler+0x28>
 30c:	29 61 00 00 	lw r1,(r11+0)
 310:	35 6b 00 04 	addi r11,r11,4
 314:	d8 20 00 00 	call r1

void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
 318:	5d 6d ff fa 	bne r11,r13,300 <irq_handler+0x30>
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
	}
}
 31c:	2b 9d 00 04 	lw ra,(sp+4)
 320:	2b 8b 00 10 	lw r11,(sp+16)
 324:	2b 8c 00 0c 	lw r12,(sp+12)
 328:	2b 8d 00 08 	lw r13,(sp+8)
 32c:	37 9c 00 10 	addi sp,sp,16
 330:	c3 a0 00 00 	ret

00000334 <isr_init>:

void isr_init()
{
 334:	78 01 00 00 	mvhi r1,0x0
 338:	78 02 00 00 	mvhi r2,0x0
 33c:	38 21 05 54 	ori r1,r1,0x554
 340:	38 42 02 2c 	ori r2,r2,0x22c
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
	}
}

void isr_init()
 344:	34 23 00 80 	addi r3,r1,128
{
	int i;
	for(i=0; i<32; i++)
		isr_table[i] = &isr_null;
 348:	58 22 00 00 	sw (r1+0),r2
 34c:	34 21 00 04 	addi r1,r1,4
}

void isr_init()
{
	int i;
	for(i=0; i<32; i++)
 350:	5c 23 ff fe 	bne r1,r3,348 <isr_init+0x14>
		isr_table[i] = &isr_null;
}
 354:	c3 a0 00 00 	ret

00000358 <isr_register>:

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 358:	78 03 00 00 	mvhi r3,0x0
 35c:	3c 21 00 02 	sli r1,r1,2
 360:	38 63 05 54 	ori r3,r3,0x554
 364:	b4 61 18 00 	add r3,r3,r1
 368:	58 62 00 00 	sw (r3+0),r2
}
 36c:	c3 a0 00 00 	ret

00000370 <isr_unregister>:

void isr_unregister(int irq)
{
	isr_table[irq] = &isr_null;
 370:	78 03 00 00 	mvhi r3,0x0
 374:	3c 21 00 02 	sli r1,r1,2
 378:	38 63 05 54 	ori r3,r3,0x554
 37c:	78 02 00 00 	mvhi r2,0x0
 380:	b4 61 18 00 	add r3,r3,r1
 384:	38 42 02 2c 	ori r2,r2,0x22c
 388:	58 62 00 00 	sw (r3+0),r2
}
 38c:	c3 a0 00 00 	ret

00000390 <msleep>:
void msleep(uint32_t msec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000)*msec;
 390:	78 04 00 00 	mvhi r4,0x0
 394:	38 84 05 3c 	ori r4,r4,0x53c
 398:	28 83 00 00 	lw r3,(r4+0)
 39c:	78 02 00 00 	mvhi r2,0x0
 3a0:	38 42 05 44 	ori r2,r2,0x544
 3a4:	28 42 00 00 	lw r2,(r2+0)
 3a8:	88 23 08 00 	mul r1,r1,r3
 3ac:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 3b0:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 3b4:	34 01 00 08 	mvi r1,8
 3b8:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 3bc:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 3c0:	20 21 00 01 	andi r1,r1,0x1
 3c4:	44 20 ff fe 	be r1,r0,3bc <msleep+0x2c>
}
 3c8:	c3 a0 00 00 	ret

000003cc <nsleep>:
void nsleep(uint32_t nsec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000000)*nsec;
 3cc:	78 02 00 00 	mvhi r2,0x0
 3d0:	38 42 05 44 	ori r2,r2,0x544
 3d4:	28 42 00 00 	lw r2,(r2+0)
 3d8:	08 21 00 64 	muli r1,r1,100
 3dc:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 3e0:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 3e4:	34 01 00 08 	mvi r1,8
 3e8:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 3ec:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 3f0:	20 21 00 01 	andi r1,r1,0x1
 3f4:	44 20 ff fe 	be r1,r0,3ec <nsleep+0x20>
}
 3f8:	c3 a0 00 00 	ret

000003fc <tic_init>:
void tic_init()
{
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 3fc:	78 01 00 00 	mvhi r1,0x0
 400:	38 21 05 44 	ori r1,r1,0x544
 404:	28 23 00 00 	lw r3,(r1+0)
 408:	34 02 27 10 	mvi r2,10000
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 40c:	78 01 00 00 	mvhi r1,0x0

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 410:	58 62 00 04 	sw (r3+4),r2
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 414:	38 21 05 d4 	ori r1,r1,0x5d4

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
 418:	58 60 00 08 	sw (r3+8),r0
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 41c:	58 20 00 00 	sw (r1+0),r0
		isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 420:	78 02 00 00 	mvhi r2,0x0
 424:	78 01 00 00 	mvhi r1,0x0
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 428:	34 04 00 0e 	mvi r4,14
 42c:	58 64 00 00 	sw (r3+0),r4
		isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 430:	38 21 05 54 	ori r1,r1,0x554
 434:	38 42 02 30 	ori r2,r2,0x230
 438:	58 22 00 04 	sw (r1+4),r2
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;

	isr_register(1, &tic_isr);
}
 43c:	c3 a0 00 00 	ret

00000440 <uart_init>:
	//uart0->lcr = 0x03;  // Line Control Register:    8N1
	//uart0->mcr = 0x00;  // Modem Control Register

	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
}
 440:	c3 a0 00 00 	ret

00000444 <uart_getchar1>:

char uart_getchar1()
{   
 444:	78 01 00 00 	mvhi r1,0x0
 448:	38 21 05 4c 	ori r1,r1,0x54c
 44c:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart1->ucr & UART_DR)) ;
 450:	28 41 00 00 	lw r1,(r2+0)
 454:	20 21 00 01 	andi r1,r1,0x1
 458:	44 20 ff fe 	be r1,r0,450 <uart_getchar1+0xc>
	return uart1->rxtx;
 45c:	28 41 00 04 	lw r1,(r2+4)
}
 460:	20 21 00 ff 	andi r1,r1,0xff
 464:	c3 a0 00 00 	ret

00000468 <uart_getchar0>:
char uart_getchar0()
{   
 468:	78 01 00 00 	mvhi r1,0x0
 46c:	38 21 05 40 	ori r1,r1,0x540
 470:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart0->ucr & UART_DR)) ;
 474:	28 41 00 00 	lw r1,(r2+0)
 478:	20 21 00 01 	andi r1,r1,0x1
 47c:	44 20 ff fe 	be r1,r0,474 <uart_getchar0+0xc>
	return uart0->rxtx;
 480:	28 41 00 04 	lw r1,(r2+4)
}
 484:	20 21 00 ff 	andi r1,r1,0xff
 488:	c3 a0 00 00 	ret

0000048c <uart_putchar0>:

void uart_putchar0(char c)
{
 48c:	78 02 00 00 	mvhi r2,0x0
 490:	38 42 05 40 	ori r2,r2,0x540
 494:	28 43 00 00 	lw r3,(r2+0)
 498:	20 21 00 ff 	andi r1,r1,0xff
	while (uart0->ucr & UART_BUSY) ;
 49c:	28 62 00 00 	lw r2,(r3+0)
 4a0:	20 42 00 10 	andi r2,r2,0x10
 4a4:	5c 40 ff fe 	bne r2,r0,49c <uart_putchar0+0x10>
	uart0->rxtx = c;
 4a8:	58 61 00 04 	sw (r3+4),r1
}
 4ac:	c3 a0 00 00 	ret

000004b0 <uart_putchar1>:
void uart_putchar1(char c)
{
 4b0:	78 02 00 00 	mvhi r2,0x0
 4b4:	38 42 05 4c 	ori r2,r2,0x54c
 4b8:	28 43 00 00 	lw r3,(r2+0)
 4bc:	20 21 00 ff 	andi r1,r1,0xff
	while (uart1->ucr & UART_BUSY) ;
 4c0:	28 62 00 00 	lw r2,(r3+0)
 4c4:	20 42 00 10 	andi r2,r2,0x10
 4c8:	5c 40 ff fe 	bne r2,r0,4c0 <uart_putchar1+0x10>
	uart1->rxtx = c;
 4cc:	58 61 00 04 	sw (r3+4),r1
}
 4d0:	c3 a0 00 00 	ret

000004d4 <uart_putstr0>:

void uart_putstr0(char *str)
{
	char *c = str;
	while(*c) {
 4d4:	40 24 00 00 	lbu r4,(r1+0)
 4d8:	44 80 00 0b 	be r4,r0,504 <uart_putstr0+0x30>
 4dc:	78 02 00 00 	mvhi r2,0x0
 4e0:	38 42 05 40 	ori r2,r2,0x540
 4e4:	28 43 00 00 	lw r3,(r2+0)
	return uart0->rxtx;
}

void uart_putchar0(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 4e8:	28 62 00 00 	lw r2,(r3+0)
 4ec:	20 42 00 10 	andi r2,r2,0x10
 4f0:	5c 40 ff fe 	bne r2,r0,4e8 <uart_putstr0+0x14>
	uart0->rxtx = c;
 4f4:	58 64 00 04 	sw (r3+4),r4
void uart_putstr0(char *str)
{
	char *c = str;
	while(*c) {
		uart_putchar0(*c);
		c++;
 4f8:	34 21 00 01 	addi r1,r1,1
}

void uart_putstr0(char *str)
{
	char *c = str;
	while(*c) {
 4fc:	40 24 00 00 	lbu r4,(r1+0)
 500:	5c 82 ff fa 	bne r4,r2,4e8 <uart_putstr0+0x14>
 504:	c3 a0 00 00 	ret

00000508 <uart_putstr1>:
}

void uart_putstr1(char *str)
{
	char *c = str;
	while(*c) {
 508:	40 24 00 00 	lbu r4,(r1+0)
 50c:	44 80 00 0b 	be r4,r0,538 <uart_putstr1+0x30>
 510:	78 02 00 00 	mvhi r2,0x0
 514:	38 42 05 4c 	ori r2,r2,0x54c
 518:	28 43 00 00 	lw r3,(r2+0)
	while (uart0->ucr & UART_BUSY) ;
	uart0->rxtx = c;
}
void uart_putchar1(char c)
{
	while (uart1->ucr & UART_BUSY) ;
 51c:	28 62 00 00 	lw r2,(r3+0)
 520:	20 42 00 10 	andi r2,r2,0x10
 524:	5c 40 ff fe 	bne r2,r0,51c <uart_putstr1+0x14>
	uart1->rxtx = c;
 528:	58 64 00 04 	sw (r3+4),r4
void uart_putstr1(char *str)
{
	char *c = str;
	while(*c) {
		uart_putchar1(*c);
		c++;
 52c:	34 21 00 01 	addi r1,r1,1
}

void uart_putstr1(char *str)
{
	char *c = str;
	while(*c) {
 530:	40 24 00 00 	lbu r4,(r1+0)
 534:	5c 82 ff fa 	bne r4,r2,51c <uart_putstr1+0x14>
 538:	c3 a0 00 00 	ret

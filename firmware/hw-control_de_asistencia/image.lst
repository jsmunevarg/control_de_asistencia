
image:     formato del fichero elf32-lm32

Secciones:
Ind Nombre        Tamaño    VMA       LMA       Desp fich Alin
  0 .text         00000b08  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       00000004  00000b08  00000b08  00000b5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000018  00000b0c  00000b0c  00000b60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000578  00000b24  00000b24  00000b78  2**2
                  ALLOC
  4 .debug_abbrev 00000422  00000000  00000000  00000b78  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a7a  00000000  00000000  00000f9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000009b6  00000000  00000000  00001a14  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000250  00000000  00000000  000023cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000039d  00000000  00000000  0000261c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubnames 000002e2  00000000  00000000  000029b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubtypes 00000096  00000000  00000000  00002c9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000060  00000000  00000000  00002d31  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00002d91  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000333  00000000  00000000  00002dc1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .comment      00000011  00000000  00000000  000030f4  2**0
                  CONTENTS, READONLY

Desensamblado de la sección .text:

00000000 <_ftext>:
   0:	98 00 00 00 	xor r0,r0,r0
   4:	d0 00 00 00 	wcsr IE,r0
   8:	78 01 00 00 	mvhi r1,0x0
   c:	38 21 00 00 	ori r1,r1,0x0
  10:	d0 e1 00 00 	wcsr EBA,r1
  14:	f8 00 00 3b 	calli 100 <_crt0>
  18:	34 00 00 00 	nop
  1c:	34 00 00 00 	nop

00000020 <_breakpoint_handler>:
  20:	34 00 00 00 	nop
  24:	34 00 00 00 	nop
  28:	34 00 00 00 	nop
  2c:	34 00 00 00 	nop
  30:	34 00 00 00 	nop
  34:	34 00 00 00 	nop
  38:	34 00 00 00 	nop
  3c:	34 00 00 00 	nop

00000040 <_ibuserror_handler>:
  40:	34 00 00 00 	nop
  44:	34 00 00 00 	nop
  48:	34 00 00 00 	nop
  4c:	34 00 00 00 	nop
  50:	34 00 00 00 	nop
  54:	34 00 00 00 	nop
  58:	34 00 00 00 	nop
  5c:	34 00 00 00 	nop

00000060 <_watchpoint_handler>:
  60:	34 00 00 00 	nop
  64:	34 00 00 00 	nop
  68:	34 00 00 00 	nop
  6c:	34 00 00 00 	nop
  70:	34 00 00 00 	nop
  74:	34 00 00 00 	nop
  78:	34 00 00 00 	nop
  7c:	34 00 00 00 	nop

00000080 <_dbuserror_handler>:
  80:	34 00 00 00 	nop
  84:	34 00 00 00 	nop
  88:	34 00 00 00 	nop
  8c:	34 00 00 00 	nop
  90:	34 00 00 00 	nop
  94:	34 00 00 00 	nop
  98:	34 00 00 00 	nop
  9c:	34 00 00 00 	nop

000000a0 <_divzero_handler>:
  a0:	34 00 00 00 	nop
  a4:	34 00 00 00 	nop
  a8:	34 00 00 00 	nop
  ac:	34 00 00 00 	nop
  b0:	34 00 00 00 	nop
  b4:	34 00 00 00 	nop
  b8:	34 00 00 00 	nop
  bc:	34 00 00 00 	nop

000000c0 <_interrupt_handler>:
  c0:	5b 9d 00 00 	sw (sp+0),ra
  c4:	f8 00 00 2b 	calli 170 <_save_all>
  c8:	90 40 08 00 	rcsr r1,IP
  cc:	f8 00 00 b5 	calli 3a0 <irq_handler>
  d0:	78 01 ff ff 	mvhi r1,0xffff
  d4:	38 21 ff ff 	ori r1,r1,0xffff
  d8:	d0 41 00 00 	wcsr IP,r1
  dc:	e0 00 00 38 	bi 1bc <_restore_all_and_eret>

000000e0 <_scall_handler>:
  e0:	34 00 00 00 	nop
  e4:	34 00 00 00 	nop
  e8:	34 00 00 00 	nop
  ec:	34 00 00 00 	nop
  f0:	34 00 00 00 	nop
  f4:	34 00 00 00 	nop
  f8:	34 00 00 00 	nop
  fc:	34 00 00 00 	nop

00000100 <_crt0>:
 100:	78 1c 00 00 	mvhi sp,0x0
 104:	3b 9c 1f fc 	ori sp,sp,0x1ffc
 108:	78 1a 00 00 	mvhi gp,0x0
 10c:	3b 5a 0b 30 	ori gp,gp,0xb30
 110:	78 01 00 00 	mvhi r1,0x0
 114:	38 21 0b 24 	ori r1,r1,0xb24
 118:	78 03 00 00 	mvhi r3,0x0
 11c:	38 63 10 9c 	ori r3,r3,0x109c

00000120 <.clearBSS>:
 120:	44 23 00 04 	be r1,r3,130 <.callMain>
 124:	58 20 00 00 	sw (r1+0),r0
 128:	34 21 00 04 	addi r1,r1,4
 12c:	e3 ff ff fd 	bi 120 <.clearBSS>

00000130 <.callMain>:
 130:	34 01 00 00 	mvi r1,0
 134:	34 02 00 00 	mvi r2,0
 138:	34 03 00 00 	mvi r3,0
 13c:	f8 00 00 51 	calli 280 <main>

00000140 <irq_enable>:
 140:	34 01 00 01 	mvi r1,1
 144:	d0 01 00 00 	wcsr IE,r1
 148:	c3 a0 00 00 	ret

0000014c <irq_disable>:
 14c:	34 01 00 00 	mvi r1,0
 150:	d0 01 00 00 	wcsr IE,r1
 154:	c3 a0 00 00 	ret

00000158 <irq_set_mask>:
 158:	d0 21 00 00 	wcsr IM,r1
 15c:	c3 a0 00 00 	ret

00000160 <irq_get_mask>:
 160:	90 20 08 00 	rcsr r1,IM
 164:	c3 a0 00 00 	ret

00000168 <jump>:
 168:	c0 20 00 00 	b r1

0000016c <halt>:
 16c:	e0 00 00 00 	bi 16c <halt>

00000170 <_save_all>:
 170:	37 9c ff 80 	addi sp,sp,-128
 174:	5b 81 00 04 	sw (sp+4),r1
 178:	5b 82 00 08 	sw (sp+8),r2
 17c:	5b 83 00 0c 	sw (sp+12),r3
 180:	5b 84 00 10 	sw (sp+16),r4
 184:	5b 85 00 14 	sw (sp+20),r5
 188:	5b 86 00 18 	sw (sp+24),r6
 18c:	5b 87 00 1c 	sw (sp+28),r7
 190:	5b 88 00 20 	sw (sp+32),r8
 194:	5b 89 00 24 	sw (sp+36),r9
 198:	5b 8a 00 28 	sw (sp+40),r10
 19c:	5b 9e 00 78 	sw (sp+120),ea
 1a0:	5b 9f 00 7c 	sw (sp+124),ba
 1a4:	2b 81 00 80 	lw r1,(sp+128)
 1a8:	5b 81 00 74 	sw (sp+116),r1
 1ac:	bb 80 08 00 	mv r1,sp
 1b0:	34 21 00 80 	addi r1,r1,128
 1b4:	5b 81 00 70 	sw (sp+112),r1
 1b8:	c3 a0 00 00 	ret

000001bc <_restore_all_and_eret>:
 1bc:	2b 81 00 04 	lw r1,(sp+4)
 1c0:	2b 82 00 08 	lw r2,(sp+8)
 1c4:	2b 83 00 0c 	lw r3,(sp+12)
 1c8:	2b 84 00 10 	lw r4,(sp+16)
 1cc:	2b 85 00 14 	lw r5,(sp+20)
 1d0:	2b 86 00 18 	lw r6,(sp+24)
 1d4:	2b 87 00 1c 	lw r7,(sp+28)
 1d8:	2b 88 00 20 	lw r8,(sp+32)
 1dc:	2b 89 00 24 	lw r9,(sp+36)
 1e0:	2b 8a 00 28 	lw r10,(sp+40)
 1e4:	2b 9d 00 74 	lw ra,(sp+116)
 1e8:	2b 9e 00 78 	lw ea,(sp+120)
 1ec:	2b 9f 00 7c 	lw ba,(sp+124)
 1f0:	2b 9c 00 70 	lw sp,(sp+112)
 1f4:	c3 c0 00 00 	eret

000001f8 <get_sp>:
 1f8:	bb 80 08 00 	mv r1,sp
 1fc:	c3 a0 00 00 	ret

00000200 <get_gp>:
 200:	bb 40 08 00 	mv r1,gp
 204:	c3 a0 00 00 	ret

00000208 <buffertec_clear>:
   }
}
}


void buffertec_clear()
 208:	78 02 00 00 	mvhi r2,0x0
{
 20c:	78 01 00 00 	mvhi r1,0x0
   }
}
}


void buffertec_clear()
 210:	38 42 0b 24 	ori r2,r2,0xb24
{
 214:	38 21 0b 28 	ori r1,r1,0xb28
   }
}
}


void buffertec_clear()
 218:	34 42 00 f0 	addi r2,r2,240
{
	uint32_t i;
    for (i=1; i< SIZE_BUFFTEC;i++)
    	buffertec[i]=0;
 21c:	58 20 00 00 	sw (r1+0),r0
 220:	34 21 00 04 	addi r1,r1,4


void buffertec_clear()
{
	uint32_t i;
    for (i=1; i< SIZE_BUFFTEC;i++)
 224:	5c 22 ff fe 	bne r1,r2,21c <buffertec_clear+0x14>
    	buffertec[i]=0;

}
 228:	c3 a0 00 00 	ret

0000022c <buffertec_upload>:

void buffertec_upload(uint32_t size)
{
 22c:	37 9c ff f0 	addi sp,sp,-16
 230:	5b 8b 00 10 	sw (sp+16),r11
 234:	5b 8c 00 0c 	sw (sp+12),r12
 238:	5b 8d 00 08 	sw (sp+8),r13
 23c:	5b 9d 00 04 	sw (sp+4),ra
 240:	b8 20 68 00 	mv r13,r1
	uint32_t i;
        for (i=0; i< size;i++)
 244:	44 20 00 09 	be r1,r0,268 <buffertec_upload+0x3c>
 248:	78 0b 00 00 	mvhi r11,0x0
 24c:	39 6b 0b 24 	ori r11,r11,0xb24
 250:	34 0c 00 00 	mvi r12,0
    	    buffertec[i]=read_number();
 254:	f8 00 01 08 	calli 674 <read_number>
 258:	59 61 00 00 	sw (r11+0),r1
}

void buffertec_upload(uint32_t size)
{
	uint32_t i;
        for (i=0; i< size;i++)
 25c:	35 8c 00 01 	addi r12,r12,1
 260:	35 6b 00 04 	addi r11,r11,4
 264:	55 ac ff fc 	bgu r13,r12,254 <buffertec_upload+0x28>
    	    buffertec[i]=read_number();
}
 268:	2b 9d 00 04 	lw ra,(sp+4)
 26c:	2b 8b 00 10 	lw r11,(sp+16)
 270:	2b 8c 00 0c 	lw r12,(sp+12)
 274:	2b 8d 00 08 	lw r13,(sp+8)
 278:	37 9c 00 10 	addi sp,sp,16
 27c:	c3 a0 00 00 	ret

00000280 <main>:
//void buffertec_uartsend(uint32_t size);
void buffertec_clear();


int main()
{
 280:	37 9c ff ec 	addi sp,sp,-20
 284:	5b 8b 00 14 	sw (sp+20),r11
 288:	5b 8c 00 10 	sw (sp+16),r12
 28c:	5b 8d 00 0c 	sw (sp+12),r13
 290:	5b 8e 00 08 	sw (sp+8),r14
 294:	5b 9d 00 04 	sw (sp+4),ra
 298:	78 0d 00 00 	mvhi r13,0x0
 29c:	78 0c 00 00 	mvhi r12,0x0
 2a0:	78 0b 00 00 	mvhi r11,0x0
 2a4:	39 ad 0b 24 	ori r13,r13,0xb24
	
	uint32_t bytes;

		for(;;)
{
		buffertec_upload(60);
 2a8:	39 8c 0b 28 	ori r12,r12,0xb28
void buffertec_upload(uint32_t size);
//void buffertec_uartsend(uint32_t size);
void buffertec_clear();


int main()
 2ac:	39 6b 0c 14 	ori r11,r11,0xc14
	    	    }
		//uart_putchar0(buffertec[0]);	
		

		//CAMARA
if (buffertec[0] == 0x01){
 2b0:	34 0e 00 01 	mvi r14,1
	
	uint32_t bytes;

		for(;;)
{
		buffertec_upload(60);
 2b4:	34 01 00 3c 	mvi r1,60
 2b8:	fb ff ff dd 	calli 22c <buffertec_upload>
 2bc:	29 a3 00 00 	lw r3,(r13+0)
void buffertec_upload(uint32_t size);
//void buffertec_uartsend(uint32_t size);
void buffertec_clear();


int main()
 2c0:	b9 80 10 00 	mv r2,r12
 2c4:	b8 60 08 00 	mv r1,r3
		buffertec_upload(60);
		uint32_t i;
		    for (i=0; i< 60;i++)
		    {
			//uart_putchar0(buffertec[0]);	
			if(buffertec[i] == buffertec[0])
 2c8:	44 61 00 05 	be r3,r1,2dc <main+0x5c>

		for(;;)
{
		buffertec_upload(60);
		uint32_t i;
		    for (i=0; i< 60;i++)
 2cc:	44 4b 00 0a 	be r2,r11,2f4 <main+0x74>
 2d0:	28 41 00 00 	lw r1,(r2+0)
 2d4:	34 42 00 04 	addi r2,r2,4
		    {
			//uart_putchar0(buffertec[0]);	
			if(buffertec[i] == buffertec[0])
 2d8:	5c 61 ff fd 	bne r3,r1,2cc <main+0x4c>
 2dc:	b9 80 08 00 	mv r1,r12

void buffertec_clear()
{
	uint32_t i;
    for (i=1; i< SIZE_BUFFTEC;i++)
    	buffertec[i]=0;
 2e0:	58 20 00 00 	sw (r1+0),r0
 2e4:	34 21 00 04 	addi r1,r1,4


void buffertec_clear()
{
	uint32_t i;
    for (i=1; i< SIZE_BUFFTEC;i++)
 2e8:	5c 2b ff fe 	bne r1,r11,2e0 <main+0x60>
 2ec:	29 a3 00 00 	lw r3,(r13+0)

		for(;;)
{
		buffertec_upload(60);
		uint32_t i;
		    for (i=0; i< 60;i++)
 2f0:	5c 4b ff f8 	bne r2,r11,2d0 <main+0x50>
	    	    }
		//uart_putchar0(buffertec[0]);	
		

		//CAMARA
if (buffertec[0] == 0x01){
 2f4:	5c 6e ff f0 	bne r3,r14,2b4 <main+0x34>
		resetcommand(1);
 2f8:	34 01 00 01 	mvi r1,1
 2fc:	f8 00 01 2d 	calli 7b0 <resetcommand>
    		imagesize(1);
 300:	34 01 00 01 	mvi r1,1
 304:	f8 00 01 e1 	calli a88 <imagesize>
    		getversioncommand(1);
 308:	34 01 00 01 	mvi r1,1
 30c:	f8 00 01 3e 	calli 804 <getversioncommand>
		takephotocommand(1);
 310:	34 01 00 01 	mvi r1,1
 314:	f8 00 01 51 	calli 858 <takephotocommand>
		bytes=getbufflencommand();
 318:	f8 00 01 67 	calli 8b4 <getbufflencommand>
		readphotocommand(bytes);
 31c:	f8 00 01 82 	calli 924 <readphotocommand>
 320:	e3 ff ff e5 	bi 2b4 <main+0x34>

00000324 <isr_null>:
/***************************************************************************
 * IRQ handling
 */
void isr_null()
{
}
 324:	c3 a0 00 00 	ret

00000328 <tic_isr>:

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 328:	78 01 00 00 	mvhi r1,0x0
 32c:	38 21 0c 94 	ori r1,r1,0xc94
 330:	28 23 00 00 	lw r3,(r1+0)
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 334:	78 02 00 00 	mvhi r2,0x0
 338:	38 42 0b 10 	ori r2,r2,0xb10
 33c:	28 42 00 00 	lw r2,(r2+0)

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 340:	34 63 00 01 	addi r3,r3,1
 344:	58 23 00 00 	sw (r1+0),r3
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 348:	34 01 00 0e 	mvi r1,14
 34c:	58 41 00 00 	sw (r2+0),r1
}
 350:	c3 a0 00 00 	ret

00000354 <prueba>:

isr_ptr_t isr_table[32];

void prueba()
{
	   uart0->rxtx=30;
 354:	78 02 00 00 	mvhi r2,0x0
 358:	38 42 0b 0c 	ori r2,r2,0xb0c
	   uart1->rxtx=30;
 35c:	78 01 00 00 	mvhi r1,0x0

isr_ptr_t isr_table[32];

void prueba()
{
	   uart0->rxtx=30;
 360:	28 45 00 00 	lw r5,(r2+0)
	   uart1->rxtx=30;
 364:	38 21 0b 18 	ori r1,r1,0xb18
	   timer0->tcr0 = 0xAA;
 368:	78 03 00 00 	mvhi r3,0x0
isr_ptr_t isr_table[32];

void prueba()
{
	   uart0->rxtx=30;
	   uart1->rxtx=30;
 36c:	28 24 00 00 	lw r4,(r1+0)
	   timer0->tcr0 = 0xAA;
 370:	38 63 0b 10 	ori r3,r3,0xb10
	   uart2->rxtx=30;
 374:	78 02 00 00 	mvhi r2,0x0

isr_ptr_t isr_table[32];

void prueba()
{
	   uart0->rxtx=30;
 378:	34 01 00 1e 	mvi r1,30
	   uart1->rxtx=30;
	   timer0->tcr0 = 0xAA;
 37c:	28 63 00 00 	lw r3,(r3+0)
	   uart2->rxtx=30;
 380:	38 42 0b 20 	ori r2,r2,0xb20

isr_ptr_t isr_table[32];

void prueba()
{
	   uart0->rxtx=30;
 384:	58 a1 00 04 	sw (r5+4),r1
	   uart1->rxtx=30;
	   timer0->tcr0 = 0xAA;
	   uart2->rxtx=30;
 388:	28 42 00 00 	lw r2,(r2+0)
isr_ptr_t isr_table[32];

void prueba()
{
	   uart0->rxtx=30;
	   uart1->rxtx=30;
 38c:	58 81 00 04 	sw (r4+4),r1
	   timer0->tcr0 = 0xAA;
 390:	34 04 00 aa 	mvi r4,170
 394:	58 64 00 00 	sw (r3+0),r4
	   uart2->rxtx=30;
 398:	58 41 00 04 	sw (r2+4),r1
	

}
 39c:	c3 a0 00 00 	ret

000003a0 <irq_handler>:
void isr_null()
{
}

void irq_handler(uint32_t pending)
{
 3a0:	37 9c ff f0 	addi sp,sp,-16
 3a4:	5b 8b 00 10 	sw (sp+16),r11
 3a8:	5b 8c 00 0c 	sw (sp+12),r12
 3ac:	5b 8d 00 08 	sw (sp+8),r13
 3b0:	5b 9d 00 04 	sw (sp+4),ra
 3b4:	78 0b 00 00 	mvhi r11,0x0
 3b8:	39 6b 0c 14 	ori r11,r11,0xc14
 3bc:	b8 20 60 00 	mv r12,r1
 */
void isr_null()
{
}

void irq_handler(uint32_t pending)
 3c0:	35 6d 00 80 	addi r13,r11,128
 3c4:	e0 00 00 04 	bi 3d4 <irq_handler+0x34>
{
	int i;

	for(i=0; i<32; i++) {
		if (pending & 0x01) (*isr_table[i])();
 3c8:	35 6b 00 04 	addi r11,r11,4

void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
 3cc:	45 6d 00 08 	be r11,r13,3ec <irq_handler+0x4c>
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
 3d0:	01 8c 00 01 	srui r12,r12,1
void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
		if (pending & 0x01) (*isr_table[i])();
 3d4:	21 81 00 01 	andi r1,r12,0x1
 3d8:	44 20 ff fc 	be r1,r0,3c8 <irq_handler+0x28>
 3dc:	29 61 00 00 	lw r1,(r11+0)
 3e0:	35 6b 00 04 	addi r11,r11,4
 3e4:	d8 20 00 00 	call r1

void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
 3e8:	5d 6d ff fa 	bne r11,r13,3d0 <irq_handler+0x30>
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
	}
}
 3ec:	2b 9d 00 04 	lw ra,(sp+4)
 3f0:	2b 8b 00 10 	lw r11,(sp+16)
 3f4:	2b 8c 00 0c 	lw r12,(sp+12)
 3f8:	2b 8d 00 08 	lw r13,(sp+8)
 3fc:	37 9c 00 10 	addi sp,sp,16
 400:	c3 a0 00 00 	ret

00000404 <isr_init>:

void isr_init()
{
 404:	78 01 00 00 	mvhi r1,0x0
 408:	78 02 00 00 	mvhi r2,0x0
 40c:	38 21 0c 14 	ori r1,r1,0xc14
 410:	38 42 03 24 	ori r2,r2,0x324
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
	}
}

void isr_init()
 414:	34 23 00 80 	addi r3,r1,128
{
	int i;
	for(i=0; i<32; i++)
		isr_table[i] = &isr_null;
 418:	58 22 00 00 	sw (r1+0),r2
 41c:	34 21 00 04 	addi r1,r1,4
}

void isr_init()
{
	int i;
	for(i=0; i<32; i++)
 420:	5c 23 ff fe 	bne r1,r3,418 <isr_init+0x14>
		isr_table[i] = &isr_null;
}
 424:	c3 a0 00 00 	ret

00000428 <isr_register>:

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 428:	78 03 00 00 	mvhi r3,0x0
 42c:	3c 21 00 02 	sli r1,r1,2
 430:	38 63 0c 14 	ori r3,r3,0xc14
 434:	b4 61 18 00 	add r3,r3,r1
 438:	58 62 00 00 	sw (r3+0),r2
}
 43c:	c3 a0 00 00 	ret

00000440 <isr_unregister>:

void isr_unregister(int irq)
{
	isr_table[irq] = &isr_null;
 440:	78 03 00 00 	mvhi r3,0x0
 444:	3c 21 00 02 	sli r1,r1,2
 448:	38 63 0c 14 	ori r3,r3,0xc14
 44c:	78 02 00 00 	mvhi r2,0x0
 450:	b4 61 18 00 	add r3,r3,r1
 454:	38 42 03 24 	ori r2,r2,0x324
 458:	58 62 00 00 	sw (r3+0),r2
}
 45c:	c3 a0 00 00 	ret

00000460 <msleep>:
void msleep(uint32_t msec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000)*msec;
 460:	78 04 00 00 	mvhi r4,0x0
 464:	38 84 0b 08 	ori r4,r4,0xb08
 468:	28 83 00 00 	lw r3,(r4+0)
 46c:	78 02 00 00 	mvhi r2,0x0
 470:	38 42 0b 10 	ori r2,r2,0xb10
 474:	28 42 00 00 	lw r2,(r2+0)
 478:	88 23 08 00 	mul r1,r1,r3
 47c:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 480:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 484:	34 01 00 08 	mvi r1,8
 488:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 48c:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 490:	20 21 00 01 	andi r1,r1,0x1
 494:	44 20 ff fe 	be r1,r0,48c <msleep+0x2c>
}
 498:	c3 a0 00 00 	ret

0000049c <nsleep>:
void nsleep(uint32_t nsec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000000)*nsec;
 49c:	78 02 00 00 	mvhi r2,0x0
 4a0:	38 42 0b 10 	ori r2,r2,0xb10
 4a4:	28 42 00 00 	lw r2,(r2+0)
 4a8:	08 21 00 64 	muli r1,r1,100
 4ac:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 4b0:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 4b4:	34 01 00 08 	mvi r1,8
 4b8:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 4bc:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 4c0:	20 21 00 01 	andi r1,r1,0x1
 4c4:	44 20 ff fe 	be r1,r0,4bc <nsleep+0x20>
}
 4c8:	c3 a0 00 00 	ret

000004cc <tic_init>:
void tic_init()
{
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 4cc:	78 01 00 00 	mvhi r1,0x0
 4d0:	38 21 0b 10 	ori r1,r1,0xb10
 4d4:	28 23 00 00 	lw r3,(r1+0)
 4d8:	34 02 27 10 	mvi r2,10000
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 4dc:	78 01 00 00 	mvhi r1,0x0

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 4e0:	58 62 00 04 	sw (r3+4),r2
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 4e4:	38 21 0c 94 	ori r1,r1,0xc94

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
 4e8:	58 60 00 08 	sw (r3+8),r0
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 4ec:	58 20 00 00 	sw (r1+0),r0
		isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 4f0:	78 02 00 00 	mvhi r2,0x0
 4f4:	78 01 00 00 	mvhi r1,0x0
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 4f8:	34 04 00 0e 	mvi r4,14
 4fc:	58 64 00 00 	sw (r3+0),r4
		isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 500:	38 21 0c 14 	ori r1,r1,0xc14
 504:	38 42 03 28 	ori r2,r2,0x328
 508:	58 22 00 04 	sw (r1+4),r2
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;

	isr_register(1, &tic_isr);
}
 50c:	c3 a0 00 00 	ret

00000510 <uart_init>:
	//uart0->lcr = 0x03;  // Line Control Register:    8N1
	//uart0->mcr = 0x00;  // Modem Control Register

	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
}
 510:	c3 a0 00 00 	ret

00000514 <uart_getchar1>:

char uart_getchar1()
{   
 514:	78 01 00 00 	mvhi r1,0x0
 518:	38 21 0b 18 	ori r1,r1,0xb18
 51c:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart1->ucr & UART_DR)) ;
 520:	28 41 00 00 	lw r1,(r2+0)
 524:	20 21 00 01 	andi r1,r1,0x1
 528:	44 20 ff fe 	be r1,r0,520 <uart_getchar1+0xc>
	return uart1->rxtx;
 52c:	28 41 00 04 	lw r1,(r2+4)
}
 530:	20 21 00 ff 	andi r1,r1,0xff
 534:	c3 a0 00 00 	ret

00000538 <uart_getchar0>:
char uart_getchar0()
{   
 538:	78 01 00 00 	mvhi r1,0x0
 53c:	38 21 0b 0c 	ori r1,r1,0xb0c
 540:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart0->ucr & UART_DR)) ;
 544:	28 41 00 00 	lw r1,(r2+0)
 548:	20 21 00 01 	andi r1,r1,0x1
 54c:	44 20 ff fe 	be r1,r0,544 <uart_getchar0+0xc>
	return uart0->rxtx;
 550:	28 41 00 04 	lw r1,(r2+4)
}
 554:	20 21 00 ff 	andi r1,r1,0xff
 558:	c3 a0 00 00 	ret

0000055c <uart_getchar2>:

char uart_getchar2()
{   
 55c:	78 01 00 00 	mvhi r1,0x0
 560:	38 21 0b 20 	ori r1,r1,0xb20
 564:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart2->ucr & UART_DR)) ;
 568:	28 41 00 00 	lw r1,(r2+0)
 56c:	20 21 00 01 	andi r1,r1,0x1
 570:	44 20 ff fe 	be r1,r0,568 <uart_getchar2+0xc>
	return uart2->rxtx;
 574:	28 41 00 04 	lw r1,(r2+4)
}
 578:	20 21 00 ff 	andi r1,r1,0xff
 57c:	c3 a0 00 00 	ret

00000580 <uart_putchar0>:
void uart_putchar0(char c)
{
 580:	78 02 00 00 	mvhi r2,0x0
 584:	38 42 0b 0c 	ori r2,r2,0xb0c
 588:	28 43 00 00 	lw r3,(r2+0)
 58c:	20 21 00 ff 	andi r1,r1,0xff
	while (uart0->ucr & UART_BUSY) ;
 590:	28 62 00 00 	lw r2,(r3+0)
 594:	20 42 00 10 	andi r2,r2,0x10
 598:	5c 40 ff fe 	bne r2,r0,590 <uart_putchar0+0x10>
	uart0->rxtx = c;
 59c:	58 61 00 04 	sw (r3+4),r1
}
 5a0:	c3 a0 00 00 	ret

000005a4 <uart_putchar1>:
void uart_putchar1(char c)
{
 5a4:	78 02 00 00 	mvhi r2,0x0
 5a8:	38 42 0b 18 	ori r2,r2,0xb18
 5ac:	28 43 00 00 	lw r3,(r2+0)
 5b0:	20 21 00 ff 	andi r1,r1,0xff
	while (uart1->ucr & UART_BUSY) ;
 5b4:	28 62 00 00 	lw r2,(r3+0)
 5b8:	20 42 00 10 	andi r2,r2,0x10
 5bc:	5c 40 ff fe 	bne r2,r0,5b4 <uart_putchar1+0x10>
	uart1->rxtx = c;
 5c0:	58 61 00 04 	sw (r3+4),r1
}
 5c4:	c3 a0 00 00 	ret

000005c8 <uart_putstr0>:

void uart_putstr0(char *str)
{
	char *c = str;
	while(*c) {
 5c8:	40 24 00 00 	lbu r4,(r1+0)
 5cc:	44 80 00 0b 	be r4,r0,5f8 <uart_putstr0+0x30>
 5d0:	78 02 00 00 	mvhi r2,0x0
 5d4:	38 42 0b 0c 	ori r2,r2,0xb0c
 5d8:	28 43 00 00 	lw r3,(r2+0)
	while (! (uart2->ucr & UART_DR)) ;
	return uart2->rxtx;
}
void uart_putchar0(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 5dc:	28 62 00 00 	lw r2,(r3+0)
 5e0:	20 42 00 10 	andi r2,r2,0x10
 5e4:	5c 40 ff fe 	bne r2,r0,5dc <uart_putstr0+0x14>
	uart0->rxtx = c;
 5e8:	58 64 00 04 	sw (r3+4),r4
void uart_putstr0(char *str)
{
	char *c = str;
	while(*c) {
		uart_putchar0(*c);
		c++;
 5ec:	34 21 00 01 	addi r1,r1,1
}

void uart_putstr0(char *str)
{
	char *c = str;
	while(*c) {
 5f0:	40 24 00 00 	lbu r4,(r1+0)
 5f4:	5c 82 ff fa 	bne r4,r2,5dc <uart_putstr0+0x14>
 5f8:	c3 a0 00 00 	ret

000005fc <uart_putstr1>:
}

void uart_putstr1(char *str)
{
	char *c = str;
	while(*c) {
 5fc:	40 24 00 00 	lbu r4,(r1+0)
 600:	44 80 00 0b 	be r4,r0,62c <uart_putstr1+0x30>
 604:	78 02 00 00 	mvhi r2,0x0
 608:	38 42 0b 18 	ori r2,r2,0xb18
 60c:	28 43 00 00 	lw r3,(r2+0)
	while (uart0->ucr & UART_BUSY) ;
	uart0->rxtx = c;
}
void uart_putchar1(char c)
{
	while (uart1->ucr & UART_BUSY) ;
 610:	28 62 00 00 	lw r2,(r3+0)
 614:	20 42 00 10 	andi r2,r2,0x10
 618:	5c 40 ff fe 	bne r2,r0,610 <uart_putstr1+0x14>
	uart1->rxtx = c;
 61c:	58 64 00 04 	sw (r3+4),r4
void uart_putstr1(char *str)
{
	char *c = str;
	while(*c) {
		uart_putchar1(*c);
		c++;
 620:	34 21 00 01 	addi r1,r1,1
}

void uart_putstr1(char *str)
{
	char *c = str;
	while(*c) {
 624:	40 24 00 00 	lbu r4,(r1+0)
 628:	5c 82 ff fa 	bne r4,r2,610 <uart_putstr1+0x14>
 62c:	c3 a0 00 00 	ret

00000630 <uart_putchar2>:
		uart_putchar1(*c);
		c++;
	}
}
void uart_putchar2(char c)
{
 630:	78 02 00 00 	mvhi r2,0x0
 634:	38 42 0b 20 	ori r2,r2,0xb20
 638:	28 43 00 00 	lw r3,(r2+0)
 63c:	20 21 00 ff 	andi r1,r1,0xff
	while (uart2->ucr & UART_BUSY) ;
 640:	28 62 00 00 	lw r2,(r3+0)
 644:	20 42 00 10 	andi r2,r2,0x10
 648:	5c 40 ff fe 	bne r2,r0,640 <uart_putchar2+0x10>
	uart2->rxtx = c;
 64c:	58 61 00 04 	sw (r3+4),r1
}
 650:	c3 a0 00 00 	ret

00000654 <lcd_putchar>:

/***************************************************************************
 * LCD Functions
 */
void lcd_putchar(char c)
{
 654:	78 02 00 00 	mvhi r2,0x0
 658:	38 42 0b 1c 	ori r2,r2,0xb1c
 65c:	28 43 00 00 	lw r3,(r2+0)
 660:	20 21 00 ff 	andi r1,r1,0xff
	while (!(lcd0->RS));
 664:	28 62 00 04 	lw r2,(r3+4)
 668:	44 40 ff ff 	be r2,r0,664 <lcd_putchar+0x10>
	lcd0->in_lcd = c;
 66c:	58 61 00 00 	sw (r3+0),r1
}
 670:	c3 a0 00 00 	ret

00000674 <read_number>:


/***************************************************************************
 * KEY Functions
 */
uint32_t read_number(){
 674:	78 01 00 00 	mvhi r1,0x0
 678:	38 21 0b 14 	ori r1,r1,0xb14
 67c:	28 22 00 00 	lw r2,(r1+0)
	while (!(key0->key_av));
 680:	28 41 00 04 	lw r1,(r2+4)
 684:	44 20 ff ff 	be r1,r0,680 <read_number+0xc>
	return key0->code;
 688:	28 41 00 00 	lw r1,(r2+0)
}
 68c:	c3 a0 00 00 	ret

00000690 <buffercam_clear>:

int buffercam[SIZE_BUFFCAM];
int l;

void buffercam_clear()
{
 690:	78 01 00 00 	mvhi r1,0x0
 694:	38 21 0c 9c 	ori r1,r1,0xc9c


int buffercam[SIZE_BUFFCAM];
int l;

void buffercam_clear()
 698:	34 22 04 00 	addi r2,r1,1024
{
	uint32_t i;
    for (i=0; i< SIZE_BUFFCAM;i++)
    	buffercam[i]=0;
 69c:	58 20 00 00 	sw (r1+0),r0
 6a0:	34 21 00 04 	addi r1,r1,4
int l;

void buffercam_clear()
{
	uint32_t i;
    for (i=0; i< SIZE_BUFFCAM;i++)
 6a4:	5c 22 ff fe 	bne r1,r2,69c <buffercam_clear+0xc>
    	buffercam[i]=0;

}
 6a8:	c3 a0 00 00 	ret

000006ac <buffercam_upload>:

void buffercam_upload(uint32_t size)
{
 6ac:	37 9c ff f0 	addi sp,sp,-16
 6b0:	5b 8b 00 10 	sw (sp+16),r11
 6b4:	5b 8c 00 0c 	sw (sp+12),r12
 6b8:	5b 8d 00 08 	sw (sp+8),r13
 6bc:	5b 9d 00 04 	sw (sp+4),ra
 6c0:	b8 20 68 00 	mv r13,r1
	uint32_t i;
        for (i=0; i< size;i++)
 6c4:	44 20 00 09 	be r1,r0,6e8 <buffercam_upload+0x3c>
 6c8:	78 0b 00 00 	mvhi r11,0x0
 6cc:	39 6b 0c 9c 	ori r11,r11,0xc9c
 6d0:	34 0c 00 00 	mvi r12,0
    	    buffercam[i]=uart_getchar1();
 6d4:	fb ff ff 90 	calli 514 <uart_getchar1>
 6d8:	59 61 00 00 	sw (r11+0),r1
}

void buffercam_upload(uint32_t size)
{
	uint32_t i;
        for (i=0; i< size;i++)
 6dc:	35 8c 00 01 	addi r12,r12,1
 6e0:	35 6b 00 04 	addi r11,r11,4
 6e4:	55 ac ff fc 	bgu r13,r12,6d4 <buffercam_upload+0x28>
    	    buffercam[i]=uart_getchar1();
}	
 6e8:	2b 9d 00 04 	lw ra,(sp+4)
 6ec:	2b 8b 00 10 	lw r11,(sp+16)
 6f0:	2b 8c 00 0c 	lw r12,(sp+12)
 6f4:	2b 8d 00 08 	lw r13,(sp+8)
 6f8:	37 9c 00 10 	addi sp,sp,16
 6fc:	c3 a0 00 00 	ret

00000700 <buffercam_uartsend>:

void buffercam_uartsend(uint32_t size)
{
 700:	37 9c ff e8 	addi sp,sp,-24
 704:	5b 8b 00 18 	sw (sp+24),r11
 708:	5b 8c 00 14 	sw (sp+20),r12
 70c:	5b 8d 00 10 	sw (sp+16),r13
 710:	5b 8e 00 0c 	sw (sp+12),r14
 714:	5b 8f 00 08 	sw (sp+8),r15
 718:	5b 9d 00 04 	sw (sp+4),ra
 71c:	b8 20 68 00 	mv r13,r1
	uint32_t i;

    	for (i=1; i< size;i++){
 720:	34 01 00 01 	mvi r1,1
 724:	50 2d 00 0e 	bgeu r1,r13,75c <buffercam_uartsend+0x5c>
 728:	78 0c 00 00 	mvhi r12,0x0
 72c:	39 8c 0c 9c 	ori r12,r12,0xc9c
 730:	34 0b 00 01 	mvi r11,1
				
		if (buffercam[i]==0x76 && buffercam[i+1]==0x00){
 734:	b9 80 78 00 	mv r15,r12
 738:	34 0e 00 76 	mvi r14,118
 73c:	3d 62 00 02 	sli r2,r11,2
 740:	b5 82 10 00 	add r2,r12,r2
 744:	28 42 00 00 	lw r2,(r2+0)
 748:	44 4e 00 0d 	be r2,r14,77c <buffercam_uartsend+0x7c>
 74c:	35 6b 00 01 	addi r11,r11,1
			i=i+5;
		} 
		
    		uart_putchar0(buffercam[i]);
 750:	20 41 00 ff 	andi r1,r2,0xff
 754:	fb ff ff 8b 	calli 580 <uart_putchar0>

void buffercam_uartsend(uint32_t size)
{
	uint32_t i;

    	for (i=1; i< size;i++){
 758:	55 ab ff f9 	bgu r13,r11,73c <buffercam_uartsend+0x3c>
			i=i+5;
		} 
		
    		uart_putchar0(buffercam[i]);
	}
}
 75c:	2b 9d 00 04 	lw ra,(sp+4)
 760:	2b 8b 00 18 	lw r11,(sp+24)
 764:	2b 8c 00 14 	lw r12,(sp+20)
 768:	2b 8d 00 10 	lw r13,(sp+16)
 76c:	2b 8e 00 0c 	lw r14,(sp+12)
 770:	2b 8f 00 08 	lw r15,(sp+8)
 774:	37 9c 00 18 	addi sp,sp,24
 778:	c3 a0 00 00 	ret
{
	uint32_t i;

    	for (i=1; i< size;i++){
				
		if (buffercam[i]==0x76 && buffercam[i+1]==0x00){
 77c:	35 61 00 01 	addi r1,r11,1
 780:	3c 23 00 02 	sli r3,r1,2
			i=i+5;
 784:	35 64 00 05 	addi r4,r11,5
{
	uint32_t i;

    	for (i=1; i< size;i++){
				
		if (buffercam[i]==0x76 && buffercam[i+1]==0x00){
 788:	b5 e3 18 00 	add r3,r15,r3
 78c:	28 63 00 00 	lw r3,(r3+0)
			i=i+5;
 790:	3c 84 00 02 	sli r4,r4,2
 794:	35 6b 00 06 	addi r11,r11,6
 798:	b5 e4 20 00 	add r4,r15,r4
{
	uint32_t i;

    	for (i=1; i< size;i++){
				
		if (buffercam[i]==0x76 && buffercam[i+1]==0x00){
 79c:	5c 60 00 03 	bne r3,r0,7a8 <buffercam_uartsend+0xa8>
			i=i+5;
 7a0:	28 82 00 00 	lw r2,(r4+0)
 7a4:	e3 ff ff eb 	bi 750 <buffercam_uartsend+0x50>
{
	uint32_t i;

    	for (i=1; i< size;i++){
				
		if (buffercam[i]==0x76 && buffercam[i+1]==0x00){
 7a8:	b8 20 58 00 	mv r11,r1
 7ac:	e3 ff ff e9 	bi 750 <buffercam_uartsend+0x50>

000007b0 <resetcommand>:
	}
}



void resetcommand(char c){
 7b0:	37 9c ff fc 	addi sp,sp,-4
 7b4:	5b 9d 00 04 	sw (sp+4),ra
 7b8:	78 01 00 00 	mvhi r1,0x0
 7bc:	38 21 0c 9c 	ori r1,r1,0xc9c
 7c0:	34 22 04 00 	addi r2,r1,1024

void buffercam_clear()
{
	uint32_t i;
    for (i=0; i< SIZE_BUFFCAM;i++)
    	buffercam[i]=0;
 7c4:	58 20 00 00 	sw (r1+0),r0
 7c8:	34 21 00 04 	addi r1,r1,4
int l;

void buffercam_clear()
{
	uint32_t i;
    for (i=0; i< SIZE_BUFFCAM;i++)
 7cc:	5c 22 ff fe 	bne r1,r2,7c4 <resetcommand+0x14>

void resetcommand(char c){

	buffercam_clear();

	uart_putchar1(COMMANDSEND);
 7d0:	34 01 00 56 	mvi r1,86
 7d4:	fb ff ff 74 	calli 5a4 <uart_putchar1>
	uart_putchar1(SERIALNUM);
 7d8:	34 01 00 00 	mvi r1,0
 7dc:	fb ff ff 72 	calli 5a4 <uart_putchar1>
	uart_putchar1(CMD_RESET);
 7e0:	34 01 00 26 	mvi r1,38
 7e4:	fb ff ff 70 	calli 5a4 <uart_putchar1>
	uart_putchar1(COMMANDEND);
 7e8:	34 01 00 00 	mvi r1,0
 7ec:	fb ff ff 6e 	calli 5a4 <uart_putchar1>
	buffercam_upload(71);
 7f0:	34 01 00 47 	mvi r1,71
 7f4:	fb ff ff ae 	calli 6ac <buffercam_upload>
//	buffercam_uartsend(71);
}
 7f8:	2b 9d 00 04 	lw ra,(sp+4)
 7fc:	37 9c 00 04 	addi sp,sp,4
 800:	c3 a0 00 00 	ret

00000804 <getversioncommand>:


void getversioncommand(char c)
{
 804:	37 9c ff fc 	addi sp,sp,-4
 808:	5b 9d 00 04 	sw (sp+4),ra
 80c:	78 01 00 00 	mvhi r1,0x0
 810:	38 21 0c 9c 	ori r1,r1,0xc9c
	buffercam_upload(71);
//	buffercam_uartsend(71);
}


void getversioncommand(char c)
 814:	34 22 04 00 	addi r2,r1,1024

void buffercam_clear()
{
	uint32_t i;
    for (i=0; i< SIZE_BUFFCAM;i++)
    	buffercam[i]=0;
 818:	58 20 00 00 	sw (r1+0),r0
 81c:	34 21 00 04 	addi r1,r1,4
int l;

void buffercam_clear()
{
	uint32_t i;
    for (i=0; i< SIZE_BUFFCAM;i++)
 820:	5c 22 ff fe 	bne r1,r2,818 <getversioncommand+0x14>
void getversioncommand(char c)
{

	buffercam_clear();

	uart_putchar1(COMMANDSEND);
 824:	34 01 00 56 	mvi r1,86
 828:	fb ff ff 5f 	calli 5a4 <uart_putchar1>
	uart_putchar1(SERIALNUM);
 82c:	34 01 00 00 	mvi r1,0
 830:	fb ff ff 5d 	calli 5a4 <uart_putchar1>
	uart_putchar1(CMD_GETVERSION);
 834:	34 01 00 11 	mvi r1,17
 838:	fb ff ff 5b 	calli 5a4 <uart_putchar1>
	uart_putchar1(COMMANDEND);
 83c:	34 01 00 00 	mvi r1,0
 840:	fb ff ff 59 	calli 5a4 <uart_putchar1>

	buffercam_upload(15);
 844:	34 01 00 0f 	mvi r1,15
 848:	fb ff ff 99 	calli 6ac <buffercam_upload>
	//buffercam_uartsend(15);
}
 84c:	2b 9d 00 04 	lw ra,(sp+4)
 850:	37 9c 00 04 	addi sp,sp,4
 854:	c3 a0 00 00 	ret

00000858 <takephotocommand>:
//take_picture
void takephotocommand(char c)
{
 858:	37 9c ff fc 	addi sp,sp,-4
 85c:	5b 9d 00 04 	sw (sp+4),ra
 860:	78 01 00 00 	mvhi r1,0x0
 864:	38 21 0c 9c 	ori r1,r1,0xc9c

	buffercam_upload(15);
	//buffercam_uartsend(15);
}
//take_picture
void takephotocommand(char c)
 868:	34 22 04 00 	addi r2,r1,1024

void buffercam_clear()
{
	uint32_t i;
    for (i=0; i< SIZE_BUFFCAM;i++)
    	buffercam[i]=0;
 86c:	58 20 00 00 	sw (r1+0),r0
 870:	34 21 00 04 	addi r1,r1,4
int l;

void buffercam_clear()
{
	uint32_t i;
    for (i=0; i< SIZE_BUFFCAM;i++)
 874:	5c 22 ff fe 	bne r1,r2,86c <takephotocommand+0x14>
{
	uint32_t x='0';	
	
	buffercam_clear();
        
	uart_putchar1(COMMANDSEND);
 878:	34 01 00 56 	mvi r1,86
 87c:	fb ff ff 4a 	calli 5a4 <uart_putchar1>
	uart_putchar1(SERIALNUM);
 880:	34 01 00 00 	mvi r1,0
 884:	fb ff ff 48 	calli 5a4 <uart_putchar1>
	uart_putchar1(CMD_TAKEPHOTO);
 888:	34 01 00 36 	mvi r1,54
 88c:	fb ff ff 46 	calli 5a4 <uart_putchar1>
	uart_putchar1(CONS);	
 890:	34 01 00 01 	mvi r1,1
 894:	fb ff ff 44 	calli 5a4 <uart_putchar1>
	uart_putchar1(FBUF_STOPCURRENTFRAME);	
 898:	34 01 00 00 	mvi r1,0
 89c:	fb ff ff 42 	calli 5a4 <uart_putchar1>

	buffercam_upload(5);
 8a0:	34 01 00 05 	mvi r1,5
 8a4:	fb ff ff 82 	calli 6ac <buffercam_upload>
	//buffercam_uartsend(5);
	
}
 8a8:	2b 9d 00 04 	lw ra,(sp+4)
 8ac:	37 9c 00 04 	addi sp,sp,4
 8b0:	c3 a0 00 00 	ret

000008b4 <getbufflencommand>:
//read_size,,, confirmar si tomo la foto (buf[0]==0x76 && buf[2]==0x34)
//hay info importante XL,REVISAR
int getbufflencommand()
{
 8b4:	37 9c ff f8 	addi sp,sp,-8
 8b8:	5b 8b 00 08 	sw (sp+8),r11
 8bc:	5b 9d 00 04 	sw (sp+4),ra
 8c0:	78 0b 00 00 	mvhi r11,0x0
 8c4:	39 6b 0c 9c 	ori r11,r11,0xc9c
 8c8:	b9 60 08 00 	mv r1,r11
	//buffercam_uartsend(5);
	
}
//read_size,,, confirmar si tomo la foto (buf[0]==0x76 && buf[2]==0x34)
//hay info importante XL,REVISAR
int getbufflencommand()
 8cc:	35 62 04 00 	addi r2,r11,1024

void buffercam_clear()
{
	uint32_t i;
    for (i=0; i< SIZE_BUFFCAM;i++)
    	buffercam[i]=0;
 8d0:	58 20 00 00 	sw (r1+0),r0
 8d4:	34 21 00 04 	addi r1,r1,4
int l;

void buffercam_clear()
{
	uint32_t i;
    for (i=0; i< SIZE_BUFFCAM;i++)
 8d8:	5c 22 ff fe 	bne r1,r2,8d0 <getbufflencommand+0x1c>
	uint32_t bytes,  x='0';	
	buffercam_clear();
	//uart1->rxtx;
	//msleep(30);        
	
	uart_putchar1(COMMANDSEND);
 8dc:	34 01 00 56 	mvi r1,86
 8e0:	fb ff ff 31 	calli 5a4 <uart_putchar1>
	uart_putchar1(SERIALNUM);
 8e4:	34 01 00 00 	mvi r1,0
 8e8:	fb ff ff 2f 	calli 5a4 <uart_putchar1>
	uart_putchar1(CMD_GETBUFFLEN);
 8ec:	34 01 00 34 	mvi r1,52
 8f0:	fb ff ff 2d 	calli 5a4 <uart_putchar1>
	uart_putchar1(CONS);	
 8f4:	34 01 00 01 	mvi r1,1
 8f8:	fb ff ff 2b 	calli 5a4 <uart_putchar1>
	uart_putchar1(FBUF_CURRENTFRAME);	
 8fc:	34 01 00 00 	mvi r1,0
 900:	fb ff ff 29 	calli 5a4 <uart_putchar1>

	buffercam_upload(9);
 904:	34 01 00 09 	mvi r1,9
 908:	fb ff ff 69 	calli 6ac <buffercam_upload>
	bytes=bytes<<8;	
	bytes=buffercam[6];
	bytes=bytes<<8;	
	bytes=buffercam[7];
	bytes=bytes<<8;	
	bytes=buffercam[8];
 90c:	29 61 00 20 	lw r1,(r11+32)

	return bytes;
        //uint32_t sizeX;
	//sizeX= (buffercam[7]<<8) +buffercam[8];
	
}
 910:	3c 21 00 08 	sli r1,r1,8
 914:	2b 9d 00 04 	lw ra,(sp+4)
 918:	2b 8b 00 08 	lw r11,(sp+8)
 91c:	37 9c 00 08 	addi sp,sp,8
 920:	c3 a0 00 00 	ret

00000924 <readphotocommand>:
//export_buf
void readphotocommand(int  bytes)
{
 924:	37 9c ff d8 	addi sp,sp,-40
 928:	5b 8b 00 28 	sw (sp+40),r11
 92c:	5b 8c 00 24 	sw (sp+36),r12
 930:	5b 8d 00 20 	sw (sp+32),r13
 934:	5b 8e 00 1c 	sw (sp+28),r14
 938:	5b 8f 00 18 	sw (sp+24),r15
 93c:	5b 90 00 14 	sw (sp+20),r16
 940:	5b 91 00 10 	sw (sp+16),r17
 944:	5b 92 00 0c 	sw (sp+12),r18
 948:	5b 93 00 08 	sw (sp+8),r19
 94c:	5b 9d 00 04 	sw (sp+4),ra

	buffercam_clear();	
	
	while( addr < bytes ){

		chunk = inc;
 950:	78 02 00 00 	mvhi r2,0x0
 954:	38 42 0c 9c 	ori r2,r2,0xc9c
	//sizeX= (buffercam[7]<<8) +buffercam[8];
	
}
//export_buf
void readphotocommand(int  bytes)
{
 958:	b8 20 70 00 	mv r14,r1
        //uint32_t sizeX;
	//sizeX= (buffercam[7]<<8) +buffercam[8];
	
}
//export_buf
void readphotocommand(int  bytes)
 95c:	34 43 04 00 	addi r3,r2,1024

void buffercam_clear()
{
	uint32_t i;
    for (i=0; i< SIZE_BUFFCAM;i++)
    	buffercam[i]=0;
 960:	58 40 00 00 	sw (r2+0),r0
 964:	34 42 00 04 	addi r2,r2,4
int l;

void buffercam_clear()
{
	uint32_t i;
    for (i=0; i< SIZE_BUFFCAM;i++)
 968:	5c 43 ff fe 	bne r2,r3,960 <readphotocommand+0x3c>
int addr =0;
int chunk;

	buffercam_clear();	
	
	while( addr < bytes ){
 96c:	4c 0e 00 34 	bge r0,r14,a3c <readphotocommand+0x118>
 970:	34 0b 00 00 	mvi r11,0

		chunk = inc;
                if (chunk > (bytes-addr)) 
 974:	34 13 00 c7 	mvi r19,199
 978:	c9 cb 60 00 	sub r12,r14,r11
 97c:	15 91 00 10 	sri r17,r12,16
 980:	15 90 00 08 	sri r16,r12,8
 984:	49 93 00 3a 	bg r12,r19,a6c <readphotocommand+0x148>
 988:	01 92 00 18 	srui r18,r12,24
 98c:	22 31 00 ff 	andi r17,r17,0xff
 990:	22 10 00 ff 	andi r16,r16,0xff
 994:	21 8f 00 ff 	andi r15,r12,0xff
 998:	35 8d 00 06 	addi r13,r12,6
                  chunk = bytes-addr; 
		uart_putchar1(COMMANDSEND);
 99c:	34 01 00 56 	mvi r1,86
 9a0:	fb ff ff 01 	calli 5a4 <uart_putchar1>
		uart_putchar1(SERIALNUM);
 9a4:	34 01 00 00 	mvi r1,0
 9a8:	fb ff fe ff 	calli 5a4 <uart_putchar1>
		uart_putchar1(CMD_READBUFF);
 9ac:	34 01 00 32 	mvi r1,50
 9b0:	fb ff fe fd 	calli 5a4 <uart_putchar1>
		uart_putchar1(CONS_1);	
 9b4:	34 01 00 0c 	mvi r1,12
 9b8:	fb ff fe fb 	calli 5a4 <uart_putchar1>
		uart_putchar1(FBUF_CURRENTFRAME);	
 9bc:	34 01 00 00 	mvi r1,0
 9c0:	fb ff fe f9 	calli 5a4 <uart_putchar1>
		uart_putchar1(CONS_2);	
 9c4:	34 01 00 0a 	mvi r1,10
 9c8:	fb ff fe f7 	calli 5a4 <uart_putchar1>
		uart_putchar1((addr >> 24) & 0xff);
 9cc:	01 61 00 18 	srui r1,r11,24
 9d0:	fb ff fe f5 	calli 5a4 <uart_putchar1>
		uart_putchar1((addr>>16) & 0xff);
 9d4:	15 62 00 10 	sri r2,r11,16
 9d8:	20 41 00 ff 	andi r1,r2,0xff
 9dc:	fb ff fe f2 	calli 5a4 <uart_putchar1>
		uart_putchar1((addr>>8 ) & 0xff);
 9e0:	15 62 00 08 	sri r2,r11,8
 9e4:	20 41 00 ff 	andi r1,r2,0xff
 9e8:	fb ff fe ef 	calli 5a4 <uart_putchar1>
		uart_putchar1(addr & 0xff);
 9ec:	21 61 00 ff 	andi r1,r11,0xff
 9f0:	fb ff fe ed 	calli 5a4 <uart_putchar1>

		uart_putchar1((chunk >> 24) & 0xff);
 9f4:	ba 40 08 00 	mv r1,r18
 9f8:	fb ff fe eb 	calli 5a4 <uart_putchar1>
		uart_putchar1((chunk>>16) & 0xff);
 9fc:	ba 20 08 00 	mv r1,r17
 a00:	fb ff fe e9 	calli 5a4 <uart_putchar1>
		uart_putchar1((chunk>>8 ) & 0xff);
 a04:	ba 00 08 00 	mv r1,r16
 a08:	fb ff fe e7 	calli 5a4 <uart_putchar1>
		uart_putchar1(chunk & 0xff);
 a0c:	b9 e0 08 00 	mv r1,r15
 a10:	fb ff fe e5 	calli 5a4 <uart_putchar1>

		uart_putchar1(CONS);
 a14:	34 01 00 01 	mvi r1,1
 a18:	fb ff fe e3 	calli 5a4 <uart_putchar1>
		uart_putchar1(ZERO);
 a1c:	34 01 00 00 	mvi r1,0
 a20:	fb ff fe e1 	calli 5a4 <uart_putchar1>
		for (i=0; i< 5;i++){
    	    		uart_getchar1();
		}
		*/
		
                buffercam_upload(chunk+6);
 a24:	b9 a0 08 00 	mv r1,r13
 a28:	fb ff ff 21 	calli 6ac <buffercam_upload>
		uart_putchar1(chunk & 0xff);

		uart_putchar1(CONS);
		uart_putchar1(ZERO);

		addr+=chunk;
 a2c:	b5 6c 58 00 	add r11,r11,r12
    	    		uart_getchar1();
		}
		*/
		
                buffercam_upload(chunk+6);
	        buffercam_uartsend(chunk+6);
 a30:	b9 a0 08 00 	mv r1,r13
 a34:	fb ff ff 33 	calli 700 <buffercam_uartsend>
int addr =0;
int chunk;

	buffercam_clear();	
	
	while( addr < bytes ){
 a38:	49 cb ff d0 	bg r14,r11,978 <readphotocommand+0x54>
		
                buffercam_upload(chunk+6);
	        buffercam_uartsend(chunk+6);
	}
	
}
 a3c:	2b 9d 00 04 	lw ra,(sp+4)
 a40:	2b 8b 00 28 	lw r11,(sp+40)
 a44:	2b 8c 00 24 	lw r12,(sp+36)
 a48:	2b 8d 00 20 	lw r13,(sp+32)
 a4c:	2b 8e 00 1c 	lw r14,(sp+28)
 a50:	2b 8f 00 18 	lw r15,(sp+24)
 a54:	2b 90 00 14 	lw r16,(sp+20)
 a58:	2b 91 00 10 	lw r17,(sp+16)
 a5c:	2b 92 00 0c 	lw r18,(sp+12)
 a60:	2b 93 00 08 	lw r19,(sp+8)
 a64:	37 9c 00 28 	addi sp,sp,40
 a68:	c3 a0 00 00 	ret
	buffercam_clear();	
	
	while( addr < bytes ){

		chunk = inc;
                if (chunk > (bytes-addr)) 
 a6c:	34 0d 00 ce 	mvi r13,206
 a70:	34 0f 00 c8 	mvi r15,200
 a74:	34 10 00 00 	mvi r16,0
 a78:	34 11 00 00 	mvi r17,0
 a7c:	34 12 00 00 	mvi r18,0

	buffercam_clear();	
	
	while( addr < bytes ){

		chunk = inc;
 a80:	34 0c 00 c8 	mvi r12,200
 a84:	e3 ff ff c6 	bi 99c <readphotocommand+0x78>

00000a88 <imagesize>:
	}
	
}

void imagesize(char c)
{
 a88:	37 9c ff fc 	addi sp,sp,-4
 a8c:	5b 9d 00 04 	sw (sp+4),ra
 a90:	78 01 00 00 	mvhi r1,0x0
 a94:	38 21 0c 9c 	ori r1,r1,0xc9c
	        buffercam_uartsend(chunk+6);
	}
	
}

void imagesize(char c)
 a98:	34 22 04 00 	addi r2,r1,1024

void buffercam_clear()
{
	uint32_t i;
    for (i=0; i< SIZE_BUFFCAM;i++)
    	buffercam[i]=0;
 a9c:	58 20 00 00 	sw (r1+0),r0
 aa0:	34 21 00 04 	addi r1,r1,4
int l;

void buffercam_clear()
{
	uint32_t i;
    for (i=0; i< SIZE_BUFFCAM;i++)
 aa4:	5c 22 ff fe 	bne r1,r2,a9c <imagesize+0x14>
}

void imagesize(char c)
{
	buffercam_clear();
	uart_putchar1(COMMANDSEND);
 aa8:	34 01 00 56 	mvi r1,86
 aac:	fb ff fe be 	calli 5a4 <uart_putchar1>
	uart_putchar1(SERIALNUM);
 ab0:	34 01 00 00 	mvi r1,0
 ab4:	fb ff fe bc 	calli 5a4 <uart_putchar1>
	uart_putchar1(WRITE_DATA);
 ab8:	34 01 00 31 	mvi r1,49
 abc:	fb ff fe ba 	calli 5a4 <uart_putchar1>
	uart_putchar1(0X05);	
 ac0:	34 01 00 05 	mvi r1,5
 ac4:	fb ff fe b8 	calli 5a4 <uart_putchar1>
	uart_putchar1(0X04);	
 ac8:	34 01 00 04 	mvi r1,4
 acc:	fb ff fe b6 	calli 5a4 <uart_putchar1>
	uart_putchar1(CONS);
 ad0:	34 01 00 01 	mvi r1,1
 ad4:	fb ff fe b4 	calli 5a4 <uart_putchar1>
	uart_putchar1(ZERO);
 ad8:	34 01 00 00 	mvi r1,0
 adc:	fb ff fe b2 	calli 5a4 <uart_putchar1>
	uart_putchar1(0X19);	
 ae0:	34 01 00 19 	mvi r1,25
 ae4:	fb ff fe b0 	calli 5a4 <uart_putchar1>
	uart_putchar1(RESOLUTION);
 ae8:	34 01 00 22 	mvi r1,34
 aec:	fb ff fe ae 	calli 5a4 <uart_putchar1>

	buffercam_upload(5);
 af0:	34 01 00 05 	mvi r1,5
 af4:	fb ff fe ee 	calli 6ac <buffercam_upload>
	//buffercam_uartsend(5);


}
 af8:	2b 9d 00 04 	lw ra,(sp+4)
 afc:	37 9c 00 04 	addi sp,sp,4
 b00:	c3 a0 00 00 	ret

00000b04 <pppp>:

//p = &arreglo[0]; 

		
	
}
 b04:	c3 a0 00 00 	ret


image:     formato del fichero elf32-lm32

Secciones:
Ind Nombre        Tamaño    VMA       LMA       Desp fich Alin
  0 .text         000008dc  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       00000114  000008dc  000008dc  00000930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         0000001c  000009f0  000009f0  00000a44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0000008c  00000a0c  00000a0c  00000a60  2**2
                  ALLOC
  4 .debug_abbrev 0000034e  00000000  00000000  00000a60  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000095d  00000000  00000000  00000dae  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000081f  00000000  00000000  0000170b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000170  00000000  00000000  00001f2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000004a5  00000000  00000000  0000209c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubnames 000001b0  00000000  00000000  00002541  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubtypes 0000008f  00000000  00000000  000026f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000040  00000000  00000000  00002780  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  000027c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000266  00000000  00000000  000027f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .comment      00000011  00000000  00000000  00002a5e  2**0
                  CONTENTS, READONLY

Desensamblado de la sección .text:

00000000 <_ftext>:
   0:	98 00 00 00 	xor r0,r0,r0
   4:	d0 00 00 00 	wcsr IE,r0
   8:	78 01 00 00 	mvhi r1,0x0
   c:	38 21 00 00 	ori r1,r1,0x0
  10:	d0 e1 00 00 	wcsr EBA,r1
  14:	f8 00 00 3b 	calli 100 <_crt0>
  18:	34 00 00 00 	nop
  1c:	34 00 00 00 	nop

00000020 <_breakpoint_handler>:
  20:	34 00 00 00 	nop
  24:	34 00 00 00 	nop
  28:	34 00 00 00 	nop
  2c:	34 00 00 00 	nop
  30:	34 00 00 00 	nop
  34:	34 00 00 00 	nop
  38:	34 00 00 00 	nop
  3c:	34 00 00 00 	nop

00000040 <_ibuserror_handler>:
  40:	34 00 00 00 	nop
  44:	34 00 00 00 	nop
  48:	34 00 00 00 	nop
  4c:	34 00 00 00 	nop
  50:	34 00 00 00 	nop
  54:	34 00 00 00 	nop
  58:	34 00 00 00 	nop
  5c:	34 00 00 00 	nop

00000060 <_watchpoint_handler>:
  60:	34 00 00 00 	nop
  64:	34 00 00 00 	nop
  68:	34 00 00 00 	nop
  6c:	34 00 00 00 	nop
  70:	34 00 00 00 	nop
  74:	34 00 00 00 	nop
  78:	34 00 00 00 	nop
  7c:	34 00 00 00 	nop

00000080 <_dbuserror_handler>:
  80:	34 00 00 00 	nop
  84:	34 00 00 00 	nop
  88:	34 00 00 00 	nop
  8c:	34 00 00 00 	nop
  90:	34 00 00 00 	nop
  94:	34 00 00 00 	nop
  98:	34 00 00 00 	nop
  9c:	34 00 00 00 	nop

000000a0 <_divzero_handler>:
  a0:	34 00 00 00 	nop
  a4:	34 00 00 00 	nop
  a8:	34 00 00 00 	nop
  ac:	34 00 00 00 	nop
  b0:	34 00 00 00 	nop
  b4:	34 00 00 00 	nop
  b8:	34 00 00 00 	nop
  bc:	34 00 00 00 	nop

000000c0 <_interrupt_handler>:
  c0:	5b 9d 00 00 	sw (sp+0),ra
  c4:	f8 00 00 2b 	calli 170 <_save_all>
  c8:	90 40 08 00 	rcsr r1,IP
  cc:	f8 00 01 69 	calli 670 <irq_handler>
  d0:	78 01 ff ff 	mvhi r1,0xffff
  d4:	38 21 ff ff 	ori r1,r1,0xffff
  d8:	d0 41 00 00 	wcsr IP,r1
  dc:	e0 00 00 38 	bi 1bc <_restore_all_and_eret>

000000e0 <_scall_handler>:
  e0:	34 00 00 00 	nop
  e4:	34 00 00 00 	nop
  e8:	34 00 00 00 	nop
  ec:	34 00 00 00 	nop
  f0:	34 00 00 00 	nop
  f4:	34 00 00 00 	nop
  f8:	34 00 00 00 	nop
  fc:	34 00 00 00 	nop

00000100 <_crt0>:
 100:	78 1c 00 00 	mvhi sp,0x0
 104:	3b 9c 0f fc 	ori sp,sp,0xffc
 108:	78 1a 00 00 	mvhi gp,0x0
 10c:	3b 5a 0a 10 	ori gp,gp,0xa10
 110:	78 01 00 00 	mvhi r1,0x0
 114:	38 21 0a 0c 	ori r1,r1,0xa0c
 118:	78 03 00 00 	mvhi r3,0x0
 11c:	38 63 0a 98 	ori r3,r3,0xa98

00000120 <.clearBSS>:
 120:	44 23 00 04 	be r1,r3,130 <.callMain>
 124:	58 20 00 00 	sw (r1+0),r0
 128:	34 21 00 04 	addi r1,r1,4
 12c:	e3 ff ff fd 	bi 120 <.clearBSS>

00000130 <.callMain>:
 130:	34 01 00 00 	mvi r1,0
 134:	34 02 00 00 	mvi r2,0
 138:	34 03 00 00 	mvi r3,0
 13c:	f8 00 00 5c 	calli 2ac <main>

00000140 <irq_enable>:
 140:	34 01 00 01 	mvi r1,1
 144:	d0 01 00 00 	wcsr IE,r1
 148:	c3 a0 00 00 	ret

0000014c <irq_disable>:
 14c:	34 01 00 00 	mvi r1,0
 150:	d0 01 00 00 	wcsr IE,r1
 154:	c3 a0 00 00 	ret

00000158 <irq_set_mask>:
 158:	d0 21 00 00 	wcsr IM,r1
 15c:	c3 a0 00 00 	ret

00000160 <irq_get_mask>:
 160:	90 20 08 00 	rcsr r1,IM
 164:	c3 a0 00 00 	ret

00000168 <jump>:
 168:	c0 20 00 00 	b r1

0000016c <halt>:
 16c:	e0 00 00 00 	bi 16c <halt>

00000170 <_save_all>:
 170:	37 9c ff 80 	addi sp,sp,-128
 174:	5b 81 00 04 	sw (sp+4),r1
 178:	5b 82 00 08 	sw (sp+8),r2
 17c:	5b 83 00 0c 	sw (sp+12),r3
 180:	5b 84 00 10 	sw (sp+16),r4
 184:	5b 85 00 14 	sw (sp+20),r5
 188:	5b 86 00 18 	sw (sp+24),r6
 18c:	5b 87 00 1c 	sw (sp+28),r7
 190:	5b 88 00 20 	sw (sp+32),r8
 194:	5b 89 00 24 	sw (sp+36),r9
 198:	5b 8a 00 28 	sw (sp+40),r10
 19c:	5b 9e 00 78 	sw (sp+120),ea
 1a0:	5b 9f 00 7c 	sw (sp+124),ba
 1a4:	2b 81 00 80 	lw r1,(sp+128)
 1a8:	5b 81 00 74 	sw (sp+116),r1
 1ac:	bb 80 08 00 	mv r1,sp
 1b0:	34 21 00 80 	addi r1,r1,128
 1b4:	5b 81 00 70 	sw (sp+112),r1
 1b8:	c3 a0 00 00 	ret

000001bc <_restore_all_and_eret>:
 1bc:	2b 81 00 04 	lw r1,(sp+4)
 1c0:	2b 82 00 08 	lw r2,(sp+8)
 1c4:	2b 83 00 0c 	lw r3,(sp+12)
 1c8:	2b 84 00 10 	lw r4,(sp+16)
 1cc:	2b 85 00 14 	lw r5,(sp+20)
 1d0:	2b 86 00 18 	lw r6,(sp+24)
 1d4:	2b 87 00 1c 	lw r7,(sp+28)
 1d8:	2b 88 00 20 	lw r8,(sp+32)
 1dc:	2b 89 00 24 	lw r9,(sp+36)
 1e0:	2b 8a 00 28 	lw r10,(sp+40)
 1e4:	2b 9d 00 74 	lw ra,(sp+116)
 1e8:	2b 9e 00 78 	lw ea,(sp+120)
 1ec:	2b 9f 00 7c 	lw ba,(sp+124)
 1f0:	2b 9c 00 70 	lw sp,(sp+112)
 1f4:	c3 c0 00 00 	eret

000001f8 <get_sp>:
 1f8:	bb 80 08 00 	mv r1,sp
 1fc:	c3 a0 00 00 	ret

00000200 <get_gp>:
 200:	bb 40 08 00 	mv r1,gp
 204:	c3 a0 00 00 	ret

00000208 <writeint>:
 */

#include "soc-hw.h"

inline void writeint(uint32_t val)
{
 208:	37 9c ff f0 	addi sp,sp,-16
 20c:	5b 8b 00 10 	sw (sp+16),r11
 210:	5b 8c 00 0c 	sw (sp+12),r12
 214:	5b 8d 00 08 	sw (sp+8),r13
 218:	5b 9d 00 04 	sw (sp+4),ra
 21c:	34 0b 00 08 	mvi r11,8
 220:	b8 20 60 00 	mv r12,r1
	uint32_t i, digit;

	for (i=0; i<8; i++) {
		digit = (val & 0xf0000000) >> 28;
		if (digit >= 0xA) 
 224:	34 0d 00 09 	mvi r13,9
 228:	e0 00 00 02 	bi 230 <writeint+0x28>
			uart_putchar0('A'+digit-10);
		else
			uart_putchar0('0'+digit);
		val <<= 4;
 22c:	3d 8c 00 04 	sli r12,r12,4
inline void writeint(uint32_t val)
{
	uint32_t i, digit;

	for (i=0; i<8; i++) {
		digit = (val & 0xf0000000) >> 28;
 230:	01 82 00 1c 	srui r2,r12,28
		if (digit >= 0xA) 
			uart_putchar0('A'+digit-10);
 234:	34 41 00 37 	addi r1,r2,55
{
	uint32_t i, digit;

	for (i=0; i<8; i++) {
		digit = (val & 0xf0000000) >> 28;
		if (digit >= 0xA) 
 238:	51 a2 00 0a 	bgeu r13,r2,260 <writeint+0x58>
			uart_putchar0('A'+digit-10);
		else
			uart_putchar0('0'+digit);
 23c:	35 6b ff ff 	addi r11,r11,-1
 240:	f8 00 01 7b 	calli 82c <uart_putchar0>

inline void writeint(uint32_t val)
{
	uint32_t i, digit;

	for (i=0; i<8; i++) {
 244:	5d 60 ff fa 	bne r11,r0,22c <writeint+0x24>
			uart_putchar0('A'+digit-10);
		else
			uart_putchar0('0'+digit);
		val <<= 4;
	}
}
 248:	2b 9d 00 04 	lw ra,(sp+4)
 24c:	2b 8b 00 10 	lw r11,(sp+16)
 250:	2b 8c 00 0c 	lw r12,(sp+12)
 254:	2b 8d 00 08 	lw r13,(sp+8)
 258:	37 9c 00 10 	addi sp,sp,16
 25c:	c3 a0 00 00 	ret
	for (i=0; i<8; i++) {
		digit = (val & 0xf0000000) >> 28;
		if (digit >= 0xA) 
			uart_putchar0('A'+digit-10);
		else
			uart_putchar0('0'+digit);
 260:	34 41 00 30 	addi r1,r2,48
 264:	e3 ff ff f6 	bi 23c <writeint+0x34>

00000268 <test2>:
		val <<= 4;
	}
}

void test2() {
 268:	37 9c ff fc 	addi sp,sp,-4
 26c:	5b 9d 00 04 	sw (sp+4),ra
    uart_putchar0('b');   
 270:	34 01 00 62 	mvi r1,98
 274:	f8 00 01 6e 	calli 82c <uart_putchar0>
}
 278:	2b 9d 00 04 	lw ra,(sp+4)
 27c:	37 9c 00 04 	addi sp,sp,4
 280:	c3 a0 00 00 	ret

00000284 <test>:

void test() {
 284:	37 9c ff fc 	addi sp,sp,-4
 288:	5b 9d 00 04 	sw (sp+4),ra
    uart_putchar0('a');
 28c:	34 01 00 61 	mvi r1,97
 290:	f8 00 01 67 	calli 82c <uart_putchar0>
    test2();
 294:	fb ff ff f5 	calli 268 <test2>
    uart_putchar0('c');
 298:	34 01 00 63 	mvi r1,99
 29c:	f8 00 01 64 	calli 82c <uart_putchar0>
} 
 2a0:	2b 9d 00 04 	lw ra,(sp+4)
 2a4:	37 9c 00 04 	addi sp,sp,4
 2a8:	c3 a0 00 00 	ret

000002ac <main>:
volatile uint8_t *p2;

extern uint32_t tic_msec;

int main()
{
 2ac:	37 9c ff dc 	addi sp,sp,-36
 2b0:	5b 8b 00 18 	sw (sp+24),r11
 2b4:	5b 8c 00 14 	sw (sp+20),r12
 2b8:	5b 8d 00 10 	sw (sp+16),r13
 2bc:	5b 8e 00 0c 	sw (sp+12),r14
 2c0:	5b 8f 00 08 	sw (sp+8),r15
 2c4:	5b 9d 00 04 	sw (sp+4),ra
 // {
//	  uart_putchar(2*(aa));
 //     uart_putchar((2+(aa++)));

  //}
	   prueba();
 2c8:	f8 00 00 cd 	calli 5fc <prueba>
   uart_putchar0('b');
 2cc:	34 01 00 62 	mvi r1,98
 2d0:	f8 00 01 57 	calli 82c <uart_putchar0>
   uart_putchar0(2+3);
 2d4:	34 01 00 05 	mvi r1,5
 2d8:	f8 00 01 55 	calli 82c <uart_putchar0>
   uart_putchar0(2*3);
 2dc:	34 01 00 06 	mvi r1,6
 2e0:	f8 00 01 53 	calli 82c <uart_putchar0>
   uart_putchar0(6/3);
 2e4:	34 01 00 02 	mvi r1,2
 2e8:	f8 00 01 51 	calli 82c <uart_putchar0>
   char test2[] = "Lokalerstr";
 2ec:	78 01 00 00 	mvhi r1,0x0
 2f0:	38 21 09 e0 	ori r1,r1,0x9e0
 2f4:	28 24 00 00 	lw r4,(r1+0)
 2f8:	28 23 00 04 	lw r3,(r1+4)
 2fc:	2c 22 00 08 	lhu r2,(r1+8)
 300:	40 21 00 0a 	lbu r1,(r1+10)
 304:	5b 84 00 1c 	sw (sp+28),r4
 308:	5b 83 00 20 	sw (sp+32),r3
 30c:	0f 82 00 24 	sh (sp+36),r2
 310:	33 81 00 26 	sb (sp+38),r1
//    for (i = 0; i < 4; i++)
 //       test2[i] = 'l';
  //  glob[0]  = 'g';
    
 	// Initialize stuff
	uart_init();
 314:	f8 00 01 33 	calli 7e0 <uart_init>

	// Say Hello!
	uart_putstr0( "** Spike Test Firmware **\n" );
 318:	78 01 00 00 	mvhi r1,0x0
 31c:	38 21 08 dc 	ori r1,r1,0x8dc
 320:	f8 00 01 55 	calli 874 <uart_putstr0>

	// Initialize TIC
	isr_init();
 324:	f8 00 00 ec 	calli 6d4 <isr_init>
	tic_init();
 328:	f8 00 01 1d 	calli 79c <tic_init>
	irq_set_mask( 0x00000002 );
 32c:	34 01 00 02 	mvi r1,2
 330:	fb ff ff 8a 	calli 158 <irq_set_mask>
	irq_enable();
 334:	fb ff ff 83 	calli 140 <irq_enable>

	// Say Hello!
	uart_putstr0( "Timer Interrupt instelled.\n" );
 338:	78 01 00 00 	mvhi r1,0x0
 33c:	38 21 08 f8 	ori r1,r1,0x8f8
 340:	f8 00 01 4d 	calli 874 <uart_putstr0>

	// Do some trivial tests
	uart_putstr0( "Subroutine-Return Test: " );
 344:	78 01 00 00 	mvhi r1,0x0
 348:	38 21 09 14 	ori r1,r1,0x914
 34c:	f8 00 01 4a 	calli 874 <uart_putstr0>
	test();
 350:	fb ff ff cd 	calli 284 <test>
	uart_putchar0('\n');    
 354:	34 01 00 0a 	mvi r1,10
 358:	f8 00 01 35 	calli 82c <uart_putchar0>

	uart_putstr0( "Local-Pointer Test:" );
 35c:	78 01 00 00 	mvhi r1,0x0
 360:	38 21 09 30 	ori r1,r1,0x930
 364:	f8 00 01 44 	calli 874 <uart_putstr0>
   uart_putchar0('b');
   uart_putchar0(2+3);
   uart_putchar0(2*3);
   uart_putchar0(6/3);
   char test2[] = "Lokalerstr";
   char *str = test2;
 368:	37 8b 00 1c 	addi r11,sp,28
	uart_putstr0( "Subroutine-Return Test: " );
	test();
	uart_putchar0('\n');    

	uart_putstr0( "Local-Pointer Test:" );
	for (;*str; str++) {
 36c:	41 62 00 00 	lbu r2,(r11+0)
 370:	35 6b 00 01 	addi r11,r11,1
	   uart_putchar0(*str);
 374:	b8 40 08 00 	mv r1,r2
	uart_putstr0( "Subroutine-Return Test: " );
	test();
	uart_putchar0('\n');    

	uart_putstr0( "Local-Pointer Test:" );
	for (;*str; str++) {
 378:	44 40 00 03 	be r2,r0,384 <main+0xd8>
	   uart_putchar0(*str);
 37c:	f8 00 01 2c 	calli 82c <uart_putchar0>
 380:	e3 ff ff fb 	bi 36c <main+0xc0>
	}
	uart_putchar0('\n');    
 384:	34 01 00 0a 	mvi r1,10
 388:	f8 00 01 29 	calli 82c <uart_putchar0>
	
	uart_putstr0( "Global-Pointer Test:" );
 38c:	78 01 00 00 	mvhi r1,0x0
 390:	38 21 09 44 	ori r1,r1,0x944
	str = glob;
 394:	78 0b 00 00 	mvhi r11,0x0
	for (;*str; str++) {
	   uart_putchar0(*str);
	}
	uart_putchar0('\n');    
	
	uart_putstr0( "Global-Pointer Test:" );
 398:	f8 00 01 37 	calli 874 <uart_putstr0>
	str = glob;
 39c:	39 6b 09 f0 	ori r11,r11,0x9f0
	for (;*str; str++) {
 3a0:	41 62 00 00 	lbu r2,(r11+0)
 3a4:	35 6b 00 01 	addi r11,r11,1
	   uart_putchar0(*str);
 3a8:	b8 40 08 00 	mv r1,r2
	}
	uart_putchar0('\n');    
	
	uart_putstr0( "Global-Pointer Test:" );
	str = glob;
	for (;*str; str++) {
 3ac:	44 40 00 03 	be r2,r0,3b8 <main+0x10c>
	   uart_putchar0(*str);
 3b0:	f8 00 01 1f 	calli 82c <uart_putchar0>
 3b4:	e3 ff ff fb 	bi 3a0 <main+0xf4>
	}
	uart_putchar0('\n');    
 3b8:	34 01 00 0a 	mvi r1,10
 3bc:	f8 00 01 1c 	calli 82c <uart_putchar0>

	uart_putstr0( "Stack Pointer : " );
 3c0:	78 01 00 00 	mvhi r1,0x0
 3c4:	38 21 09 5c 	ori r1,r1,0x95c
 3c8:	f8 00 01 2b 	calli 874 <uart_putstr0>
	writeint(get_sp());
 3cc:	fb ff ff 8b 	calli 1f8 <get_sp>
 3d0:	b8 20 60 00 	mv r12,r1
 3d4:	34 0b 00 08 	mvi r11,8
{
	uint32_t i, digit;

	for (i=0; i<8; i++) {
		digit = (val & 0xf0000000) >> 28;
		if (digit >= 0xA) 
 3d8:	34 0d 00 09 	mvi r13,9
inline void writeint(uint32_t val)
{
	uint32_t i, digit;

	for (i=0; i<8; i++) {
		digit = (val & 0xf0000000) >> 28;
 3dc:	01 82 00 1c 	srui r2,r12,28
		if (digit >= 0xA) 
			uart_putchar0('A'+digit-10);
 3e0:	34 41 00 37 	addi r1,r2,55
{
	uint32_t i, digit;

	for (i=0; i<8; i++) {
		digit = (val & 0xf0000000) >> 28;
		if (digit >= 0xA) 
 3e4:	51 a2 00 06 	bgeu r13,r2,3fc <main+0x150>
			uart_putchar0('A'+digit-10);
		else
			uart_putchar0('0'+digit);
 3e8:	35 6b ff ff 	addi r11,r11,-1
 3ec:	f8 00 01 10 	calli 82c <uart_putchar0>

inline void writeint(uint32_t val)
{
	uint32_t i, digit;

	for (i=0; i<8; i++) {
 3f0:	45 60 00 05 	be r11,r0,404 <main+0x158>
		digit = (val & 0xf0000000) >> 28;
		if (digit >= 0xA) 
			uart_putchar0('A'+digit-10);
		else
			uart_putchar0('0'+digit);
		val <<= 4;
 3f4:	3d 8c 00 04 	sli r12,r12,4
 3f8:	e3 ff ff f9 	bi 3dc <main+0x130>
	for (i=0; i<8; i++) {
		digit = (val & 0xf0000000) >> 28;
		if (digit >= 0xA) 
			uart_putchar0('A'+digit-10);
		else
			uart_putchar0('0'+digit);
 3fc:	34 41 00 30 	addi r1,r2,48
 400:	e3 ff ff fa 	bi 3e8 <main+0x13c>
	}
	uart_putchar0('\n');    

	uart_putstr0( "Stack Pointer : " );
	writeint(get_sp());
	uart_putchar0('\n');    
 404:	34 01 00 0a 	mvi r1,10
 408:	f8 00 01 09 	calli 82c <uart_putchar0>

	uart_putstr0( "Global Pointer: " );
 40c:	78 01 00 00 	mvhi r1,0x0
 410:	38 21 09 70 	ori r1,r1,0x970
 414:	f8 00 01 18 	calli 874 <uart_putstr0>
	writeint(get_gp());
 418:	fb ff ff 7a 	calli 200 <get_gp>
 41c:	b8 20 60 00 	mv r12,r1
 420:	34 0b 00 08 	mvi r11,8
{
	uint32_t i, digit;

	for (i=0; i<8; i++) {
		digit = (val & 0xf0000000) >> 28;
		if (digit >= 0xA) 
 424:	34 0d 00 09 	mvi r13,9
inline void writeint(uint32_t val)
{
	uint32_t i, digit;

	for (i=0; i<8; i++) {
		digit = (val & 0xf0000000) >> 28;
 428:	01 82 00 1c 	srui r2,r12,28
		if (digit >= 0xA) 
			uart_putchar0('A'+digit-10);
 42c:	34 41 00 37 	addi r1,r2,55
{
	uint32_t i, digit;

	for (i=0; i<8; i++) {
		digit = (val & 0xf0000000) >> 28;
		if (digit >= 0xA) 
 430:	51 a2 00 06 	bgeu r13,r2,448 <main+0x19c>
			uart_putchar0('A'+digit-10);
		else
			uart_putchar0('0'+digit);
 434:	35 6b ff ff 	addi r11,r11,-1
 438:	f8 00 00 fd 	calli 82c <uart_putchar0>

inline void writeint(uint32_t val)
{
	uint32_t i, digit;

	for (i=0; i<8; i++) {
 43c:	45 60 00 05 	be r11,r0,450 <main+0x1a4>
		digit = (val & 0xf0000000) >> 28;
		if (digit >= 0xA) 
			uart_putchar0('A'+digit-10);
		else
			uart_putchar0('0'+digit);
		val <<= 4;
 440:	3d 8c 00 04 	sli r12,r12,4
 444:	e3 ff ff f9 	bi 428 <main+0x17c>
	for (i=0; i<8; i++) {
		digit = (val & 0xf0000000) >> 28;
		if (digit >= 0xA) 
			uart_putchar0('A'+digit-10);
		else
			uart_putchar0('0'+digit);
 448:	34 41 00 30 	addi r1,r2,48
 44c:	e3 ff ff fa 	bi 434 <main+0x188>
	writeint(get_sp());
	uart_putchar0('\n');    

	uart_putstr0( "Global Pointer: " );
	writeint(get_gp());
	uart_putchar0('\n');    
 450:	34 01 00 0a 	mvi r1,10
 454:	f8 00 00 f6 	calli 82c <uart_putchar0>

	uart_putstr0( "Timer Test (1s): " );
 458:	78 01 00 00 	mvhi r1,0x0
 45c:	38 21 09 84 	ori r1,r1,0x984
 460:	78 0b 00 00 	mvhi r11,0x0
 464:	f8 00 01 04 	calli 874 <uart_putstr0>
	for(i=0; i<4; i++) {
 468:	34 0c 00 00 	mvi r12,0
 46c:	39 6b 09 98 	ori r11,r11,0x998
 470:	34 0d 00 04 	mvi r13,4
		uart_putstr0("tic...");    
 474:	b9 60 08 00 	mv r1,r11
 478:	f8 00 00 ff 	calli 874 <uart_putstr0>
	uart_putstr0( "Global Pointer: " );
	writeint(get_gp());
	uart_putchar0('\n');    

	uart_putstr0( "Timer Test (1s): " );
	for(i=0; i<4; i++) {
 47c:	35 8c 00 01 	addi r12,r12,1
		uart_putstr0("tic...");    
		msleep(1000);
 480:	34 01 03 e8 	mvi r1,1000
 484:	f8 00 00 ab 	calli 730 <msleep>
	uart_putstr0( "Global Pointer: " );
	writeint(get_gp());
	uart_putchar0('\n');    

	uart_putstr0( "Timer Test (1s): " );
	for(i=0; i<4; i++) {
 488:	5d 8d ff fb 	bne r12,r13,474 <main+0x1c8>
		uart_putstr0("tic...");    
		msleep(1000);
	}
	uart_putchar0('\n');    
 48c:	34 01 00 0a 	mvi r1,10
 490:	f8 00 00 e7 	calli 82c <uart_putchar0>

	uart_putstr0( "Timer Interrupt counter: " );
	writeint( tic_msec );
 494:	78 0b 00 00 	mvhi r11,0x0
		uart_putstr0("tic...");    
		msleep(1000);
	}
	uart_putchar0('\n');    

	uart_putstr0( "Timer Interrupt counter: " );
 498:	78 01 00 00 	mvhi r1,0x0
 49c:	38 21 09 a0 	ori r1,r1,0x9a0
	writeint( tic_msec );
 4a0:	39 6b 0a 94 	ori r11,r11,0xa94
		uart_putstr0("tic...");    
		msleep(1000);
	}
	uart_putchar0('\n');    

	uart_putstr0( "Timer Interrupt counter: " );
 4a4:	f8 00 00 f4 	calli 874 <uart_putstr0>
	writeint( tic_msec );
 4a8:	29 6d 00 00 	lw r13,(r11+0)
 4ac:	34 0c 00 08 	mvi r12,8
{
	uint32_t i, digit;

	for (i=0; i<8; i++) {
		digit = (val & 0xf0000000) >> 28;
		if (digit >= 0xA) 
 4b0:	34 0e 00 09 	mvi r14,9
inline void writeint(uint32_t val)
{
	uint32_t i, digit;

	for (i=0; i<8; i++) {
		digit = (val & 0xf0000000) >> 28;
 4b4:	01 a2 00 1c 	srui r2,r13,28
		if (digit >= 0xA) 
			uart_putchar0('A'+digit-10);
 4b8:	34 41 00 37 	addi r1,r2,55
{
	uint32_t i, digit;

	for (i=0; i<8; i++) {
		digit = (val & 0xf0000000) >> 28;
		if (digit >= 0xA) 
 4bc:	51 c2 00 06 	bgeu r14,r2,4d4 <main+0x228>
			uart_putchar0('A'+digit-10);
		else
			uart_putchar0('0'+digit);
 4c0:	35 8c ff ff 	addi r12,r12,-1
 4c4:	f8 00 00 da 	calli 82c <uart_putchar0>

inline void writeint(uint32_t val)
{
	uint32_t i, digit;

	for (i=0; i<8; i++) {
 4c8:	45 80 00 05 	be r12,r0,4dc <main+0x230>
		digit = (val & 0xf0000000) >> 28;
		if (digit >= 0xA) 
			uart_putchar0('A'+digit-10);
		else
			uart_putchar0('0'+digit);
		val <<= 4;
 4cc:	3d ad 00 04 	sli r13,r13,4
 4d0:	e3 ff ff f9 	bi 4b4 <main+0x208>
	for (i=0; i<8; i++) {
		digit = (val & 0xf0000000) >> 28;
		if (digit >= 0xA) 
			uart_putchar0('A'+digit-10);
		else
			uart_putchar0('0'+digit);
 4d4:	34 41 00 30 	addi r1,r2,48
 4d8:	e3 ff ff fa 	bi 4c0 <main+0x214>
	}
	uart_putchar0('\n');    

	uart_putstr0( "Timer Interrupt counter: " );
	writeint( tic_msec );
	uart_putchar0('\n');    
 4dc:	34 01 00 0a 	mvi r1,10
 4e0:	f8 00 00 d3 	calli 82c <uart_putchar0>

	int val = tic_msec;
 4e4:	29 6b 00 00 	lw r11,(r11+0)
	uart_putstr0( "Shift: " );
 4e8:	78 01 00 00 	mvhi r1,0x0
 4ec:	38 21 09 bc 	ori r1,r1,0x9bc

	uart_putstr0( "Timer Interrupt counter: " );
	writeint( tic_msec );
	uart_putchar0('\n');    

	int val = tic_msec;
 4f0:	b9 60 60 00 	mv r12,r11
	uart_putstr0( "Shift: " );
 4f4:	f8 00 00 e0 	calli 874 <uart_putstr0>
 4f8:	34 0d 00 08 	mvi r13,8
{
	uint32_t i, digit;

	for (i=0; i<8; i++) {
		digit = (val & 0xf0000000) >> 28;
		if (digit >= 0xA) 
 4fc:	34 0e 00 09 	mvi r14,9
inline void writeint(uint32_t val)
{
	uint32_t i, digit;

	for (i=0; i<8; i++) {
		digit = (val & 0xf0000000) >> 28;
 500:	01 62 00 1c 	srui r2,r11,28
		if (digit >= 0xA) 
			uart_putchar0('A'+digit-10);
 504:	34 41 00 37 	addi r1,r2,55
{
	uint32_t i, digit;

	for (i=0; i<8; i++) {
		digit = (val & 0xf0000000) >> 28;
		if (digit >= 0xA) 
 508:	51 c2 00 06 	bgeu r14,r2,520 <main+0x274>
			uart_putchar0('A'+digit-10);
		else
			uart_putchar0('0'+digit);
 50c:	35 ad ff ff 	addi r13,r13,-1
 510:	f8 00 00 c7 	calli 82c <uart_putchar0>

inline void writeint(uint32_t val)
{
	uint32_t i, digit;

	for (i=0; i<8; i++) {
 514:	45 a0 00 05 	be r13,r0,528 <main+0x27c>
		digit = (val & 0xf0000000) >> 28;
		if (digit >= 0xA) 
			uart_putchar0('A'+digit-10);
		else
			uart_putchar0('0'+digit);
		val <<= 4;
 518:	3d 6b 00 04 	sli r11,r11,4
 51c:	e3 ff ff f9 	bi 500 <main+0x254>
	for (i=0; i<8; i++) {
		digit = (val & 0xf0000000) >> 28;
		if (digit >= 0xA) 
			uart_putchar0('A'+digit-10);
		else
			uart_putchar0('0'+digit);
 520:	34 41 00 30 	addi r1,r2,48
 524:	e3 ff ff fa 	bi 50c <main+0x260>
	uart_putchar0('\n');    

	int val = tic_msec;
	uart_putstr0( "Shift: " );
	writeint( val );
	uart_putstr0(" <-> ");    
 528:	78 01 00 00 	mvhi r1,0x0
 52c:	38 21 09 c4 	ori r1,r1,0x9c4
 530:	f8 00 00 d1 	calli 874 <uart_putstr0>
 534:	34 0b 00 20 	mvi r11,32
	for(i=0; i<32; i++) {
		if (val & 0x80000000)
			uart_putchar0( '1' );
		else
			uart_putchar0( '0' );
 538:	34 01 00 30 	mvi r1,48
	int val = tic_msec;
	uart_putstr0( "Shift: " );
	writeint( val );
	uart_putstr0(" <-> ");    
	for(i=0; i<32; i++) {
		if (val & 0x80000000)
 53c:	4d 80 00 04 	bge r12,r0,54c <main+0x2a0>
			uart_putchar0( '1' );
 540:	34 01 00 31 	mvi r1,49
 544:	f8 00 00 ba 	calli 82c <uart_putchar0>
 548:	e0 00 00 02 	bi 550 <main+0x2a4>
		else
			uart_putchar0( '0' );
 54c:	f8 00 00 b8 	calli 82c <uart_putchar0>
 550:	35 6b ff ff 	addi r11,r11,-1

	int val = tic_msec;
	uart_putstr0( "Shift: " );
	writeint( val );
	uart_putstr0(" <-> ");    
	for(i=0; i<32; i++) {
 554:	45 60 00 03 	be r11,r0,560 <main+0x2b4>
		if (val & 0x80000000)
			uart_putchar0( '1' );
		else
			uart_putchar0( '0' );
			
		val <<= 1;
 558:	3d 8c 00 01 	sli r12,r12,1
 55c:	e3 ff ff f7 	bi 538 <main+0x28c>
	}
	uart_putstr0("\r\n");
 560:	78 01 00 00 	mvhi r1,0x0
 564:	38 21 09 cc 	ori r1,r1,0x9cc
 568:	f8 00 00 c3 	calli 874 <uart_putstr0>
	
	uart_putstr0( "GPIO Test..." );
 56c:	78 01 00 00 	mvhi r1,0x0
 570:	38 21 09 d0 	ori r1,r1,0x9d0
	gpio0->oe = 0x000000ff;
 574:	78 0c 00 00 	mvhi r12,0x0
			
		val <<= 1;
	}
	uart_putstr0("\r\n");
	
	uart_putstr0( "GPIO Test..." );
 578:	f8 00 00 bf 	calli 874 <uart_putstr0>
	gpio0->oe = 0x000000ff;
 57c:	39 8c 0a 00 	ori r12,r12,0xa00
 580:	29 82 00 00 	lw r2,(r12+0)
 584:	34 01 00 ff 	mvi r1,255
	for(;;) {
		for(i=0; i<8; i++) {
 588:	34 0b 00 00 	mvi r11,0
		val <<= 1;
	}
	uart_putstr0("\r\n");
	
	uart_putstr0( "GPIO Test..." );
	gpio0->oe = 0x000000ff;
 58c:	58 41 00 18 	sw (r2+24),r1
	for(;;) {
		for(i=0; i<8; i++) {
			uint32_t out1, out2;

			out1 = 0x01 << i;
			out2 = 0x80 >> i;
 590:	34 0f 00 80 	mvi r15,128
	gpio0->oe = 0x000000ff;
	for(;;) {
		for(i=0; i<8; i++) {
			uint32_t out1, out2;

			out1 = 0x01 << i;
 594:	34 0e 00 01 	mvi r14,1
	uart_putstr0("\r\n");
	
	uart_putstr0( "GPIO Test..." );
	gpio0->oe = 0x000000ff;
	for(;;) {
		for(i=0; i<8; i++) {
 598:	34 0d 00 07 	mvi r13,7
			uint32_t out1, out2;

			out1 = 0x01 << i;
			out2 = 0x80 >> i;
 59c:	95 eb 18 00 	sr r3,r15,r11
			gpio0->out = out1 | out2;
 5a0:	29 84 00 00 	lw r4,(r12+0)
	gpio0->oe = 0x000000ff;
	for(;;) {
		for(i=0; i<8; i++) {
			uint32_t out1, out2;

			out1 = 0x01 << i;
 5a4:	bd cb 10 00 	sl r2,r14,r11
			out2 = 0x80 >> i;
			gpio0->out = out1 | out2;

			msleep(100);
 5a8:	34 01 00 64 	mvi r1,100
		for(i=0; i<8; i++) {
			uint32_t out1, out2;

			out1 = 0x01 << i;
			out2 = 0x80 >> i;
			gpio0->out = out1 | out2;
 5ac:	b8 62 10 00 	or r2,r3,r2
 5b0:	58 82 00 14 	sw (r4+20),r2
	uart_putstr0("\r\n");
	
	uart_putstr0( "GPIO Test..." );
	gpio0->oe = 0x000000ff;
	for(;;) {
		for(i=0; i<8; i++) {
 5b4:	35 6b 00 01 	addi r11,r11,1

			out1 = 0x01 << i;
			out2 = 0x80 >> i;
			gpio0->out = out1 | out2;

			msleep(100);
 5b8:	f8 00 00 5e 	calli 730 <msleep>
	uart_putstr0("\r\n");
	
	uart_putstr0( "GPIO Test..." );
	gpio0->oe = 0x000000ff;
	for(;;) {
		for(i=0; i<8; i++) {
 5bc:	f1 ab 08 00 	cmpgeu r1,r13,r11
 5c0:	c8 01 08 00 	sub r1,r0,r1
 5c4:	a1 61 58 00 	and r11,r11,r1
 5c8:	e3 ff ff f5 	bi 59c <main+0x2f0>

000005cc <isr_null>:
/***************************************************************************
 * IRQ handling
 */
void isr_null()
{
}
 5cc:	c3 a0 00 00 	ret

000005d0 <tic_isr>:

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 5d0:	78 01 00 00 	mvhi r1,0x0
 5d4:	38 21 0a 94 	ori r1,r1,0xa94
 5d8:	28 23 00 00 	lw r3,(r1+0)
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 5dc:	78 02 00 00 	mvhi r2,0x0
 5e0:	38 42 09 fc 	ori r2,r2,0x9fc
 5e4:	28 42 00 00 	lw r2,(r2+0)

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 5e8:	34 63 00 01 	addi r3,r3,1
 5ec:	58 23 00 00 	sw (r1+0),r3
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 5f0:	34 01 00 0e 	mvi r1,14
 5f4:	58 41 00 00 	sw (r2+0),r1
}
 5f8:	c3 a0 00 00 	ret

000005fc <prueba>:

isr_ptr_t isr_table[32];

void prueba()
{
	   uart0->rxtx=30;
 5fc:	78 02 00 00 	mvhi r2,0x0
 600:	38 42 09 f8 	ori r2,r2,0x9f8
	   timer0->tcr0 = 0xAA;
 604:	78 01 00 00 	mvhi r1,0x0

isr_ptr_t isr_table[32];

void prueba()
{
	   uart0->rxtx=30;
 608:	28 44 00 00 	lw r4,(r2+0)
	   timer0->tcr0 = 0xAA;
 60c:	38 21 09 fc 	ori r1,r1,0x9fc
	   gpio0->ctrl=0x55;
 610:	78 02 00 00 	mvhi r2,0x0
isr_ptr_t isr_table[32];

void prueba()
{
	   uart0->rxtx=30;
	   timer0->tcr0 = 0xAA;
 614:	28 23 00 00 	lw r3,(r1+0)
	   gpio0->ctrl=0x55;
 618:	38 42 0a 00 	ori r2,r2,0xa00
	   spi0->rxtx=1;
 61c:	78 01 00 00 	mvhi r1,0x0

void prueba()
{
	   uart0->rxtx=30;
	   timer0->tcr0 = 0xAA;
	   gpio0->ctrl=0x55;
 620:	28 42 00 00 	lw r2,(r2+0)
	   spi0->rxtx=1;
 624:	38 21 0a 08 	ori r1,r1,0xa08

isr_ptr_t isr_table[32];

void prueba()
{
	   uart0->rxtx=30;
 628:	34 05 00 1e 	mvi r5,30
 62c:	58 85 00 04 	sw (r4+4),r5
	   timer0->tcr0 = 0xAA;
	   gpio0->ctrl=0x55;
	   spi0->rxtx=1;
 630:	28 21 00 00 	lw r1,(r1+0)
isr_ptr_t isr_table[32];

void prueba()
{
	   uart0->rxtx=30;
	   timer0->tcr0 = 0xAA;
 634:	34 04 00 aa 	mvi r4,170
 638:	58 64 00 00 	sw (r3+0),r4
	   gpio0->ctrl=0x55;
 63c:	34 03 00 55 	mvi r3,85
 640:	58 43 00 00 	sw (r2+0),r3
	   spi0->rxtx=1;
 644:	34 02 00 01 	mvi r2,1
 648:	58 22 00 00 	sw (r1+0),r2
	   spi0->nop1=2;
 64c:	34 02 00 02 	mvi r2,2
 650:	58 22 00 04 	sw (r1+4),r2
	   spi0->cs=3;
 654:	34 02 00 03 	mvi r2,3
 658:	58 22 00 08 	sw (r1+8),r2
	   spi0->divisor=4;
 65c:	34 02 00 04 	mvi r2,4
 660:	58 22 00 10 	sw (r1+16),r2
	   spi0->nop2=5;
 664:	34 02 00 05 	mvi r2,5
 668:	58 22 00 0c 	sw (r1+12),r2

}
 66c:	c3 a0 00 00 	ret

00000670 <irq_handler>:
void isr_null()
{
}

void irq_handler(uint32_t pending)
{
 670:	37 9c ff f0 	addi sp,sp,-16
 674:	5b 8b 00 10 	sw (sp+16),r11
 678:	5b 8c 00 0c 	sw (sp+12),r12
 67c:	5b 8d 00 08 	sw (sp+8),r13
 680:	5b 9d 00 04 	sw (sp+4),ra
 684:	78 0b 00 00 	mvhi r11,0x0
 688:	39 6b 0a 14 	ori r11,r11,0xa14
 68c:	b8 20 60 00 	mv r12,r1
 */
void isr_null()
{
}

void irq_handler(uint32_t pending)
 690:	35 6d 00 80 	addi r13,r11,128
 694:	e0 00 00 04 	bi 6a4 <irq_handler+0x34>
{
	int i;

	for(i=0; i<32; i++) {
		if (pending & 0x01) (*isr_table[i])();
 698:	35 6b 00 04 	addi r11,r11,4

void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
 69c:	45 6d 00 08 	be r11,r13,6bc <irq_handler+0x4c>
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
 6a0:	01 8c 00 01 	srui r12,r12,1
void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
		if (pending & 0x01) (*isr_table[i])();
 6a4:	21 81 00 01 	andi r1,r12,0x1
 6a8:	44 20 ff fc 	be r1,r0,698 <irq_handler+0x28>
 6ac:	29 61 00 00 	lw r1,(r11+0)
 6b0:	35 6b 00 04 	addi r11,r11,4
 6b4:	d8 20 00 00 	call r1

void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
 6b8:	5d 6d ff fa 	bne r11,r13,6a0 <irq_handler+0x30>
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
	}
}
 6bc:	2b 9d 00 04 	lw ra,(sp+4)
 6c0:	2b 8b 00 10 	lw r11,(sp+16)
 6c4:	2b 8c 00 0c 	lw r12,(sp+12)
 6c8:	2b 8d 00 08 	lw r13,(sp+8)
 6cc:	37 9c 00 10 	addi sp,sp,16
 6d0:	c3 a0 00 00 	ret

000006d4 <isr_init>:

void isr_init()
{
 6d4:	78 01 00 00 	mvhi r1,0x0
 6d8:	78 02 00 00 	mvhi r2,0x0
 6dc:	38 21 0a 14 	ori r1,r1,0xa14
 6e0:	38 42 05 cc 	ori r2,r2,0x5cc
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
	}
}

void isr_init()
 6e4:	34 23 00 80 	addi r3,r1,128
{
	int i;
	for(i=0; i<32; i++)
		isr_table[i] = &isr_null;
 6e8:	58 22 00 00 	sw (r1+0),r2
 6ec:	34 21 00 04 	addi r1,r1,4
}

void isr_init()
{
	int i;
	for(i=0; i<32; i++)
 6f0:	5c 23 ff fe 	bne r1,r3,6e8 <isr_init+0x14>
		isr_table[i] = &isr_null;
}
 6f4:	c3 a0 00 00 	ret

000006f8 <isr_register>:

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 6f8:	78 03 00 00 	mvhi r3,0x0
 6fc:	3c 21 00 02 	sli r1,r1,2
 700:	38 63 0a 14 	ori r3,r3,0xa14
 704:	b4 61 18 00 	add r3,r3,r1
 708:	58 62 00 00 	sw (r3+0),r2
}
 70c:	c3 a0 00 00 	ret

00000710 <isr_unregister>:

void isr_unregister(int irq)
{
	isr_table[irq] = &isr_null;
 710:	78 03 00 00 	mvhi r3,0x0
 714:	3c 21 00 02 	sli r1,r1,2
 718:	38 63 0a 14 	ori r3,r3,0xa14
 71c:	78 02 00 00 	mvhi r2,0x0
 720:	b4 61 18 00 	add r3,r3,r1
 724:	38 42 05 cc 	ori r2,r2,0x5cc
 728:	58 62 00 00 	sw (r3+0),r2
}
 72c:	c3 a0 00 00 	ret

00000730 <msleep>:
void msleep(uint32_t msec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000)*msec;
 730:	78 04 00 00 	mvhi r4,0x0
 734:	38 84 09 ec 	ori r4,r4,0x9ec
 738:	28 83 00 00 	lw r3,(r4+0)
 73c:	78 02 00 00 	mvhi r2,0x0
 740:	38 42 09 fc 	ori r2,r2,0x9fc
 744:	28 42 00 00 	lw r2,(r2+0)
 748:	88 23 08 00 	mul r1,r1,r3
 74c:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 750:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 754:	34 01 00 08 	mvi r1,8
 758:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 75c:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 760:	20 21 00 01 	andi r1,r1,0x1
 764:	44 20 ff fe 	be r1,r0,75c <msleep+0x2c>
}
 768:	c3 a0 00 00 	ret

0000076c <nsleep>:
void nsleep(uint32_t nsec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000000)*nsec;
 76c:	78 02 00 00 	mvhi r2,0x0
 770:	38 42 09 fc 	ori r2,r2,0x9fc
 774:	28 42 00 00 	lw r2,(r2+0)
 778:	08 21 00 64 	muli r1,r1,100
 77c:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 780:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 784:	34 01 00 08 	mvi r1,8
 788:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 78c:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 790:	20 21 00 01 	andi r1,r1,0x1
 794:	44 20 ff fe 	be r1,r0,78c <nsleep+0x20>
}
 798:	c3 a0 00 00 	ret

0000079c <tic_init>:
void tic_init()
{
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 79c:	78 01 00 00 	mvhi r1,0x0
 7a0:	38 21 09 fc 	ori r1,r1,0x9fc
 7a4:	28 23 00 00 	lw r3,(r1+0)
 7a8:	34 02 27 10 	mvi r2,10000
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 7ac:	78 01 00 00 	mvhi r1,0x0

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 7b0:	58 62 00 04 	sw (r3+4),r2
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 7b4:	38 21 0a 94 	ori r1,r1,0xa94

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
 7b8:	58 60 00 08 	sw (r3+8),r0
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 7bc:	58 20 00 00 	sw (r1+0),r0
		isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 7c0:	78 02 00 00 	mvhi r2,0x0
 7c4:	78 01 00 00 	mvhi r1,0x0
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 7c8:	34 04 00 0e 	mvi r4,14
 7cc:	58 64 00 00 	sw (r3+0),r4
		isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 7d0:	38 21 0a 14 	ori r1,r1,0xa14
 7d4:	38 42 05 d0 	ori r2,r2,0x5d0
 7d8:	58 22 00 04 	sw (r1+4),r2
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;

	isr_register(1, &tic_isr);
}
 7dc:	c3 a0 00 00 	ret

000007e0 <uart_init>:
	//uart0->lcr = 0x03;  // Line Control Register:    8N1
	//uart0->mcr = 0x00;  // Modem Control Register

	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
}
 7e0:	c3 a0 00 00 	ret

000007e4 <uart_getchar1>:

char uart_getchar1()
{   
 7e4:	78 01 00 00 	mvhi r1,0x0
 7e8:	38 21 0a 04 	ori r1,r1,0xa04
 7ec:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart1->ucr & UART_DR)) ;
 7f0:	28 41 00 00 	lw r1,(r2+0)
 7f4:	20 21 00 01 	andi r1,r1,0x1
 7f8:	44 20 ff fe 	be r1,r0,7f0 <uart_getchar1+0xc>
	return uart1->rxtx;
 7fc:	28 41 00 04 	lw r1,(r2+4)
}
 800:	20 21 00 ff 	andi r1,r1,0xff
 804:	c3 a0 00 00 	ret

00000808 <uart_getchar0>:
char uart_getchar0()
{   
 808:	78 01 00 00 	mvhi r1,0x0
 80c:	38 21 09 f8 	ori r1,r1,0x9f8
 810:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart0->ucr & UART_DR)) ;
 814:	28 41 00 00 	lw r1,(r2+0)
 818:	20 21 00 01 	andi r1,r1,0x1
 81c:	44 20 ff fe 	be r1,r0,814 <uart_getchar0+0xc>
	return uart0->rxtx;
 820:	28 41 00 04 	lw r1,(r2+4)
}
 824:	20 21 00 ff 	andi r1,r1,0xff
 828:	c3 a0 00 00 	ret

0000082c <uart_putchar0>:

void uart_putchar0(char c)
{
 82c:	78 02 00 00 	mvhi r2,0x0
 830:	38 42 09 f8 	ori r2,r2,0x9f8
 834:	28 43 00 00 	lw r3,(r2+0)
 838:	20 21 00 ff 	andi r1,r1,0xff
	while (uart0->ucr & UART_BUSY) ;
 83c:	28 62 00 00 	lw r2,(r3+0)
 840:	20 42 00 10 	andi r2,r2,0x10
 844:	5c 40 ff fe 	bne r2,r0,83c <uart_putchar0+0x10>
	uart0->rxtx = c;
 848:	58 61 00 04 	sw (r3+4),r1
}
 84c:	c3 a0 00 00 	ret

00000850 <uart_putchar1>:
void uart_putchar1(char c)
{
 850:	78 02 00 00 	mvhi r2,0x0
 854:	38 42 0a 04 	ori r2,r2,0xa04
 858:	28 43 00 00 	lw r3,(r2+0)
 85c:	20 21 00 ff 	andi r1,r1,0xff
	while (uart1->ucr & UART_BUSY) ;
 860:	28 62 00 00 	lw r2,(r3+0)
 864:	20 42 00 10 	andi r2,r2,0x10
 868:	5c 40 ff fe 	bne r2,r0,860 <uart_putchar1+0x10>
	uart1->rxtx = c;
 86c:	58 61 00 04 	sw (r3+4),r1
}
 870:	c3 a0 00 00 	ret

00000874 <uart_putstr0>:

void uart_putstr0(char *str)
{
	char *c = str;
	while(*c) {
 874:	40 24 00 00 	lbu r4,(r1+0)
 878:	44 80 00 0b 	be r4,r0,8a4 <uart_putstr0+0x30>
 87c:	78 02 00 00 	mvhi r2,0x0
 880:	38 42 09 f8 	ori r2,r2,0x9f8
 884:	28 43 00 00 	lw r3,(r2+0)
	return uart0->rxtx;
}

void uart_putchar0(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 888:	28 62 00 00 	lw r2,(r3+0)
 88c:	20 42 00 10 	andi r2,r2,0x10
 890:	5c 40 ff fe 	bne r2,r0,888 <uart_putstr0+0x14>
	uart0->rxtx = c;
 894:	58 64 00 04 	sw (r3+4),r4
void uart_putstr0(char *str)
{
	char *c = str;
	while(*c) {
		uart_putchar0(*c);
		c++;
 898:	34 21 00 01 	addi r1,r1,1
}

void uart_putstr0(char *str)
{
	char *c = str;
	while(*c) {
 89c:	40 24 00 00 	lbu r4,(r1+0)
 8a0:	5c 82 ff fa 	bne r4,r2,888 <uart_putstr0+0x14>
 8a4:	c3 a0 00 00 	ret

000008a8 <uart_putstr1>:
}

void uart_putstr1(char *str)
{
	char *c = str;
	while(*c) {
 8a8:	40 24 00 00 	lbu r4,(r1+0)
 8ac:	44 80 00 0b 	be r4,r0,8d8 <uart_putstr1+0x30>
 8b0:	78 02 00 00 	mvhi r2,0x0
 8b4:	38 42 0a 04 	ori r2,r2,0xa04
 8b8:	28 43 00 00 	lw r3,(r2+0)
	while (uart0->ucr & UART_BUSY) ;
	uart0->rxtx = c;
}
void uart_putchar1(char c)
{
	while (uart1->ucr & UART_BUSY) ;
 8bc:	28 62 00 00 	lw r2,(r3+0)
 8c0:	20 42 00 10 	andi r2,r2,0x10
 8c4:	5c 40 ff fe 	bne r2,r0,8bc <uart_putstr1+0x14>
	uart1->rxtx = c;
 8c8:	58 64 00 04 	sw (r3+4),r4
void uart_putstr1(char *str)
{
	char *c = str;
	while(*c) {
		uart_putchar1(*c);
		c++;
 8cc:	34 21 00 01 	addi r1,r1,1
}

void uart_putstr1(char *str)
{
	char *c = str;
	while(*c) {
 8d0:	40 24 00 00 	lbu r4,(r1+0)
 8d4:	5c 82 ff fa 	bne r4,r2,8bc <uart_putstr1+0x14>
 8d8:	c3 a0 00 00 	ret

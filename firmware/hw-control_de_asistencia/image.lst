
image:     file format elf32-lm32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000788  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       00000004  00000788  00000788  000007dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000014  0000078c  0000078c  000007e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000008d4  000007a0  000007a0  000007f4  2**2
                  ALLOC
  4 .debug_abbrev 000003ba  00000000  00000000  000007f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008be  00000000  00000000  00000bae  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000006a7  00000000  00000000  0000146c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000001e0  00000000  00000000  00001b14  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000268  00000000  00000000  00001cf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubnames 00000247  00000000  00000000  00001f5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubtypes 000000a3  00000000  00000000  000021a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000060  00000000  00000000  00002246  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000002e7  00000000  00000000  000022a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .comment      00000011  00000000  00000000  0000258d  2**0
                  CONTENTS, READONLY
 14 .debug_ranges 00000018  00000000  00000000  0000259e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_ftext>:
   0:	98 00 00 00 	xor r0,r0,r0
   4:	d0 00 00 00 	wcsr IE,r0
   8:	78 01 00 00 	mvhi r1,0x0
   c:	38 21 00 00 	ori r1,r1,0x0
  10:	d0 e1 00 00 	wcsr EBA,r1
  14:	f8 00 00 3b 	calli 100 <_crt0>
  18:	34 00 00 00 	nop
  1c:	34 00 00 00 	nop

00000020 <_breakpoint_handler>:
  20:	34 00 00 00 	nop
  24:	34 00 00 00 	nop
  28:	34 00 00 00 	nop
  2c:	34 00 00 00 	nop
  30:	34 00 00 00 	nop
  34:	34 00 00 00 	nop
  38:	34 00 00 00 	nop
  3c:	34 00 00 00 	nop

00000040 <_ibuserror_handler>:
  40:	34 00 00 00 	nop
  44:	34 00 00 00 	nop
  48:	34 00 00 00 	nop
  4c:	34 00 00 00 	nop
  50:	34 00 00 00 	nop
  54:	34 00 00 00 	nop
  58:	34 00 00 00 	nop
  5c:	34 00 00 00 	nop

00000060 <_watchpoint_handler>:
  60:	34 00 00 00 	nop
  64:	34 00 00 00 	nop
  68:	34 00 00 00 	nop
  6c:	34 00 00 00 	nop
  70:	34 00 00 00 	nop
  74:	34 00 00 00 	nop
  78:	34 00 00 00 	nop
  7c:	34 00 00 00 	nop

00000080 <_dbuserror_handler>:
  80:	34 00 00 00 	nop
  84:	34 00 00 00 	nop
  88:	34 00 00 00 	nop
  8c:	34 00 00 00 	nop
  90:	34 00 00 00 	nop
  94:	34 00 00 00 	nop
  98:	34 00 00 00 	nop
  9c:	34 00 00 00 	nop

000000a0 <_divzero_handler>:
  a0:	34 00 00 00 	nop
  a4:	34 00 00 00 	nop
  a8:	34 00 00 00 	nop
  ac:	34 00 00 00 	nop
  b0:	34 00 00 00 	nop
  b4:	34 00 00 00 	nop
  b8:	34 00 00 00 	nop
  bc:	34 00 00 00 	nop

000000c0 <_interrupt_handler>:
  c0:	5b 9d 00 00 	sw (sp+0),ra
  c4:	f8 00 00 2b 	calli 170 <_save_all>
  c8:	90 40 08 00 	rcsr r1,IP
  cc:	f8 00 00 ad 	calli 380 <irq_handler>
  d0:	78 01 ff ff 	mvhi r1,0xffff
  d4:	38 21 ff ff 	ori r1,r1,0xffff
  d8:	d0 41 00 00 	wcsr IP,r1
  dc:	e0 00 00 38 	bi 1bc <_restore_all_and_eret>

000000e0 <_scall_handler>:
  e0:	34 00 00 00 	nop
  e4:	34 00 00 00 	nop
  e8:	34 00 00 00 	nop
  ec:	34 00 00 00 	nop
  f0:	34 00 00 00 	nop
  f4:	34 00 00 00 	nop
  f8:	34 00 00 00 	nop
  fc:	34 00 00 00 	nop

00000100 <_crt0>:
 100:	78 1c 00 00 	mvhi sp,0x0
 104:	3b 9c 1f fc 	ori sp,sp,0x1ffc
 108:	78 1a 00 00 	mvhi gp,0x0
 10c:	3b 5a 07 a0 	ori gp,gp,0x7a0
 110:	78 01 00 00 	mvhi r1,0x0
 114:	38 21 07 a0 	ori r1,r1,0x7a0
 118:	78 03 00 00 	mvhi r3,0x0
 11c:	38 63 10 74 	ori r3,r3,0x1074

00000120 <.clearBSS>:
 120:	44 23 00 04 	be r1,r3,130 <.callMain>
 124:	58 20 00 00 	sw (r1+0),r0
 128:	34 21 00 04 	addi r1,r1,4
 12c:	e3 ff ff fd 	bi 120 <.clearBSS>

00000130 <.callMain>:
 130:	34 01 00 00 	mvi r1,0
 134:	34 02 00 00 	mvi r2,0
 138:	34 03 00 00 	mvi r3,0
 13c:	f8 00 00 4a 	calli 264 <main>

00000140 <irq_enable>:
 140:	34 01 00 01 	mvi r1,1
 144:	d0 01 00 00 	wcsr IE,r1
 148:	c3 a0 00 00 	ret

0000014c <irq_disable>:
 14c:	34 01 00 00 	mvi r1,0
 150:	d0 01 00 00 	wcsr IE,r1
 154:	c3 a0 00 00 	ret

00000158 <irq_set_mask>:
 158:	d0 21 00 00 	wcsr IM,r1
 15c:	c3 a0 00 00 	ret

00000160 <irq_get_mask>:
 160:	90 20 08 00 	rcsr r1,IM
 164:	c3 a0 00 00 	ret

00000168 <jump>:
 168:	c0 20 00 00 	b r1

0000016c <halt>:
 16c:	e0 00 00 00 	bi 16c <halt>

00000170 <_save_all>:
 170:	37 9c ff 80 	addi sp,sp,-128
 174:	5b 81 00 04 	sw (sp+4),r1
 178:	5b 82 00 08 	sw (sp+8),r2
 17c:	5b 83 00 0c 	sw (sp+12),r3
 180:	5b 84 00 10 	sw (sp+16),r4
 184:	5b 85 00 14 	sw (sp+20),r5
 188:	5b 86 00 18 	sw (sp+24),r6
 18c:	5b 87 00 1c 	sw (sp+28),r7
 190:	5b 88 00 20 	sw (sp+32),r8
 194:	5b 89 00 24 	sw (sp+36),r9
 198:	5b 8a 00 28 	sw (sp+40),r10
 19c:	5b 9e 00 78 	sw (sp+120),ea
 1a0:	5b 9f 00 7c 	sw (sp+124),ba
 1a4:	2b 81 00 80 	lw r1,(sp+128)
 1a8:	5b 81 00 74 	sw (sp+116),r1
 1ac:	bb 80 08 00 	mv r1,sp
 1b0:	34 21 00 80 	addi r1,r1,128
 1b4:	5b 81 00 70 	sw (sp+112),r1
 1b8:	c3 a0 00 00 	ret

000001bc <_restore_all_and_eret>:
 1bc:	2b 81 00 04 	lw r1,(sp+4)
 1c0:	2b 82 00 08 	lw r2,(sp+8)
 1c4:	2b 83 00 0c 	lw r3,(sp+12)
 1c8:	2b 84 00 10 	lw r4,(sp+16)
 1cc:	2b 85 00 14 	lw r5,(sp+20)
 1d0:	2b 86 00 18 	lw r6,(sp+24)
 1d4:	2b 87 00 1c 	lw r7,(sp+28)
 1d8:	2b 88 00 20 	lw r8,(sp+32)
 1dc:	2b 89 00 24 	lw r9,(sp+36)
 1e0:	2b 8a 00 28 	lw r10,(sp+40)
 1e4:	2b 9d 00 74 	lw ra,(sp+116)
 1e8:	2b 9e 00 78 	lw ea,(sp+120)
 1ec:	2b 9f 00 7c 	lw ba,(sp+124)
 1f0:	2b 9c 00 70 	lw sp,(sp+112)
 1f4:	c3 c0 00 00 	eret

000001f8 <get_sp>:
 1f8:	bb 80 08 00 	mv r1,sp
 1fc:	c3 a0 00 00 	ret

00000200 <get_gp>:
 200:	bb 40 08 00 	mv r1,gp
 204:	c3 a0 00 00 	ret

00000208 <buffer_clear>:

#define SIZE_BUFF 20
uint32_t buffer[SIZE_BUFF];

void buffer_clear()
{
 208:	78 01 00 00 	mvhi r1,0x0
 20c:	38 21 07 a0 	ori r1,r1,0x7a0


#define SIZE_BUFF 20
uint32_t buffer[SIZE_BUFF];

void buffer_clear()
 210:	34 22 00 50 	addi r2,r1,80
{
	uint32_t i;
    for (i=0; i< SIZE_BUFF;i++)
    	buffer[i]=0;
 214:	58 20 00 00 	sw (r1+0),r0
 218:	34 21 00 04 	addi r1,r1,4
uint32_t buffer[SIZE_BUFF];

void buffer_clear()
{
	uint32_t i;
    for (i=0; i< SIZE_BUFF;i++)
 21c:	5c 22 ff fe 	bne r1,r2,214 <buffer_clear+0xc>
    	buffer[i]=0;

}
 220:	c3 a0 00 00 	ret

00000224 <buffer_upload>:

void buffer_upload()
{
 224:	37 9c ff f4 	addi sp,sp,-12
 228:	5b 8b 00 0c 	sw (sp+12),r11
 22c:	5b 8c 00 08 	sw (sp+8),r12
 230:	5b 9d 00 04 	sw (sp+4),ra
 234:	78 0b 00 00 	mvhi r11,0x0
 238:	39 6b 07 a0 	ori r11,r11,0x7a0
    for (i=0; i< SIZE_BUFF;i++)
    	buffer[i]=0;

}

void buffer_upload()
 23c:	35 6c 00 50 	addi r12,r11,80
{
	uint32_t i;
    for (i=0; i< SIZE_BUFF;i++)
    	buffer[i]=uart_getchar0();
 240:	f8 00 00 b6 	calli 518 <uart_getchar0>
 244:	59 61 00 00 	sw (r11+0),r1
 248:	35 6b 00 04 	addi r11,r11,4
}

void buffer_upload()
{
	uint32_t i;
    for (i=0; i< SIZE_BUFF;i++)
 24c:	5d 6c ff fd 	bne r11,r12,240 <buffer_upload+0x1c>
    	buffer[i]=uart_getchar0();
}
 250:	2b 9d 00 04 	lw ra,(sp+4)
 254:	2b 8b 00 0c 	lw r11,(sp+12)
 258:	2b 8c 00 08 	lw r12,(sp+8)
 25c:	37 9c 00 0c 	addi sp,sp,12
 260:	c3 a0 00 00 	ret

00000264 <main>:

int main()
{
 264:	37 9c ff f0 	addi sp,sp,-16
 268:	5b 8b 00 10 	sw (sp+16),r11
 26c:	5b 8c 00 0c 	sw (sp+12),r12
 270:	5b 8d 00 08 	sw (sp+8),r13
 274:	5b 9d 00 04 	sw (sp+4),ra
	uint8_t i;

	buffer_clear();
 	buffer[0]=10;
    for(;;){
    	getversioncommand(1);
 278:	78 01 00 00 	mvhi r1,0x0
 27c:	38 21 07 a0 	ori r1,r1,0x7a0
 280:	b8 20 68 00 	mv r13,r1
	uint32_t i;
    for (i=0; i< SIZE_BUFF;i++)
    	buffer[i]=uart_getchar0();
}

int main()
 284:	34 2c 00 50 	addi r12,r1,80
 288:	b8 20 10 00 	mv r2,r1

void buffer_clear()
{
	uint32_t i;
    for (i=0; i< SIZE_BUFF;i++)
    	buffer[i]=0;
 28c:	58 40 00 00 	sw (r2+0),r0
 290:	34 42 00 04 	addi r2,r2,4
uint32_t buffer[SIZE_BUFF];

void buffer_clear()
{
	uint32_t i;
    for (i=0; i< SIZE_BUFF;i++)
 294:	5c 4c ff fe 	bne r2,r12,28c <main+0x28>
int main()
{
	uint8_t i;

	buffer_clear();
 	buffer[0]=10;
 298:	34 02 00 0a 	mvi r2,10
 29c:	58 22 00 00 	sw (r1+0),r2
    for(;;){
    	getversioncommand(1);
 2a0:	34 01 00 01 	mvi r1,1
 2a4:	f8 00 01 21 	calli 728 <getversioncommand>
 2a8:	b9 a0 58 00 	mv r11,r13
    	for (i=0; i< SIZE_BUFF;i++)
    	    uart_putchar0(buffer[i]+1);
 2ac:	29 61 00 00 	lw r1,(r11+0)
 2b0:	35 6b 00 04 	addi r11,r11,4
 2b4:	34 21 00 01 	addi r1,r1,1
 2b8:	20 21 00 ff 	andi r1,r1,0xff
 2bc:	f8 00 00 a0 	calli 53c <uart_putchar0>

	buffer_clear();
 	buffer[0]=10;
    for(;;){
    	getversioncommand(1);
    	for (i=0; i< SIZE_BUFF;i++)
 2c0:	5d 6c ff fb 	bne r11,r12,2ac <main+0x48>
    	    uart_putchar0(buffer[i]+1);
    	buffer_upload();
 2c4:	fb ff ff d8 	calli 224 <buffer_upload>
    };
 2c8:	e3 ff ff f6 	bi 2a0 <main+0x3c>

000002cc <isr_null>:
/***************************************************************************
 * IRQ handling
 */
void isr_null()
{
}
 2cc:	c3 a0 00 00 	ret

000002d0 <tic_isr>:

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 2d0:	78 01 00 00 	mvhi r1,0x0
 2d4:	38 21 08 70 	ori r1,r1,0x870
 2d8:	28 23 00 00 	lw r3,(r1+0)
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 2dc:	78 02 00 00 	mvhi r2,0x0
 2e0:	38 42 07 90 	ori r2,r2,0x790
 2e4:	28 42 00 00 	lw r2,(r2+0)

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 2e8:	34 63 00 01 	addi r3,r3,1
 2ec:	58 23 00 00 	sw (r1+0),r3
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 2f0:	34 01 00 0e 	mvi r1,14
 2f4:	58 41 00 00 	sw (r2+0),r1
}
 2f8:	c3 a0 00 00 	ret

000002fc <prueba>:

isr_ptr_t isr_table[32];

void prueba()
{
	   uart0->rxtx=30;
 2fc:	78 01 00 00 	mvhi r1,0x0
 300:	38 21 07 8c 	ori r1,r1,0x78c
	   uart1->rxtx=30;
 304:	78 02 00 00 	mvhi r2,0x0

isr_ptr_t isr_table[32];

void prueba()
{
	   uart0->rxtx=30;
 308:	28 24 00 00 	lw r4,(r1+0)
	   uart1->rxtx=30;
 30c:	38 42 07 98 	ori r2,r2,0x798
	   spi0->rxtx=1;
 310:	78 01 00 00 	mvhi r1,0x0
isr_ptr_t isr_table[32];

void prueba()
{
	   uart0->rxtx=30;
	   uart1->rxtx=30;
 314:	28 43 00 00 	lw r3,(r2+0)
	   spi0->rxtx=1;
 318:	38 21 07 9c 	ori r1,r1,0x79c
 31c:	28 21 00 00 	lw r1,(r1+0)

isr_ptr_t isr_table[32];

void prueba()
{
	   uart0->rxtx=30;
 320:	34 02 00 1e 	mvi r2,30
 324:	58 82 00 04 	sw (r4+4),r2
	   uart1->rxtx=30;
 328:	58 62 00 04 	sw (r3+4),r2
	   spi0->rxtx=1;
 32c:	34 02 00 01 	mvi r2,1
 330:	58 22 00 00 	sw (r1+0),r2
	   spi0->status=2;
	   spi0->cs=3;
	   spi0->divisor=4;
	   spi0->nop=5;
	   timer0->tcr0 = 0xAA;
 334:	78 03 00 00 	mvhi r3,0x0
void prueba()
{
	   uart0->rxtx=30;
	   uart1->rxtx=30;
	   spi0->rxtx=1;
	   spi0->status=2;
 338:	34 02 00 02 	mvi r2,2
 33c:	58 22 00 04 	sw (r1+4),r2
	   spi0->cs=3;
 340:	34 04 00 03 	mvi r4,3
	   spi0->divisor=4;
	   spi0->nop=5;
	   timer0->tcr0 = 0xAA;
 344:	38 63 07 90 	ori r3,r3,0x790
	   gpio0->ctrl=0x55;
 348:	78 02 00 00 	mvhi r2,0x0
{
	   uart0->rxtx=30;
	   uart1->rxtx=30;
	   spi0->rxtx=1;
	   spi0->status=2;
	   spi0->cs=3;
 34c:	58 24 00 08 	sw (r1+8),r4
	   spi0->divisor=4;
	   spi0->nop=5;
	   timer0->tcr0 = 0xAA;
 350:	28 63 00 00 	lw r3,(r3+0)
	   uart0->rxtx=30;
	   uart1->rxtx=30;
	   spi0->rxtx=1;
	   spi0->status=2;
	   spi0->cs=3;
	   spi0->divisor=4;
 354:	34 04 00 04 	mvi r4,4
	   spi0->nop=5;
	   timer0->tcr0 = 0xAA;
	   gpio0->ctrl=0x55;
 358:	38 42 07 94 	ori r2,r2,0x794
	   uart0->rxtx=30;
	   uart1->rxtx=30;
	   spi0->rxtx=1;
	   spi0->status=2;
	   spi0->cs=3;
	   spi0->divisor=4;
 35c:	58 24 00 10 	sw (r1+16),r4
	   spi0->nop=5;
	   timer0->tcr0 = 0xAA;
	   gpio0->ctrl=0x55;
 360:	28 42 00 00 	lw r2,(r2+0)
	   uart1->rxtx=30;
	   spi0->rxtx=1;
	   spi0->status=2;
	   spi0->cs=3;
	   spi0->divisor=4;
	   spi0->nop=5;
 364:	34 04 00 05 	mvi r4,5
 368:	58 24 00 0c 	sw (r1+12),r4
	   timer0->tcr0 = 0xAA;
 36c:	34 01 00 aa 	mvi r1,170
 370:	58 61 00 00 	sw (r3+0),r1
	   gpio0->ctrl=0x55;
 374:	34 01 00 55 	mvi r1,85
 378:	58 41 00 00 	sw (r2+0),r1

}
 37c:	c3 a0 00 00 	ret

00000380 <irq_handler>:
void isr_null()
{
}

void irq_handler(uint32_t pending)
{
 380:	37 9c ff f0 	addi sp,sp,-16
 384:	5b 8b 00 10 	sw (sp+16),r11
 388:	5b 8c 00 0c 	sw (sp+12),r12
 38c:	5b 8d 00 08 	sw (sp+8),r13
 390:	5b 9d 00 04 	sw (sp+4),ra
 394:	78 0b 00 00 	mvhi r11,0x0
 398:	39 6b 07 f0 	ori r11,r11,0x7f0
 39c:	b8 20 60 00 	mv r12,r1
 */
void isr_null()
{
}

void irq_handler(uint32_t pending)
 3a0:	35 6d 00 80 	addi r13,r11,128
 3a4:	e0 00 00 04 	bi 3b4 <irq_handler+0x34>
{
	int i;

	for(i=0; i<32; i++) {
		if (pending & 0x01) (*isr_table[i])();
 3a8:	35 6b 00 04 	addi r11,r11,4

void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
 3ac:	45 6d 00 08 	be r11,r13,3cc <irq_handler+0x4c>
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
 3b0:	01 8c 00 01 	srui r12,r12,1
void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
		if (pending & 0x01) (*isr_table[i])();
 3b4:	21 81 00 01 	andi r1,r12,0x1
 3b8:	44 20 ff fc 	be r1,r0,3a8 <irq_handler+0x28>
 3bc:	29 61 00 00 	lw r1,(r11+0)
 3c0:	35 6b 00 04 	addi r11,r11,4
 3c4:	d8 20 00 00 	call r1

void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
 3c8:	5d 6d ff fa 	bne r11,r13,3b0 <irq_handler+0x30>
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
	}
}
 3cc:	2b 9d 00 04 	lw ra,(sp+4)
 3d0:	2b 8b 00 10 	lw r11,(sp+16)
 3d4:	2b 8c 00 0c 	lw r12,(sp+12)
 3d8:	2b 8d 00 08 	lw r13,(sp+8)
 3dc:	37 9c 00 10 	addi sp,sp,16
 3e0:	c3 a0 00 00 	ret

000003e4 <isr_init>:

void isr_init()
{
 3e4:	78 01 00 00 	mvhi r1,0x0
 3e8:	78 02 00 00 	mvhi r2,0x0
 3ec:	38 21 07 f0 	ori r1,r1,0x7f0
 3f0:	38 42 02 cc 	ori r2,r2,0x2cc
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
	}
}

void isr_init()
 3f4:	34 23 00 80 	addi r3,r1,128
{
	int i;
	for(i=0; i<32; i++)
		isr_table[i] = &isr_null;
 3f8:	58 22 00 00 	sw (r1+0),r2
 3fc:	34 21 00 04 	addi r1,r1,4
}

void isr_init()
{
	int i;
	for(i=0; i<32; i++)
 400:	5c 23 ff fe 	bne r1,r3,3f8 <isr_init+0x14>
		isr_table[i] = &isr_null;
}
 404:	c3 a0 00 00 	ret

00000408 <isr_register>:

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 408:	78 03 00 00 	mvhi r3,0x0
 40c:	3c 21 00 02 	sli r1,r1,2
 410:	38 63 07 f0 	ori r3,r3,0x7f0
 414:	b4 61 18 00 	add r3,r3,r1
 418:	58 62 00 00 	sw (r3+0),r2
}
 41c:	c3 a0 00 00 	ret

00000420 <isr_unregister>:

void isr_unregister(int irq)
{
	isr_table[irq] = &isr_null;
 420:	78 03 00 00 	mvhi r3,0x0
 424:	3c 21 00 02 	sli r1,r1,2
 428:	38 63 07 f0 	ori r3,r3,0x7f0
 42c:	78 02 00 00 	mvhi r2,0x0
 430:	b4 61 18 00 	add r3,r3,r1
 434:	38 42 02 cc 	ori r2,r2,0x2cc
 438:	58 62 00 00 	sw (r3+0),r2
}
 43c:	c3 a0 00 00 	ret

00000440 <msleep>:
void msleep(uint32_t msec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000)*msec;
 440:	78 04 00 00 	mvhi r4,0x0
 444:	38 84 07 88 	ori r4,r4,0x788
 448:	28 83 00 00 	lw r3,(r4+0)
 44c:	78 02 00 00 	mvhi r2,0x0
 450:	38 42 07 90 	ori r2,r2,0x790
 454:	28 42 00 00 	lw r2,(r2+0)
 458:	88 23 08 00 	mul r1,r1,r3
 45c:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 460:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 464:	34 01 00 08 	mvi r1,8
 468:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 46c:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 470:	20 21 00 01 	andi r1,r1,0x1
 474:	44 20 ff fe 	be r1,r0,46c <msleep+0x2c>
}
 478:	c3 a0 00 00 	ret

0000047c <nsleep>:
void nsleep(uint32_t nsec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000000)*nsec;
 47c:	78 02 00 00 	mvhi r2,0x0
 480:	38 42 07 90 	ori r2,r2,0x790
 484:	28 42 00 00 	lw r2,(r2+0)
 488:	08 21 00 64 	muli r1,r1,100
 48c:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 490:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 494:	34 01 00 08 	mvi r1,8
 498:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 49c:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 4a0:	20 21 00 01 	andi r1,r1,0x1
 4a4:	44 20 ff fe 	be r1,r0,49c <nsleep+0x20>
}
 4a8:	c3 a0 00 00 	ret

000004ac <tic_init>:
void tic_init()
{
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 4ac:	78 01 00 00 	mvhi r1,0x0
 4b0:	38 21 07 90 	ori r1,r1,0x790
 4b4:	28 23 00 00 	lw r3,(r1+0)
 4b8:	34 02 27 10 	mvi r2,10000
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 4bc:	78 01 00 00 	mvhi r1,0x0

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 4c0:	58 62 00 04 	sw (r3+4),r2
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 4c4:	38 21 08 70 	ori r1,r1,0x870

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
 4c8:	58 60 00 08 	sw (r3+8),r0
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 4cc:	58 20 00 00 	sw (r1+0),r0
		isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 4d0:	78 02 00 00 	mvhi r2,0x0
 4d4:	78 01 00 00 	mvhi r1,0x0
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 4d8:	34 04 00 0e 	mvi r4,14
 4dc:	58 64 00 00 	sw (r3+0),r4
		isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 4e0:	38 21 07 f0 	ori r1,r1,0x7f0
 4e4:	38 42 02 d0 	ori r2,r2,0x2d0
 4e8:	58 22 00 04 	sw (r1+4),r2
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;

	isr_register(1, &tic_isr);
}
 4ec:	c3 a0 00 00 	ret

000004f0 <uart_init>:
	//uart0->lcr = 0x03;  // Line Control Register:    8N1
	//uart0->mcr = 0x00;  // Modem Control Register

	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
}
 4f0:	c3 a0 00 00 	ret

000004f4 <uart_getchar1>:

char uart_getchar1()
{   
 4f4:	78 01 00 00 	mvhi r1,0x0
 4f8:	38 21 07 98 	ori r1,r1,0x798
 4fc:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart1->ucr & UART_DR)) ;
 500:	28 41 00 00 	lw r1,(r2+0)
 504:	20 21 00 01 	andi r1,r1,0x1
 508:	44 20 ff fe 	be r1,r0,500 <uart_getchar1+0xc>
	return uart1->rxtx;
 50c:	28 41 00 04 	lw r1,(r2+4)
}
 510:	20 21 00 ff 	andi r1,r1,0xff
 514:	c3 a0 00 00 	ret

00000518 <uart_getchar0>:
char uart_getchar0()
{   
 518:	78 01 00 00 	mvhi r1,0x0
 51c:	38 21 07 8c 	ori r1,r1,0x78c
 520:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart0->ucr & UART_DR)) ;
 524:	28 41 00 00 	lw r1,(r2+0)
 528:	20 21 00 01 	andi r1,r1,0x1
 52c:	44 20 ff fe 	be r1,r0,524 <uart_getchar0+0xc>
	return uart0->rxtx;
 530:	28 41 00 04 	lw r1,(r2+4)
}
 534:	20 21 00 ff 	andi r1,r1,0xff
 538:	c3 a0 00 00 	ret

0000053c <uart_putchar0>:

void uart_putchar0(char c)
{
 53c:	78 02 00 00 	mvhi r2,0x0
 540:	38 42 07 8c 	ori r2,r2,0x78c
 544:	28 43 00 00 	lw r3,(r2+0)
 548:	20 21 00 ff 	andi r1,r1,0xff
	while (uart0->ucr & UART_BUSY) ;
 54c:	28 62 00 00 	lw r2,(r3+0)
 550:	20 42 00 10 	andi r2,r2,0x10
 554:	5c 40 ff fe 	bne r2,r0,54c <uart_putchar0+0x10>
	uart0->rxtx = c;
 558:	58 61 00 04 	sw (r3+4),r1
}
 55c:	c3 a0 00 00 	ret

00000560 <uart_putchar1>:
void uart_putchar1(char c)
{
 560:	78 02 00 00 	mvhi r2,0x0
 564:	38 42 07 98 	ori r2,r2,0x798
 568:	28 43 00 00 	lw r3,(r2+0)
 56c:	20 21 00 ff 	andi r1,r1,0xff
	while (uart1->ucr & UART_BUSY) ;
 570:	28 62 00 00 	lw r2,(r3+0)
 574:	20 42 00 10 	andi r2,r2,0x10
 578:	5c 40 ff fe 	bne r2,r0,570 <uart_putchar1+0x10>
	uart1->rxtx = c;
 57c:	58 61 00 04 	sw (r3+4),r1
}
 580:	c3 a0 00 00 	ret

00000584 <uart_putstr0>:

void uart_putstr0(char *str)
{
	char *c = str;
	while(*c) {
 584:	40 24 00 00 	lbu r4,(r1+0)
 588:	44 80 00 0b 	be r4,r0,5b4 <uart_putstr0+0x30>
 58c:	78 02 00 00 	mvhi r2,0x0
 590:	38 42 07 8c 	ori r2,r2,0x78c
 594:	28 43 00 00 	lw r3,(r2+0)
	return uart0->rxtx;
}

void uart_putchar0(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 598:	28 62 00 00 	lw r2,(r3+0)
 59c:	20 42 00 10 	andi r2,r2,0x10
 5a0:	5c 40 ff fe 	bne r2,r0,598 <uart_putstr0+0x14>
	uart0->rxtx = c;
 5a4:	58 64 00 04 	sw (r3+4),r4
void uart_putstr0(char *str)
{
	char *c = str;
	while(*c) {
		uart_putchar0(*c);
		c++;
 5a8:	34 21 00 01 	addi r1,r1,1
}

void uart_putstr0(char *str)
{
	char *c = str;
	while(*c) {
 5ac:	40 24 00 00 	lbu r4,(r1+0)
 5b0:	5c 82 ff fa 	bne r4,r2,598 <uart_putstr0+0x14>
 5b4:	c3 a0 00 00 	ret

000005b8 <uart_putstr1>:
}

void uart_putstr1(char *str)
{
	char *c = str;
	while(*c) {
 5b8:	40 24 00 00 	lbu r4,(r1+0)
 5bc:	44 80 00 0b 	be r4,r0,5e8 <uart_putstr1+0x30>
 5c0:	78 02 00 00 	mvhi r2,0x0
 5c4:	38 42 07 98 	ori r2,r2,0x798
 5c8:	28 43 00 00 	lw r3,(r2+0)
	while (uart0->ucr & UART_BUSY) ;
	uart0->rxtx = c;
}
void uart_putchar1(char c)
{
	while (uart1->ucr & UART_BUSY) ;
 5cc:	28 62 00 00 	lw r2,(r3+0)
 5d0:	20 42 00 10 	andi r2,r2,0x10
 5d4:	5c 40 ff fe 	bne r2,r0,5cc <uart_putstr1+0x14>
	uart1->rxtx = c;
 5d8:	58 64 00 04 	sw (r3+4),r4
void uart_putstr1(char *str)
{
	char *c = str;
	while(*c) {
		uart_putchar1(*c);
		c++;
 5dc:	34 21 00 01 	addi r1,r1,1
}

void uart_putstr1(char *str)
{
	char *c = str;
	while(*c) {
 5e0:	40 24 00 00 	lbu r4,(r1+0)
 5e4:	5c 82 ff fa 	bne r4,r2,5cc <uart_putstr1+0x14>
 5e8:	c3 a0 00 00 	ret

000005ec <spi_putget>:
}


char spi_putget(char c)
{
        spi0->cs=1;
 5ec:	78 02 00 00 	mvhi r2,0x0
 5f0:	38 42 07 9c 	ori r2,r2,0x79c
 5f4:	28 42 00 00 	lw r2,(r2+0)
 5f8:	34 03 00 01 	mvi r3,1
	}
}


char spi_putget(char c)
{
 5fc:	20 21 00 ff 	andi r1,r1,0xff
        spi0->cs=1;
 600:	58 43 00 08 	sw (r2+8),r3
	while (spi0->status & SPI_RUN) ;
 604:	28 43 00 04 	lw r3,(r2+4)
 608:	20 63 00 01 	andi r3,r3,0x1
 60c:	5c 60 ff fe 	bne r3,r0,604 <spi_putget+0x18>
	spi0->rxtx = c;
 610:	58 41 00 00 	sw (r2+0),r1
	while (spi0->status & SPI_RUN) ;
 614:	28 41 00 04 	lw r1,(r2+4)
 618:	20 21 00 01 	andi r1,r1,0x1
 61c:	5c 20 ff fe 	bne r1,r0,614 <spi_putget+0x28>
        spi0->cs=0;
 620:	58 40 00 08 	sw (r2+8),r0
        return spi0->rxtx;
 624:	28 41 00 00 	lw r1,(r2+0)
}
 628:	20 21 00 ff 	andi r1,r1,0xff
 62c:	c3 a0 00 00 	ret

00000630 <buffercam_clear>:


int buffercam[SIZE_BUFFCAM];

void buffercam_clear()
{
 630:	78 01 00 00 	mvhi r1,0x0
 634:	38 21 08 74 	ori r1,r1,0x874



int buffercam[SIZE_BUFFCAM];

void buffercam_clear()
 638:	34 22 08 00 	addi r2,r1,2048
{
	uint32_t i;
    for (i=0; i< SIZE_BUFFCAM;i++)
    	buffercam[i]=0;
 63c:	58 20 00 00 	sw (r1+0),r0
 640:	34 21 00 04 	addi r1,r1,4
int buffercam[SIZE_BUFFCAM];

void buffercam_clear()
{
	uint32_t i;
    for (i=0; i< SIZE_BUFFCAM;i++)
 644:	5c 22 ff fe 	bne r1,r2,63c <buffercam_clear+0xc>
    	buffercam[i]=0;

}
 648:	c3 a0 00 00 	ret

0000064c <buffercam_upload>:

void buffercam_upload(uint32_t size)
{
 64c:	37 9c ff f0 	addi sp,sp,-16
 650:	5b 8b 00 10 	sw (sp+16),r11
 654:	5b 8c 00 0c 	sw (sp+12),r12
 658:	5b 8d 00 08 	sw (sp+8),r13
 65c:	5b 9d 00 04 	sw (sp+4),ra
 660:	b8 20 68 00 	mv r13,r1
	uint32_t i;
    for (i=0; i< size;i++)
 664:	44 20 00 09 	be r1,r0,688 <buffercam_upload+0x3c>
 668:	78 0b 00 00 	mvhi r11,0x0
 66c:	39 6b 08 74 	ori r11,r11,0x874
 670:	34 0c 00 00 	mvi r12,0
    	buffercam[i]=uart_getchar0();
 674:	fb ff ff a9 	calli 518 <uart_getchar0>
 678:	59 61 00 00 	sw (r11+0),r1
}

void buffercam_upload(uint32_t size)
{
	uint32_t i;
    for (i=0; i< size;i++)
 67c:	35 8c 00 01 	addi r12,r12,1
 680:	35 6b 00 04 	addi r11,r11,4
 684:	55 ac ff fc 	bgu r13,r12,674 <buffercam_upload+0x28>
    	buffercam[i]=uart_getchar0();
}
 688:	2b 9d 00 04 	lw ra,(sp+4)
 68c:	2b 8b 00 10 	lw r11,(sp+16)
 690:	2b 8c 00 0c 	lw r12,(sp+12)
 694:	2b 8d 00 08 	lw r13,(sp+8)
 698:	37 9c 00 10 	addi sp,sp,16
 69c:	c3 a0 00 00 	ret

000006a0 <buffercam_uartsend>:

void buffercam_uartsend(uint32_t size)
{
 6a0:	37 9c ff f0 	addi sp,sp,-16
 6a4:	5b 8b 00 10 	sw (sp+16),r11
 6a8:	5b 8c 00 0c 	sw (sp+12),r12
 6ac:	5b 8d 00 08 	sw (sp+8),r13
 6b0:	5b 9d 00 04 	sw (sp+4),ra
 6b4:	b8 20 68 00 	mv r13,r1
	uint32_t i;
    for (i=0; i< size;i++)
 6b8:	44 20 00 09 	be r1,r0,6dc <buffercam_uartsend+0x3c>
 6bc:	78 0b 00 00 	mvhi r11,0x0
 6c0:	39 6b 08 74 	ori r11,r11,0x874
 6c4:	34 0c 00 00 	mvi r12,0
    	uart_putchar0(buffercam[i]);
 6c8:	41 61 00 03 	lbu r1,(r11+3)
}

void buffercam_uartsend(uint32_t size)
{
	uint32_t i;
    for (i=0; i< size;i++)
 6cc:	35 8c 00 01 	addi r12,r12,1
 6d0:	35 6b 00 04 	addi r11,r11,4
    	uart_putchar0(buffercam[i]);
 6d4:	fb ff ff 9a 	calli 53c <uart_putchar0>
}

void buffercam_uartsend(uint32_t size)
{
	uint32_t i;
    for (i=0; i< size;i++)
 6d8:	55 ac ff fc 	bgu r13,r12,6c8 <buffercam_uartsend+0x28>
    	uart_putchar0(buffercam[i]);
}
 6dc:	2b 9d 00 04 	lw ra,(sp+4)
 6e0:	2b 8b 00 10 	lw r11,(sp+16)
 6e4:	2b 8c 00 0c 	lw r12,(sp+12)
 6e8:	2b 8d 00 08 	lw r13,(sp+8)
 6ec:	37 9c 00 10 	addi sp,sp,16
 6f0:	c3 a0 00 00 	ret

000006f4 <resetcommand>:



void resetcommand(char c){
 6f4:	37 9c ff fc 	addi sp,sp,-4
 6f8:	5b 9d 00 04 	sw (sp+4),ra

	uart_putchar1(COMMANDSEND);
 6fc:	34 01 00 56 	mvi r1,86
 700:	fb ff ff 98 	calli 560 <uart_putchar1>
	uart_putchar1(SERIALNUM);
 704:	34 01 00 00 	mvi r1,0
 708:	fb ff ff 96 	calli 560 <uart_putchar1>
	uart_putchar1(CMD_RESET);
 70c:	34 01 00 26 	mvi r1,38
 710:	fb ff ff 94 	calli 560 <uart_putchar1>
	uart_putchar1(COMMANDEND);
 714:	34 01 00 00 	mvi r1,0
 718:	fb ff ff 92 	calli 560 <uart_putchar1>
}
 71c:	2b 9d 00 04 	lw ra,(sp+4)
 720:	37 9c 00 04 	addi sp,sp,4
 724:	c3 a0 00 00 	ret

00000728 <getversioncommand>:


void getversioncommand(char c)
{
 728:	37 9c ff fc 	addi sp,sp,-4
 72c:	5b 9d 00 04 	sw (sp+4),ra
 730:	78 01 00 00 	mvhi r1,0x0
 734:	38 21 08 74 	ori r1,r1,0x874
	uart_putchar1(CMD_RESET);
	uart_putchar1(COMMANDEND);
}


void getversioncommand(char c)
 738:	34 22 08 00 	addi r2,r1,2048

void buffercam_clear()
{
	uint32_t i;
    for (i=0; i< SIZE_BUFFCAM;i++)
    	buffercam[i]=0;
 73c:	58 20 00 00 	sw (r1+0),r0
 740:	34 21 00 04 	addi r1,r1,4
int buffercam[SIZE_BUFFCAM];

void buffercam_clear()
{
	uint32_t i;
    for (i=0; i< SIZE_BUFFCAM;i++)
 744:	5c 22 ff fe 	bne r1,r2,73c <getversioncommand+0x14>
void getversioncommand(char c)
{

	buffercam_clear();

	uart_putchar0(COMMANDSEND);
 748:	34 01 00 56 	mvi r1,86
 74c:	fb ff ff 7c 	calli 53c <uart_putchar0>
	uart_putchar0(SERIALNUM);
 750:	34 01 00 00 	mvi r1,0
 754:	fb ff ff 7a 	calli 53c <uart_putchar0>
	uart_putchar0(CMD_GETVERSION);
 758:	34 01 00 11 	mvi r1,17
 75c:	fb ff ff 78 	calli 53c <uart_putchar0>
	uart_putchar0(COMMANDEND);
 760:	34 01 00 00 	mvi r1,0
 764:	fb ff ff 76 	calli 53c <uart_putchar0>

	buffercam_upload(10);
 768:	34 01 00 0a 	mvi r1,10
 76c:	fb ff ff b8 	calli 64c <buffercam_upload>
	buffercam_uartsend(10);
 770:	34 01 00 0a 	mvi r1,10
 774:	fb ff ff cb 	calli 6a0 <buffercam_uartsend>
}
 778:	2b 9d 00 04 	lw ra,(sp+4)
 77c:	37 9c 00 04 	addi sp,sp,4
 780:	c3 a0 00 00 	ret

00000784 <pppp>:

//p = &arreglo[0]; 

		
	
}
 784:	c3 a0 00 00 	ret

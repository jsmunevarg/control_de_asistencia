
image:     formato del fichero elf32-lm32

Secciones:
Ind Nombre        Tamaño    VMA       LMA       Desp fich Alin
  0 .text         00000960  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       00000004  00000960  00000960  000009b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000014  00000964  00000964  000009b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000488  00000978  00000978  000009cc  2**2
                  ALLOC
  4 .debug_abbrev 00000372  00000000  00000000  000009cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000913  00000000  00000000  00000d3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000809  00000000  00000000  00001651  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000200  00000000  00000000  00001e5c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 0000026d  00000000  00000000  0000205c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubtypes 000000a3  00000000  00000000  000022c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000060  00000000  00000000  0000236c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002e9  00000000  00000000  000023cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .comment      00000011  00000000  00000000  000026b5  2**0
                  CONTENTS, READONLY
 13 .debug_loc    000002ec  00000000  00000000  000026c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000018  00000000  00000000  000029b2  2**0
                  CONTENTS, READONLY, DEBUGGING

Desensamblado de la sección .text:

00000000 <_ftext>:
   0:	98 00 00 00 	xor r0,r0,r0
   4:	d0 00 00 00 	wcsr IE,r0
   8:	78 01 00 00 	mvhi r1,0x0
   c:	38 21 00 00 	ori r1,r1,0x0
  10:	d0 e1 00 00 	wcsr EBA,r1
  14:	f8 00 00 3b 	calli 100 <_crt0>
  18:	34 00 00 00 	nop
  1c:	34 00 00 00 	nop

00000020 <_breakpoint_handler>:
  20:	34 00 00 00 	nop
  24:	34 00 00 00 	nop
  28:	34 00 00 00 	nop
  2c:	34 00 00 00 	nop
  30:	34 00 00 00 	nop
  34:	34 00 00 00 	nop
  38:	34 00 00 00 	nop
  3c:	34 00 00 00 	nop

00000040 <_ibuserror_handler>:
  40:	34 00 00 00 	nop
  44:	34 00 00 00 	nop
  48:	34 00 00 00 	nop
  4c:	34 00 00 00 	nop
  50:	34 00 00 00 	nop
  54:	34 00 00 00 	nop
  58:	34 00 00 00 	nop
  5c:	34 00 00 00 	nop

00000060 <_watchpoint_handler>:
  60:	34 00 00 00 	nop
  64:	34 00 00 00 	nop
  68:	34 00 00 00 	nop
  6c:	34 00 00 00 	nop
  70:	34 00 00 00 	nop
  74:	34 00 00 00 	nop
  78:	34 00 00 00 	nop
  7c:	34 00 00 00 	nop

00000080 <_dbuserror_handler>:
  80:	34 00 00 00 	nop
  84:	34 00 00 00 	nop
  88:	34 00 00 00 	nop
  8c:	34 00 00 00 	nop
  90:	34 00 00 00 	nop
  94:	34 00 00 00 	nop
  98:	34 00 00 00 	nop
  9c:	34 00 00 00 	nop

000000a0 <_divzero_handler>:
  a0:	34 00 00 00 	nop
  a4:	34 00 00 00 	nop
  a8:	34 00 00 00 	nop
  ac:	34 00 00 00 	nop
  b0:	34 00 00 00 	nop
  b4:	34 00 00 00 	nop
  b8:	34 00 00 00 	nop
  bc:	34 00 00 00 	nop

000000c0 <_interrupt_handler>:
  c0:	5b 9d 00 00 	sw (sp+0),ra
  c4:	f8 00 00 2b 	calli 170 <_save_all>
  c8:	90 40 08 00 	rcsr r1,IP
  cc:	f8 00 00 8b 	calli 2f8 <irq_handler>
  d0:	78 01 ff ff 	mvhi r1,0xffff
  d4:	38 21 ff ff 	ori r1,r1,0xffff
  d8:	d0 41 00 00 	wcsr IP,r1
  dc:	e0 00 00 38 	bi 1bc <_restore_all_and_eret>

000000e0 <_scall_handler>:
  e0:	34 00 00 00 	nop
  e4:	34 00 00 00 	nop
  e8:	34 00 00 00 	nop
  ec:	34 00 00 00 	nop
  f0:	34 00 00 00 	nop
  f4:	34 00 00 00 	nop
  f8:	34 00 00 00 	nop
  fc:	34 00 00 00 	nop

00000100 <_crt0>:
 100:	78 1c 00 00 	mvhi sp,0x0
 104:	3b 9c 0f fc 	ori sp,sp,0xffc
 108:	78 1a 00 00 	mvhi gp,0x0
 10c:	3b 5a 09 80 	ori gp,gp,0x980
 110:	78 01 00 00 	mvhi r1,0x0
 114:	38 21 09 78 	ori r1,r1,0x978
 118:	78 03 00 00 	mvhi r3,0x0
 11c:	38 63 0e 00 	ori r3,r3,0xe00

00000120 <.clearBSS>:
 120:	44 23 00 04 	be r1,r3,130 <.callMain>
 124:	58 20 00 00 	sw (r1+0),r0
 128:	34 21 00 04 	addi r1,r1,4
 12c:	e3 ff ff fd 	bi 120 <.clearBSS>

00000130 <.callMain>:
 130:	34 01 00 00 	mvi r1,0
 134:	34 02 00 00 	mvi r2,0
 138:	34 03 00 00 	mvi r3,0
 13c:	f8 00 00 33 	calli 208 <main>

00000140 <irq_enable>:
 140:	34 01 00 01 	mvi r1,1
 144:	d0 01 00 00 	wcsr IE,r1
 148:	c3 a0 00 00 	ret

0000014c <irq_disable>:
 14c:	34 01 00 00 	mvi r1,0
 150:	d0 01 00 00 	wcsr IE,r1
 154:	c3 a0 00 00 	ret

00000158 <irq_set_mask>:
 158:	d0 21 00 00 	wcsr IM,r1
 15c:	c3 a0 00 00 	ret

00000160 <irq_get_mask>:
 160:	90 20 08 00 	rcsr r1,IM
 164:	c3 a0 00 00 	ret

00000168 <jump>:
 168:	c0 20 00 00 	b r1

0000016c <halt>:
 16c:	e0 00 00 00 	bi 16c <halt>

00000170 <_save_all>:
 170:	37 9c ff 80 	addi sp,sp,-128
 174:	5b 81 00 04 	sw (sp+4),r1
 178:	5b 82 00 08 	sw (sp+8),r2
 17c:	5b 83 00 0c 	sw (sp+12),r3
 180:	5b 84 00 10 	sw (sp+16),r4
 184:	5b 85 00 14 	sw (sp+20),r5
 188:	5b 86 00 18 	sw (sp+24),r6
 18c:	5b 87 00 1c 	sw (sp+28),r7
 190:	5b 88 00 20 	sw (sp+32),r8
 194:	5b 89 00 24 	sw (sp+36),r9
 198:	5b 8a 00 28 	sw (sp+40),r10
 19c:	5b 9e 00 78 	sw (sp+120),ea
 1a0:	5b 9f 00 7c 	sw (sp+124),ba
 1a4:	2b 81 00 80 	lw r1,(sp+128)
 1a8:	5b 81 00 74 	sw (sp+116),r1
 1ac:	bb 80 08 00 	mv r1,sp
 1b0:	34 21 00 80 	addi r1,r1,128
 1b4:	5b 81 00 70 	sw (sp+112),r1
 1b8:	c3 a0 00 00 	ret

000001bc <_restore_all_and_eret>:
 1bc:	2b 81 00 04 	lw r1,(sp+4)
 1c0:	2b 82 00 08 	lw r2,(sp+8)
 1c4:	2b 83 00 0c 	lw r3,(sp+12)
 1c8:	2b 84 00 10 	lw r4,(sp+16)
 1cc:	2b 85 00 14 	lw r5,(sp+20)
 1d0:	2b 86 00 18 	lw r6,(sp+24)
 1d4:	2b 87 00 1c 	lw r7,(sp+28)
 1d8:	2b 88 00 20 	lw r8,(sp+32)
 1dc:	2b 89 00 24 	lw r9,(sp+36)
 1e0:	2b 8a 00 28 	lw r10,(sp+40)
 1e4:	2b 9d 00 74 	lw ra,(sp+116)
 1e8:	2b 9e 00 78 	lw ea,(sp+120)
 1ec:	2b 9f 00 7c 	lw ba,(sp+124)
 1f0:	2b 9c 00 70 	lw sp,(sp+112)
 1f4:	c3 c0 00 00 	eret

000001f8 <get_sp>:
 1f8:	bb 80 08 00 	mv r1,sp
 1fc:	c3 a0 00 00 	ret

00000200 <get_gp>:
 200:	bb 40 08 00 	mv r1,gp
 204:	c3 a0 00 00 	ret

00000208 <main>:

#include "cam.h"


int main()
{
 208:	37 9c ff fc 	addi sp,sp,-4
 20c:	5b 9d 00 04 	sw (sp+4),ra
	uint8_t i;
	uint32_t bytes;
		
    		imagesize(1);
 210:	34 01 00 01 	mvi r1,1
 214:	f8 00 01 b7 	calli 8f0 <imagesize>
    		getversioncommand(1);
 218:	34 01 00 01 	mvi r1,1
 21c:	f8 00 01 21 	calli 6a0 <getversioncommand>
		takephotocommand(1);
 220:	34 01 00 01 	mvi r1,1
 224:	f8 00 01 36 	calli 6fc <takephotocommand>
		bytes=getbufflencommand();
 228:	f8 00 01 48 	calli 748 <getbufflencommand>
		readphotocommand(bytes);
 22c:	f8 00 01 5e 	calli 7a4 <readphotocommand>
		resetcommand(1);
 230:	34 01 00 01 	mvi r1,1
 234:	f8 00 01 0e 	calli 66c <resetcommand>

   
}
 238:	2b 9d 00 04 	lw ra,(sp+4)
 23c:	37 9c 00 04 	addi sp,sp,4
 240:	c3 a0 00 00 	ret

00000244 <isr_null>:
/***************************************************************************
 * IRQ handling
 */
void isr_null()
{
}
 244:	c3 a0 00 00 	ret

00000248 <tic_isr>:

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 248:	78 01 00 00 	mvhi r1,0x0
 24c:	38 21 09 f8 	ori r1,r1,0x9f8
 250:	28 23 00 00 	lw r3,(r1+0)
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 254:	78 02 00 00 	mvhi r2,0x0
 258:	38 42 09 68 	ori r2,r2,0x968
 25c:	28 42 00 00 	lw r2,(r2+0)

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 260:	34 63 00 01 	addi r3,r3,1
 264:	58 23 00 00 	sw (r1+0),r3
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 268:	34 01 00 0e 	mvi r1,14
 26c:	58 41 00 00 	sw (r2+0),r1
}
 270:	c3 a0 00 00 	ret

00000274 <prueba>:

isr_ptr_t isr_table[32];

void prueba()
{
	   uart0->rxtx=30;
 274:	78 01 00 00 	mvhi r1,0x0
 278:	38 21 09 64 	ori r1,r1,0x964
	   uart1->rxtx=30;
 27c:	78 02 00 00 	mvhi r2,0x0

isr_ptr_t isr_table[32];

void prueba()
{
	   uart0->rxtx=30;
 280:	28 24 00 00 	lw r4,(r1+0)
	   uart1->rxtx=30;
 284:	38 42 09 70 	ori r2,r2,0x970
	   spi0->rxtx=1;
 288:	78 01 00 00 	mvhi r1,0x0
isr_ptr_t isr_table[32];

void prueba()
{
	   uart0->rxtx=30;
	   uart1->rxtx=30;
 28c:	28 43 00 00 	lw r3,(r2+0)
	   spi0->rxtx=1;
 290:	38 21 09 74 	ori r1,r1,0x974
 294:	28 21 00 00 	lw r1,(r1+0)

isr_ptr_t isr_table[32];

void prueba()
{
	   uart0->rxtx=30;
 298:	34 02 00 1e 	mvi r2,30
 29c:	58 82 00 04 	sw (r4+4),r2
	   uart1->rxtx=30;
 2a0:	58 62 00 04 	sw (r3+4),r2
	   spi0->rxtx=1;
 2a4:	34 02 00 01 	mvi r2,1
 2a8:	58 22 00 00 	sw (r1+0),r2
	   spi0->status=2;
	   spi0->cs=3;
	   spi0->divisor=4;
	   spi0->nop=5;
	   timer0->tcr0 = 0xAA;
 2ac:	78 03 00 00 	mvhi r3,0x0
void prueba()
{
	   uart0->rxtx=30;
	   uart1->rxtx=30;
	   spi0->rxtx=1;
	   spi0->status=2;
 2b0:	34 02 00 02 	mvi r2,2
 2b4:	58 22 00 04 	sw (r1+4),r2
	   spi0->cs=3;
 2b8:	34 04 00 03 	mvi r4,3
	   spi0->divisor=4;
	   spi0->nop=5;
	   timer0->tcr0 = 0xAA;
 2bc:	38 63 09 68 	ori r3,r3,0x968
	   gpio0->ctrl=0x55;
 2c0:	78 02 00 00 	mvhi r2,0x0
{
	   uart0->rxtx=30;
	   uart1->rxtx=30;
	   spi0->rxtx=1;
	   spi0->status=2;
	   spi0->cs=3;
 2c4:	58 24 00 08 	sw (r1+8),r4
	   spi0->divisor=4;
	   spi0->nop=5;
	   timer0->tcr0 = 0xAA;
 2c8:	28 63 00 00 	lw r3,(r3+0)
	   uart0->rxtx=30;
	   uart1->rxtx=30;
	   spi0->rxtx=1;
	   spi0->status=2;
	   spi0->cs=3;
	   spi0->divisor=4;
 2cc:	34 04 00 04 	mvi r4,4
	   spi0->nop=5;
	   timer0->tcr0 = 0xAA;
	   gpio0->ctrl=0x55;
 2d0:	38 42 09 6c 	ori r2,r2,0x96c
	   uart0->rxtx=30;
	   uart1->rxtx=30;
	   spi0->rxtx=1;
	   spi0->status=2;
	   spi0->cs=3;
	   spi0->divisor=4;
 2d4:	58 24 00 10 	sw (r1+16),r4
	   spi0->nop=5;
	   timer0->tcr0 = 0xAA;
	   gpio0->ctrl=0x55;
 2d8:	28 42 00 00 	lw r2,(r2+0)
	   uart1->rxtx=30;
	   spi0->rxtx=1;
	   spi0->status=2;
	   spi0->cs=3;
	   spi0->divisor=4;
	   spi0->nop=5;
 2dc:	34 04 00 05 	mvi r4,5
 2e0:	58 24 00 0c 	sw (r1+12),r4
	   timer0->tcr0 = 0xAA;
 2e4:	34 01 00 aa 	mvi r1,170
 2e8:	58 61 00 00 	sw (r3+0),r1
	   gpio0->ctrl=0x55;
 2ec:	34 01 00 55 	mvi r1,85
 2f0:	58 41 00 00 	sw (r2+0),r1

}
 2f4:	c3 a0 00 00 	ret

000002f8 <irq_handler>:
void isr_null()
{
}

void irq_handler(uint32_t pending)
{
 2f8:	37 9c ff f0 	addi sp,sp,-16
 2fc:	5b 8b 00 10 	sw (sp+16),r11
 300:	5b 8c 00 0c 	sw (sp+12),r12
 304:	5b 8d 00 08 	sw (sp+8),r13
 308:	5b 9d 00 04 	sw (sp+4),ra
 30c:	78 0b 00 00 	mvhi r11,0x0
 310:	39 6b 09 78 	ori r11,r11,0x978
 314:	b8 20 60 00 	mv r12,r1
 */
void isr_null()
{
}

void irq_handler(uint32_t pending)
 318:	35 6d 00 80 	addi r13,r11,128
 31c:	e0 00 00 04 	bi 32c <irq_handler+0x34>
{
	int i;

	for(i=0; i<32; i++) {
		if (pending & 0x01) (*isr_table[i])();
 320:	35 6b 00 04 	addi r11,r11,4

void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
 324:	45 6d 00 08 	be r11,r13,344 <irq_handler+0x4c>
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
 328:	01 8c 00 01 	srui r12,r12,1
void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
		if (pending & 0x01) (*isr_table[i])();
 32c:	21 81 00 01 	andi r1,r12,0x1
 330:	44 20 ff fc 	be r1,r0,320 <irq_handler+0x28>
 334:	29 61 00 00 	lw r1,(r11+0)
 338:	35 6b 00 04 	addi r11,r11,4
 33c:	d8 20 00 00 	call r1

void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
 340:	5d 6d ff fa 	bne r11,r13,328 <irq_handler+0x30>
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
	}
}
 344:	2b 9d 00 04 	lw ra,(sp+4)
 348:	2b 8b 00 10 	lw r11,(sp+16)
 34c:	2b 8c 00 0c 	lw r12,(sp+12)
 350:	2b 8d 00 08 	lw r13,(sp+8)
 354:	37 9c 00 10 	addi sp,sp,16
 358:	c3 a0 00 00 	ret

0000035c <isr_init>:

void isr_init()
{
 35c:	78 01 00 00 	mvhi r1,0x0
 360:	78 02 00 00 	mvhi r2,0x0
 364:	38 21 09 78 	ori r1,r1,0x978
 368:	38 42 02 44 	ori r2,r2,0x244
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
	}
}

void isr_init()
 36c:	34 23 00 80 	addi r3,r1,128
{
	int i;
	for(i=0; i<32; i++)
		isr_table[i] = &isr_null;
 370:	58 22 00 00 	sw (r1+0),r2
 374:	34 21 00 04 	addi r1,r1,4
}

void isr_init()
{
	int i;
	for(i=0; i<32; i++)
 378:	5c 23 ff fe 	bne r1,r3,370 <isr_init+0x14>
		isr_table[i] = &isr_null;
}
 37c:	c3 a0 00 00 	ret

00000380 <isr_register>:

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 380:	78 03 00 00 	mvhi r3,0x0
 384:	3c 21 00 02 	sli r1,r1,2
 388:	38 63 09 78 	ori r3,r3,0x978
 38c:	b4 61 18 00 	add r3,r3,r1
 390:	58 62 00 00 	sw (r3+0),r2
}
 394:	c3 a0 00 00 	ret

00000398 <isr_unregister>:

void isr_unregister(int irq)
{
	isr_table[irq] = &isr_null;
 398:	78 03 00 00 	mvhi r3,0x0
 39c:	3c 21 00 02 	sli r1,r1,2
 3a0:	38 63 09 78 	ori r3,r3,0x978
 3a4:	78 02 00 00 	mvhi r2,0x0
 3a8:	b4 61 18 00 	add r3,r3,r1
 3ac:	38 42 02 44 	ori r2,r2,0x244
 3b0:	58 62 00 00 	sw (r3+0),r2
}
 3b4:	c3 a0 00 00 	ret

000003b8 <msleep>:
void msleep(uint32_t msec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000)*msec;
 3b8:	78 04 00 00 	mvhi r4,0x0
 3bc:	38 84 09 60 	ori r4,r4,0x960
 3c0:	28 83 00 00 	lw r3,(r4+0)
 3c4:	78 02 00 00 	mvhi r2,0x0
 3c8:	38 42 09 68 	ori r2,r2,0x968
 3cc:	28 42 00 00 	lw r2,(r2+0)
 3d0:	88 23 08 00 	mul r1,r1,r3
 3d4:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 3d8:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 3dc:	34 01 00 08 	mvi r1,8
 3e0:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 3e4:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 3e8:	20 21 00 01 	andi r1,r1,0x1
 3ec:	44 20 ff fe 	be r1,r0,3e4 <msleep+0x2c>
}
 3f0:	c3 a0 00 00 	ret

000003f4 <nsleep>:
void nsleep(uint32_t nsec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000000)*nsec;
 3f4:	78 02 00 00 	mvhi r2,0x0
 3f8:	38 42 09 68 	ori r2,r2,0x968
 3fc:	28 42 00 00 	lw r2,(r2+0)
 400:	08 21 00 64 	muli r1,r1,100
 404:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 408:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 40c:	34 01 00 08 	mvi r1,8
 410:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 414:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 418:	20 21 00 01 	andi r1,r1,0x1
 41c:	44 20 ff fe 	be r1,r0,414 <nsleep+0x20>
}
 420:	c3 a0 00 00 	ret

00000424 <tic_init>:
void tic_init()
{
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 424:	78 01 00 00 	mvhi r1,0x0
 428:	38 21 09 68 	ori r1,r1,0x968
 42c:	28 23 00 00 	lw r3,(r1+0)
 430:	34 02 27 10 	mvi r2,10000
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 434:	78 01 00 00 	mvhi r1,0x0

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 438:	58 62 00 04 	sw (r3+4),r2
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 43c:	38 21 09 f8 	ori r1,r1,0x9f8

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
 440:	58 60 00 08 	sw (r3+8),r0
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 444:	58 20 00 00 	sw (r1+0),r0
		isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 448:	78 02 00 00 	mvhi r2,0x0
 44c:	78 01 00 00 	mvhi r1,0x0
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 450:	34 04 00 0e 	mvi r4,14
 454:	58 64 00 00 	sw (r3+0),r4
		isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 458:	38 21 09 78 	ori r1,r1,0x978
 45c:	38 42 02 48 	ori r2,r2,0x248
 460:	58 22 00 04 	sw (r1+4),r2
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;

	isr_register(1, &tic_isr);
}
 464:	c3 a0 00 00 	ret

00000468 <uart_init>:
	//uart0->lcr = 0x03;  // Line Control Register:    8N1
	//uart0->mcr = 0x00;  // Modem Control Register

	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
}
 468:	c3 a0 00 00 	ret

0000046c <uart_getchar1>:

char uart_getchar1()
{   
 46c:	78 01 00 00 	mvhi r1,0x0
 470:	38 21 09 70 	ori r1,r1,0x970
 474:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart1->ucr & UART_DR)) ;
 478:	28 41 00 00 	lw r1,(r2+0)
 47c:	20 21 00 01 	andi r1,r1,0x1
 480:	44 20 ff fe 	be r1,r0,478 <uart_getchar1+0xc>
	return uart1->rxtx;
 484:	28 41 00 04 	lw r1,(r2+4)
}
 488:	20 21 00 ff 	andi r1,r1,0xff
 48c:	c3 a0 00 00 	ret

00000490 <uart_getchar0>:
char uart_getchar0()
{   
 490:	78 01 00 00 	mvhi r1,0x0
 494:	38 21 09 64 	ori r1,r1,0x964
 498:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart0->ucr & UART_DR)) ;
 49c:	28 41 00 00 	lw r1,(r2+0)
 4a0:	20 21 00 01 	andi r1,r1,0x1
 4a4:	44 20 ff fe 	be r1,r0,49c <uart_getchar0+0xc>
	return uart0->rxtx;
 4a8:	28 41 00 04 	lw r1,(r2+4)
}
 4ac:	20 21 00 ff 	andi r1,r1,0xff
 4b0:	c3 a0 00 00 	ret

000004b4 <uart_putchar0>:

void uart_putchar0(char c)
{
 4b4:	78 02 00 00 	mvhi r2,0x0
 4b8:	38 42 09 64 	ori r2,r2,0x964
 4bc:	28 43 00 00 	lw r3,(r2+0)
 4c0:	20 21 00 ff 	andi r1,r1,0xff
	while (uart0->ucr & UART_BUSY) ;
 4c4:	28 62 00 00 	lw r2,(r3+0)
 4c8:	20 42 00 10 	andi r2,r2,0x10
 4cc:	5c 40 ff fe 	bne r2,r0,4c4 <uart_putchar0+0x10>
	uart0->rxtx = c;
 4d0:	58 61 00 04 	sw (r3+4),r1
}
 4d4:	c3 a0 00 00 	ret

000004d8 <uart_putchar1>:
void uart_putchar1(char c)
{
 4d8:	78 02 00 00 	mvhi r2,0x0
 4dc:	38 42 09 70 	ori r2,r2,0x970
 4e0:	28 43 00 00 	lw r3,(r2+0)
 4e4:	20 21 00 ff 	andi r1,r1,0xff
	while (uart1->ucr & UART_BUSY) ;
 4e8:	28 62 00 00 	lw r2,(r3+0)
 4ec:	20 42 00 10 	andi r2,r2,0x10
 4f0:	5c 40 ff fe 	bne r2,r0,4e8 <uart_putchar1+0x10>
	uart1->rxtx = c;
 4f4:	58 61 00 04 	sw (r3+4),r1
}
 4f8:	c3 a0 00 00 	ret

000004fc <uart_putstr0>:

void uart_putstr0(char *str)
{
	char *c = str;
	while(*c) {
 4fc:	40 24 00 00 	lbu r4,(r1+0)
 500:	44 80 00 0b 	be r4,r0,52c <uart_putstr0+0x30>
 504:	78 02 00 00 	mvhi r2,0x0
 508:	38 42 09 64 	ori r2,r2,0x964
 50c:	28 43 00 00 	lw r3,(r2+0)
	return uart0->rxtx;
}

void uart_putchar0(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 510:	28 62 00 00 	lw r2,(r3+0)
 514:	20 42 00 10 	andi r2,r2,0x10
 518:	5c 40 ff fe 	bne r2,r0,510 <uart_putstr0+0x14>
	uart0->rxtx = c;
 51c:	58 64 00 04 	sw (r3+4),r4
void uart_putstr0(char *str)
{
	char *c = str;
	while(*c) {
		uart_putchar0(*c);
		c++;
 520:	34 21 00 01 	addi r1,r1,1
}

void uart_putstr0(char *str)
{
	char *c = str;
	while(*c) {
 524:	40 24 00 00 	lbu r4,(r1+0)
 528:	5c 82 ff fa 	bne r4,r2,510 <uart_putstr0+0x14>
 52c:	c3 a0 00 00 	ret

00000530 <uart_putstr1>:
}

void uart_putstr1(char *str)
{
	char *c = str;
	while(*c) {
 530:	40 24 00 00 	lbu r4,(r1+0)
 534:	44 80 00 0b 	be r4,r0,560 <uart_putstr1+0x30>
 538:	78 02 00 00 	mvhi r2,0x0
 53c:	38 42 09 70 	ori r2,r2,0x970
 540:	28 43 00 00 	lw r3,(r2+0)
	while (uart0->ucr & UART_BUSY) ;
	uart0->rxtx = c;
}
void uart_putchar1(char c)
{
	while (uart1->ucr & UART_BUSY) ;
 544:	28 62 00 00 	lw r2,(r3+0)
 548:	20 42 00 10 	andi r2,r2,0x10
 54c:	5c 40 ff fe 	bne r2,r0,544 <uart_putstr1+0x14>
	uart1->rxtx = c;
 550:	58 64 00 04 	sw (r3+4),r4
void uart_putstr1(char *str)
{
	char *c = str;
	while(*c) {
		uart_putchar1(*c);
		c++;
 554:	34 21 00 01 	addi r1,r1,1
}

void uart_putstr1(char *str)
{
	char *c = str;
	while(*c) {
 558:	40 24 00 00 	lbu r4,(r1+0)
 55c:	5c 82 ff fa 	bne r4,r2,544 <uart_putstr1+0x14>
 560:	c3 a0 00 00 	ret

00000564 <spi_putget>:
}


char spi_putget(char c)
{
        spi0->cs=1;
 564:	78 02 00 00 	mvhi r2,0x0
 568:	38 42 09 74 	ori r2,r2,0x974
 56c:	28 42 00 00 	lw r2,(r2+0)
 570:	34 03 00 01 	mvi r3,1
	}
}


char spi_putget(char c)
{
 574:	20 21 00 ff 	andi r1,r1,0xff
        spi0->cs=1;
 578:	58 43 00 08 	sw (r2+8),r3
	while (spi0->status & SPI_RUN) ;
 57c:	28 43 00 04 	lw r3,(r2+4)
 580:	20 63 00 01 	andi r3,r3,0x1
 584:	5c 60 ff fe 	bne r3,r0,57c <spi_putget+0x18>
	spi0->rxtx = c;
 588:	58 41 00 00 	sw (r2+0),r1
	while (spi0->status & SPI_RUN) ;
 58c:	28 41 00 04 	lw r1,(r2+4)
 590:	20 21 00 01 	andi r1,r1,0x1
 594:	5c 20 ff fe 	bne r1,r0,58c <spi_putget+0x28>
        spi0->cs=0;
 598:	58 40 00 08 	sw (r2+8),r0
        return spi0->rxtx;
 59c:	28 41 00 00 	lw r1,(r2+0)
}
 5a0:	20 21 00 ff 	andi r1,r1,0xff
 5a4:	c3 a0 00 00 	ret

000005a8 <buffercam_clear>:

int buffercam[SIZE_BUFFCAM];
int l;

void buffercam_clear()
{
 5a8:	78 01 00 00 	mvhi r1,0x0
 5ac:	38 21 0a 00 	ori r1,r1,0xa00


int buffercam[SIZE_BUFFCAM];
int l;

void buffercam_clear()
 5b0:	34 22 04 00 	addi r2,r1,1024
{
	uint32_t i;
    for (i=0; i< SIZE_BUFFCAM;i++)
    	buffercam[i]=0;
 5b4:	58 20 00 00 	sw (r1+0),r0
 5b8:	34 21 00 04 	addi r1,r1,4
int l;

void buffercam_clear()
{
	uint32_t i;
    for (i=0; i< SIZE_BUFFCAM;i++)
 5bc:	5c 22 ff fe 	bne r1,r2,5b4 <buffercam_clear+0xc>
    	buffercam[i]=0;

}
 5c0:	c3 a0 00 00 	ret

000005c4 <buffercam_upload>:

void buffercam_upload(uint32_t size)
{
 5c4:	37 9c ff f0 	addi sp,sp,-16
 5c8:	5b 8b 00 10 	sw (sp+16),r11
 5cc:	5b 8c 00 0c 	sw (sp+12),r12
 5d0:	5b 8d 00 08 	sw (sp+8),r13
 5d4:	5b 9d 00 04 	sw (sp+4),ra
 5d8:	b8 20 68 00 	mv r13,r1
	uint32_t i;
    for (i=0; i< size;i++)
 5dc:	44 20 00 09 	be r1,r0,600 <buffercam_upload+0x3c>
 5e0:	78 0b 00 00 	mvhi r11,0x0
 5e4:	39 6b 0a 00 	ori r11,r11,0xa00
 5e8:	34 0c 00 00 	mvi r12,0
    	buffercam[i]=uart_getchar1();
 5ec:	fb ff ff a0 	calli 46c <uart_getchar1>
 5f0:	59 61 00 00 	sw (r11+0),r1
}

void buffercam_upload(uint32_t size)
{
	uint32_t i;
    for (i=0; i< size;i++)
 5f4:	35 8c 00 01 	addi r12,r12,1
 5f8:	35 6b 00 04 	addi r11,r11,4
 5fc:	55 ac ff fc 	bgu r13,r12,5ec <buffercam_upload+0x28>
    	buffercam[i]=uart_getchar1();
}
 600:	2b 9d 00 04 	lw ra,(sp+4)
 604:	2b 8b 00 10 	lw r11,(sp+16)
 608:	2b 8c 00 0c 	lw r12,(sp+12)
 60c:	2b 8d 00 08 	lw r13,(sp+8)
 610:	37 9c 00 10 	addi sp,sp,16
 614:	c3 a0 00 00 	ret

00000618 <buffercam_uartsend>:

void buffercam_uartsend(uint32_t size)
{
 618:	37 9c ff f0 	addi sp,sp,-16
 61c:	5b 8b 00 10 	sw (sp+16),r11
 620:	5b 8c 00 0c 	sw (sp+12),r12
 624:	5b 8d 00 08 	sw (sp+8),r13
 628:	5b 9d 00 04 	sw (sp+4),ra
 62c:	b8 20 68 00 	mv r13,r1
	uint32_t i;
    for (i=0; i< size;i++)
 630:	44 20 00 09 	be r1,r0,654 <buffercam_uartsend+0x3c>
 634:	78 0b 00 00 	mvhi r11,0x0
 638:	39 6b 0a 00 	ori r11,r11,0xa00
 63c:	34 0c 00 00 	mvi r12,0
    	uart_putchar0(buffercam[i]);
 640:	41 61 00 03 	lbu r1,(r11+3)
}

void buffercam_uartsend(uint32_t size)
{
	uint32_t i;
    for (i=0; i< size;i++)
 644:	35 8c 00 01 	addi r12,r12,1
 648:	35 6b 00 04 	addi r11,r11,4
    	uart_putchar0(buffercam[i]);
 64c:	fb ff ff 9a 	calli 4b4 <uart_putchar0>
}

void buffercam_uartsend(uint32_t size)
{
	uint32_t i;
    for (i=0; i< size;i++)
 650:	55 ac ff fc 	bgu r13,r12,640 <buffercam_uartsend+0x28>
    	uart_putchar0(buffercam[i]);
}
 654:	2b 9d 00 04 	lw ra,(sp+4)
 658:	2b 8b 00 10 	lw r11,(sp+16)
 65c:	2b 8c 00 0c 	lw r12,(sp+12)
 660:	2b 8d 00 08 	lw r13,(sp+8)
 664:	37 9c 00 10 	addi sp,sp,16
 668:	c3 a0 00 00 	ret

0000066c <resetcommand>:



void resetcommand(char c){
 66c:	37 9c ff fc 	addi sp,sp,-4
 670:	5b 9d 00 04 	sw (sp+4),ra

	uart_putchar1(COMMANDSEND);
 674:	34 01 00 56 	mvi r1,86
 678:	fb ff ff 98 	calli 4d8 <uart_putchar1>
	uart_putchar1(SERIALNUM);
 67c:	34 01 00 00 	mvi r1,0
 680:	fb ff ff 96 	calli 4d8 <uart_putchar1>
	uart_putchar1(CMD_RESET);
 684:	34 01 00 26 	mvi r1,38
 688:	fb ff ff 94 	calli 4d8 <uart_putchar1>
	uart_putchar1(COMMANDEND);
 68c:	34 01 00 00 	mvi r1,0
 690:	fb ff ff 92 	calli 4d8 <uart_putchar1>
}
 694:	2b 9d 00 04 	lw ra,(sp+4)
 698:	37 9c 00 04 	addi sp,sp,4
 69c:	c3 a0 00 00 	ret

000006a0 <getversioncommand>:


void getversioncommand(char c)
{
 6a0:	37 9c ff fc 	addi sp,sp,-4
 6a4:	5b 9d 00 04 	sw (sp+4),ra
 6a8:	78 01 00 00 	mvhi r1,0x0
 6ac:	38 21 0a 00 	ori r1,r1,0xa00
	uart_putchar1(CMD_RESET);
	uart_putchar1(COMMANDEND);
}


void getversioncommand(char c)
 6b0:	34 22 04 00 	addi r2,r1,1024

void buffercam_clear()
{
	uint32_t i;
    for (i=0; i< SIZE_BUFFCAM;i++)
    	buffercam[i]=0;
 6b4:	58 20 00 00 	sw (r1+0),r0
 6b8:	34 21 00 04 	addi r1,r1,4
int l;

void buffercam_clear()
{
	uint32_t i;
    for (i=0; i< SIZE_BUFFCAM;i++)
 6bc:	5c 22 ff fe 	bne r1,r2,6b4 <getversioncommand+0x14>
void getversioncommand(char c)
{

	buffercam_clear();

	uart_putchar1(COMMANDSEND);
 6c0:	34 01 00 56 	mvi r1,86
 6c4:	fb ff ff 85 	calli 4d8 <uart_putchar1>
	uart_putchar1(SERIALNUM);
 6c8:	34 01 00 00 	mvi r1,0
 6cc:	fb ff ff 83 	calli 4d8 <uart_putchar1>
	uart_putchar1(CMD_GETVERSION);
 6d0:	34 01 00 11 	mvi r1,17
 6d4:	fb ff ff 81 	calli 4d8 <uart_putchar1>
	uart_putchar1(COMMANDEND);
 6d8:	34 01 00 00 	mvi r1,0
 6dc:	fb ff ff 7f 	calli 4d8 <uart_putchar1>

	buffercam_upload(15);
 6e0:	34 01 00 0f 	mvi r1,15
 6e4:	fb ff ff b8 	calli 5c4 <buffercam_upload>
	buffercam_uartsend(15);
 6e8:	34 01 00 0f 	mvi r1,15
 6ec:	fb ff ff cb 	calli 618 <buffercam_uartsend>
}
 6f0:	2b 9d 00 04 	lw ra,(sp+4)
 6f4:	37 9c 00 04 	addi sp,sp,4
 6f8:	c3 a0 00 00 	ret

000006fc <takephotocommand>:
//take_picture
void takephotocommand(char c)
{
 6fc:	37 9c ff fc 	addi sp,sp,-4
 700:	5b 9d 00 04 	sw (sp+4),ra
	uint32_t x='0';	

	uart_putchar1(COMMANDSEND);
 704:	34 01 00 56 	mvi r1,86
 708:	fb ff ff 74 	calli 4d8 <uart_putchar1>
	uart_putchar1(SERIALNUM);
 70c:	34 01 00 00 	mvi r1,0
 710:	fb ff ff 72 	calli 4d8 <uart_putchar1>
	uart_putchar1(CMD_TAKEPHOTO);
 714:	34 01 00 36 	mvi r1,54
 718:	fb ff ff 70 	calli 4d8 <uart_putchar1>
	uart_putchar1(CONS);	
 71c:	34 01 00 01 	mvi r1,1
 720:	fb ff ff 6e 	calli 4d8 <uart_putchar1>
	uart_putchar1(FBUF_STOPCURRENTFRAME);	
 724:	34 01 00 00 	mvi r1,0
 728:	fb ff ff 6c 	calli 4d8 <uart_putchar1>

	buffercam_upload(5);
 72c:	34 01 00 05 	mvi r1,5
 730:	fb ff ff a5 	calli 5c4 <buffercam_upload>
	buffercam_uartsend(5);
 734:	34 01 00 05 	mvi r1,5
 738:	fb ff ff b8 	calli 618 <buffercam_uartsend>
	
}
 73c:	2b 9d 00 04 	lw ra,(sp+4)
 740:	37 9c 00 04 	addi sp,sp,4
 744:	c3 a0 00 00 	ret

00000748 <getbufflencommand>:
//read_size,,, confirmar si tomo la foto (buf[0]==0x76 && buf[2]==0x34)
//hay info importante XL,REVISAR
int getbufflencommand()
{
 748:	37 9c ff fc 	addi sp,sp,-4
 74c:	5b 9d 00 04 	sw (sp+4),ra
	uint32_t bytes,  x='0';	
	
	uart_putchar1(COMMANDSEND);
 750:	34 01 00 56 	mvi r1,86
 754:	fb ff ff 61 	calli 4d8 <uart_putchar1>
	uart_putchar1(SERIALNUM);
 758:	34 01 00 00 	mvi r1,0
 75c:	fb ff ff 5f 	calli 4d8 <uart_putchar1>
	uart_putchar1(CMD_GETBUFFLEN);
 760:	34 01 00 34 	mvi r1,52
 764:	fb ff ff 5d 	calli 4d8 <uart_putchar1>
	uart_putchar1(CONS);	
 768:	34 01 00 01 	mvi r1,1
 76c:	fb ff ff 5b 	calli 4d8 <uart_putchar1>
	uart_putchar1(FBUF_CURRENTFRAME);	
 770:	34 01 00 00 	mvi r1,0
 774:	fb ff ff 59 	calli 4d8 <uart_putchar1>

	buffercam_upload(9);
 778:	34 01 00 09 	mvi r1,9
 77c:	fb ff ff 92 	calli 5c4 <buffercam_upload>
	buffercam_uartsend(9);
 780:	34 01 00 09 	mvi r1,9
 784:	fb ff ff a5 	calli 618 <buffercam_uartsend>
	bytes=bytes<<8;	
	bytes=buffercam[6];
	bytes=bytes<<8;	
	bytes=buffercam[7];
	bytes=bytes<<8;	
	bytes=buffercam[8];
 788:	78 01 00 00 	mvhi r1,0x0
 78c:	38 21 0a 00 	ori r1,r1,0xa00
 790:	28 21 00 20 	lw r1,(r1+32)

	return bytes;
        //uint32_t sizeX;
	//sizeX= (buffercam[7]<<8) +buffercam[8];
	
}
 794:	3c 21 00 08 	sli r1,r1,8
 798:	2b 9d 00 04 	lw ra,(sp+4)
 79c:	37 9c 00 04 	addi sp,sp,4
 7a0:	c3 a0 00 00 	ret

000007a4 <readphotocommand>:
//export_buf
void readphotocommand(int  bytes)
{
 7a4:	37 9c ff d8 	addi sp,sp,-40
 7a8:	5b 8b 00 28 	sw (sp+40),r11
 7ac:	5b 8c 00 24 	sw (sp+36),r12
 7b0:	5b 8d 00 20 	sw (sp+32),r13
 7b4:	5b 8e 00 1c 	sw (sp+28),r14
 7b8:	5b 8f 00 18 	sw (sp+24),r15
 7bc:	5b 90 00 14 	sw (sp+20),r16
 7c0:	5b 91 00 10 	sw (sp+16),r17
 7c4:	5b 92 00 0c 	sw (sp+12),r18
 7c8:	5b 93 00 08 	sw (sp+8),r19
 7cc:	5b 9d 00 04 	sw (sp+4),ra
 7d0:	b8 20 70 00 	mv r14,r1
int inc = 200;
int addr =0;
int chunk;

	
	while( addr < bytes ){
 7d4:	4c 01 00 34 	bge r0,r1,8a4 <readphotocommand+0x100>
 7d8:	34 0b 00 00 	mvi r11,0

		chunk = inc;
                if (chunk > (bytes-addr)) 
 7dc:	34 13 00 c7 	mvi r19,199
 7e0:	c9 cb 60 00 	sub r12,r14,r11
 7e4:	15 91 00 10 	sri r17,r12,16
 7e8:	15 90 00 08 	sri r16,r12,8
 7ec:	49 93 00 3a 	bg r12,r19,8d4 <readphotocommand+0x130>
 7f0:	01 92 00 18 	srui r18,r12,24
 7f4:	22 31 00 ff 	andi r17,r17,0xff
 7f8:	22 10 00 ff 	andi r16,r16,0xff
 7fc:	21 8f 00 ff 	andi r15,r12,0xff
 800:	35 8d 00 0a 	addi r13,r12,10
                  chunk = bytes-addr; 
		uart_putchar1(COMMANDSEND);
 804:	34 01 00 56 	mvi r1,86
 808:	fb ff ff 34 	calli 4d8 <uart_putchar1>
		uart_putchar1(SERIALNUM);
 80c:	34 01 00 00 	mvi r1,0
 810:	fb ff ff 32 	calli 4d8 <uart_putchar1>
		uart_putchar1(CMD_READBUFF);
 814:	34 01 00 32 	mvi r1,50
 818:	fb ff ff 30 	calli 4d8 <uart_putchar1>
		uart_putchar1(CONS_1);	
 81c:	34 01 00 0c 	mvi r1,12
 820:	fb ff ff 2e 	calli 4d8 <uart_putchar1>
		uart_putchar1(FBUF_CURRENTFRAME);	
 824:	34 01 00 00 	mvi r1,0
 828:	fb ff ff 2c 	calli 4d8 <uart_putchar1>
		uart_putchar1(CONS_2);	
 82c:	34 01 00 0a 	mvi r1,10
 830:	fb ff ff 2a 	calli 4d8 <uart_putchar1>
		uart_putchar1((addr >> 24) & 0xff);
 834:	01 61 00 18 	srui r1,r11,24
 838:	fb ff ff 28 	calli 4d8 <uart_putchar1>
		uart_putchar1((addr>>16) & 0xff);
 83c:	15 62 00 10 	sri r2,r11,16
 840:	20 41 00 ff 	andi r1,r2,0xff
 844:	fb ff ff 25 	calli 4d8 <uart_putchar1>
		uart_putchar1((addr>>8 ) & 0xff);
 848:	15 62 00 08 	sri r2,r11,8
 84c:	20 41 00 ff 	andi r1,r2,0xff
 850:	fb ff ff 22 	calli 4d8 <uart_putchar1>
		uart_putchar1(addr & 0xff);
 854:	21 61 00 ff 	andi r1,r11,0xff
 858:	fb ff ff 20 	calli 4d8 <uart_putchar1>

		uart_putchar1((chunk >> 24) & 0xff);
 85c:	ba 40 08 00 	mv r1,r18
 860:	fb ff ff 1e 	calli 4d8 <uart_putchar1>
		uart_putchar1((chunk>>16) & 0xff);
 864:	ba 20 08 00 	mv r1,r17
 868:	fb ff ff 1c 	calli 4d8 <uart_putchar1>
		uart_putchar1((chunk>>8 ) & 0xff);
 86c:	ba 00 08 00 	mv r1,r16
 870:	fb ff ff 1a 	calli 4d8 <uart_putchar1>
		uart_putchar1(chunk & 0xff);
 874:	b9 e0 08 00 	mv r1,r15
 878:	fb ff ff 18 	calli 4d8 <uart_putchar1>

		uart_putchar1(CONS);
 87c:	34 01 00 01 	mvi r1,1
 880:	fb ff ff 16 	calli 4d8 <uart_putchar1>
		uart_putchar1(ZERO);
 884:	34 01 00 00 	mvi r1,0
 888:	fb ff ff 14 	calli 4d8 <uart_putchar1>

		addr+=chunk;
		buffercam_upload(chunk+10);
 88c:	b9 a0 08 00 	mv r1,r13
 890:	fb ff ff 4d 	calli 5c4 <buffercam_upload>
		uart_putchar1(chunk & 0xff);

		uart_putchar1(CONS);
		uart_putchar1(ZERO);

		addr+=chunk;
 894:	b5 6c 58 00 	add r11,r11,r12
		buffercam_upload(chunk+10);
	buffercam_uartsend(chunk+10);
 898:	b9 a0 08 00 	mv r1,r13
 89c:	fb ff ff 5f 	calli 618 <buffercam_uartsend>
int inc = 200;
int addr =0;
int chunk;

	
	while( addr < bytes ){
 8a0:	49 cb ff d0 	bg r14,r11,7e0 <readphotocommand+0x3c>
		addr+=chunk;
		buffercam_upload(chunk+10);
	buffercam_uartsend(chunk+10);
	}
	
}
 8a4:	2b 9d 00 04 	lw ra,(sp+4)
 8a8:	2b 8b 00 28 	lw r11,(sp+40)
 8ac:	2b 8c 00 24 	lw r12,(sp+36)
 8b0:	2b 8d 00 20 	lw r13,(sp+32)
 8b4:	2b 8e 00 1c 	lw r14,(sp+28)
 8b8:	2b 8f 00 18 	lw r15,(sp+24)
 8bc:	2b 90 00 14 	lw r16,(sp+20)
 8c0:	2b 91 00 10 	lw r17,(sp+16)
 8c4:	2b 92 00 0c 	lw r18,(sp+12)
 8c8:	2b 93 00 08 	lw r19,(sp+8)
 8cc:	37 9c 00 28 	addi sp,sp,40
 8d0:	c3 a0 00 00 	ret

	
	while( addr < bytes ){

		chunk = inc;
                if (chunk > (bytes-addr)) 
 8d4:	34 0d 00 d2 	mvi r13,210
 8d8:	34 0f 00 c8 	mvi r15,200
 8dc:	34 10 00 00 	mvi r16,0
 8e0:	34 11 00 00 	mvi r17,0
 8e4:	34 12 00 00 	mvi r18,0
int chunk;

	
	while( addr < bytes ){

		chunk = inc;
 8e8:	34 0c 00 c8 	mvi r12,200
 8ec:	e3 ff ff c6 	bi 804 <readphotocommand+0x60>

000008f0 <imagesize>:
	}
	
}

void imagesize(char c)
{
 8f0:	37 9c ff fc 	addi sp,sp,-4
 8f4:	5b 9d 00 04 	sw (sp+4),ra
	
	uart_putchar1(COMMANDSEND);
 8f8:	34 01 00 56 	mvi r1,86
 8fc:	fb ff fe f7 	calli 4d8 <uart_putchar1>
	uart_putchar1(SERIALNUM);
 900:	34 01 00 00 	mvi r1,0
 904:	fb ff fe f5 	calli 4d8 <uart_putchar1>
	uart_putchar1(WRITE_DATA);
 908:	34 01 00 31 	mvi r1,49
 90c:	fb ff fe f3 	calli 4d8 <uart_putchar1>
	uart_putchar1(0X05);	
 910:	34 01 00 05 	mvi r1,5
 914:	fb ff fe f1 	calli 4d8 <uart_putchar1>
	uart_putchar1(0X04);	
 918:	34 01 00 04 	mvi r1,4
 91c:	fb ff fe ef 	calli 4d8 <uart_putchar1>
	uart_putchar1(CONS);
 920:	34 01 00 01 	mvi r1,1
 924:	fb ff fe ed 	calli 4d8 <uart_putchar1>
	uart_putchar1(ZERO);
 928:	34 01 00 00 	mvi r1,0
 92c:	fb ff fe eb 	calli 4d8 <uart_putchar1>
	uart_putchar1(0X19);	
 930:	34 01 00 19 	mvi r1,25
 934:	fb ff fe e9 	calli 4d8 <uart_putchar1>
	uart_putchar1(RESOLUTION);
 938:	34 01 00 22 	mvi r1,34
 93c:	fb ff fe e7 	calli 4d8 <uart_putchar1>

	buffercam_upload(5);
 940:	34 01 00 05 	mvi r1,5
 944:	fb ff ff 20 	calli 5c4 <buffercam_upload>
	buffercam_uartsend(5);
 948:	34 01 00 05 	mvi r1,5
 94c:	fb ff ff 33 	calli 618 <buffercam_uartsend>


}
 950:	2b 9d 00 04 	lw ra,(sp+4)
 954:	37 9c 00 04 	addi sp,sp,4
 958:	c3 a0 00 00 	ret

0000095c <pppp>:

//p = &arreglo[0]; 

		
	
}
 95c:	c3 a0 00 00 	ret

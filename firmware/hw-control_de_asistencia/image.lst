
image:     formato del fichero elf32-lm32

Secciones:
Ind Nombre        Tamaño    VMA       LMA       Desp fich Alin
  0 .text         00000658  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       00000004  00000658  00000658  000006ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000014  0000065c  0000065c  000006b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000084  00000670  00000670  000006c4  2**2
                  ALLOC
  4 .debug_abbrev 000002dc  00000000  00000000  000006c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000787  00000000  00000000  000009a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000057a  00000000  00000000  00001127  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000190  00000000  00000000  000016a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000001b0  00000000  00000000  00001834  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubnames 000001cb  00000000  00000000  000019e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubtypes 00000097  00000000  00000000  00001baf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000060  00000000  00000000  00001c46  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000026f  00000000  00000000  00001ca6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .comment      00000011  00000000  00000000  00001f15  2**0
                  CONTENTS, READONLY
 14 .debug_ranges 00000018  00000000  00000000  00001f26  2**0
                  CONTENTS, READONLY, DEBUGGING

Desensamblado de la sección .text:

00000000 <_ftext>:
   0:	98 00 00 00 	xor r0,r0,r0
   4:	d0 00 00 00 	wcsr IE,r0
   8:	78 01 00 00 	mvhi r1,0x0
   c:	38 21 00 00 	ori r1,r1,0x0
  10:	d0 e1 00 00 	wcsr EBA,r1
  14:	f8 00 00 3b 	calli 100 <_crt0>
  18:	34 00 00 00 	nop
  1c:	34 00 00 00 	nop

00000020 <_breakpoint_handler>:
  20:	34 00 00 00 	nop
  24:	34 00 00 00 	nop
  28:	34 00 00 00 	nop
  2c:	34 00 00 00 	nop
  30:	34 00 00 00 	nop
  34:	34 00 00 00 	nop
  38:	34 00 00 00 	nop
  3c:	34 00 00 00 	nop

00000040 <_ibuserror_handler>:
  40:	34 00 00 00 	nop
  44:	34 00 00 00 	nop
  48:	34 00 00 00 	nop
  4c:	34 00 00 00 	nop
  50:	34 00 00 00 	nop
  54:	34 00 00 00 	nop
  58:	34 00 00 00 	nop
  5c:	34 00 00 00 	nop

00000060 <_watchpoint_handler>:
  60:	34 00 00 00 	nop
  64:	34 00 00 00 	nop
  68:	34 00 00 00 	nop
  6c:	34 00 00 00 	nop
  70:	34 00 00 00 	nop
  74:	34 00 00 00 	nop
  78:	34 00 00 00 	nop
  7c:	34 00 00 00 	nop

00000080 <_dbuserror_handler>:
  80:	34 00 00 00 	nop
  84:	34 00 00 00 	nop
  88:	34 00 00 00 	nop
  8c:	34 00 00 00 	nop
  90:	34 00 00 00 	nop
  94:	34 00 00 00 	nop
  98:	34 00 00 00 	nop
  9c:	34 00 00 00 	nop

000000a0 <_divzero_handler>:
  a0:	34 00 00 00 	nop
  a4:	34 00 00 00 	nop
  a8:	34 00 00 00 	nop
  ac:	34 00 00 00 	nop
  b0:	34 00 00 00 	nop
  b4:	34 00 00 00 	nop
  b8:	34 00 00 00 	nop
  bc:	34 00 00 00 	nop

000000c0 <_interrupt_handler>:
  c0:	5b 9d 00 00 	sw (sp+0),ra
  c4:	f8 00 00 2b 	calli 170 <_save_all>
  c8:	90 40 08 00 	rcsr r1,IP
  cc:	f8 00 00 87 	calli 2e8 <irq_handler>
  d0:	78 01 ff ff 	mvhi r1,0xffff
  d4:	38 21 ff ff 	ori r1,r1,0xffff
  d8:	d0 41 00 00 	wcsr IP,r1
  dc:	e0 00 00 38 	bi 1bc <_restore_all_and_eret>

000000e0 <_scall_handler>:
  e0:	34 00 00 00 	nop
  e4:	34 00 00 00 	nop
  e8:	34 00 00 00 	nop
  ec:	34 00 00 00 	nop
  f0:	34 00 00 00 	nop
  f4:	34 00 00 00 	nop
  f8:	34 00 00 00 	nop
  fc:	34 00 00 00 	nop

00000100 <_crt0>:
 100:	78 1c 00 00 	mvhi sp,0x0
 104:	3b 9c 0f fc 	ori sp,sp,0xffc
 108:	78 1a 00 00 	mvhi gp,0x0
 10c:	3b 5a 06 70 	ori gp,gp,0x670
 110:	78 01 00 00 	mvhi r1,0x0
 114:	38 21 06 70 	ori r1,r1,0x670
 118:	78 03 00 00 	mvhi r3,0x0
 11c:	38 63 06 f4 	ori r3,r3,0x6f4

00000120 <.clearBSS>:
 120:	44 23 00 04 	be r1,r3,130 <.callMain>
 124:	58 20 00 00 	sw (r1+0),r0
 128:	34 21 00 04 	addi r1,r1,4
 12c:	e3 ff ff fd 	bi 120 <.clearBSS>

00000130 <.callMain>:
 130:	34 01 00 00 	mvi r1,0
 134:	34 02 00 00 	mvi r2,0
 138:	34 03 00 00 	mvi r3,0
 13c:	f8 00 00 33 	calli 208 <main>

00000140 <irq_enable>:
 140:	34 01 00 01 	mvi r1,1
 144:	d0 01 00 00 	wcsr IE,r1
 148:	c3 a0 00 00 	ret

0000014c <irq_disable>:
 14c:	34 01 00 00 	mvi r1,0
 150:	d0 01 00 00 	wcsr IE,r1
 154:	c3 a0 00 00 	ret

00000158 <irq_set_mask>:
 158:	d0 21 00 00 	wcsr IM,r1
 15c:	c3 a0 00 00 	ret

00000160 <irq_get_mask>:
 160:	90 20 08 00 	rcsr r1,IM
 164:	c3 a0 00 00 	ret

00000168 <jump>:
 168:	c0 20 00 00 	b r1

0000016c <halt>:
 16c:	e0 00 00 00 	bi 16c <halt>

00000170 <_save_all>:
 170:	37 9c ff 80 	addi sp,sp,-128
 174:	5b 81 00 04 	sw (sp+4),r1
 178:	5b 82 00 08 	sw (sp+8),r2
 17c:	5b 83 00 0c 	sw (sp+12),r3
 180:	5b 84 00 10 	sw (sp+16),r4
 184:	5b 85 00 14 	sw (sp+20),r5
 188:	5b 86 00 18 	sw (sp+24),r6
 18c:	5b 87 00 1c 	sw (sp+28),r7
 190:	5b 88 00 20 	sw (sp+32),r8
 194:	5b 89 00 24 	sw (sp+36),r9
 198:	5b 8a 00 28 	sw (sp+40),r10
 19c:	5b 9e 00 78 	sw (sp+120),ea
 1a0:	5b 9f 00 7c 	sw (sp+124),ba
 1a4:	2b 81 00 80 	lw r1,(sp+128)
 1a8:	5b 81 00 74 	sw (sp+116),r1
 1ac:	bb 80 08 00 	mv r1,sp
 1b0:	34 21 00 80 	addi r1,r1,128
 1b4:	5b 81 00 70 	sw (sp+112),r1
 1b8:	c3 a0 00 00 	ret

000001bc <_restore_all_and_eret>:
 1bc:	2b 81 00 04 	lw r1,(sp+4)
 1c0:	2b 82 00 08 	lw r2,(sp+8)
 1c4:	2b 83 00 0c 	lw r3,(sp+12)
 1c8:	2b 84 00 10 	lw r4,(sp+16)
 1cc:	2b 85 00 14 	lw r5,(sp+20)
 1d0:	2b 86 00 18 	lw r6,(sp+24)
 1d4:	2b 87 00 1c 	lw r7,(sp+28)
 1d8:	2b 88 00 20 	lw r8,(sp+32)
 1dc:	2b 89 00 24 	lw r9,(sp+36)
 1e0:	2b 8a 00 28 	lw r10,(sp+40)
 1e4:	2b 9d 00 74 	lw ra,(sp+116)
 1e8:	2b 9e 00 78 	lw ea,(sp+120)
 1ec:	2b 9f 00 7c 	lw ba,(sp+124)
 1f0:	2b 9c 00 70 	lw sp,(sp+112)
 1f4:	c3 c0 00 00 	eret

000001f8 <get_sp>:
 1f8:	bb 80 08 00 	mv r1,sp
 1fc:	c3 a0 00 00 	ret

00000200 <get_gp>:
 200:	bb 40 08 00 	mv r1,gp
 204:	c3 a0 00 00 	ret

00000208 <main>:

#include "soc-hw.h"
#include "cam.h"

int main (int argc, char **argv)
{
 208:	37 9c ff fc 	addi sp,sp,-4
 20c:	5b 9d 00 04 	sw (sp+4),ra
	
//for (;;){
	
	//Prueba Camara
	//takephotocommand(x);
	resetcommand(x);
 210:	34 01 00 31 	mvi r1,49
 214:	f8 00 00 e1 	calli 598 <resetcommand>
//msleep(1000);
//j=0;
//pppp();
//msleep(1000);
	getversioncommand(x);
 218:	34 01 00 31 	mvi r1,49
 21c:	f8 00 00 ec 	calli 5cc <getversioncommand>
	getversioncommand(x);
 220:	34 01 00 31 	mvi r1,49
 224:	f8 00 00 ea 	calli 5cc <getversioncommand>
	//y=uart_getchar1();
	//y++;
	//uart_putchar0(y);

			
}
 228:	2b 9d 00 04 	lw ra,(sp+4)
 22c:	37 9c 00 04 	addi sp,sp,4
 230:	c3 a0 00 00 	ret

00000234 <isr_null>:
/***************************************************************************
 * IRQ handling
 */
void isr_null()
{
}
 234:	c3 a0 00 00 	ret

00000238 <tic_isr>:

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 238:	78 01 00 00 	mvhi r1,0x0
 23c:	38 21 06 f0 	ori r1,r1,0x6f0
 240:	28 23 00 00 	lw r3,(r1+0)
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 244:	78 02 00 00 	mvhi r2,0x0
 248:	38 42 06 60 	ori r2,r2,0x660
 24c:	28 42 00 00 	lw r2,(r2+0)

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 250:	34 63 00 01 	addi r3,r3,1
 254:	58 23 00 00 	sw (r1+0),r3
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 258:	34 01 00 0e 	mvi r1,14
 25c:	58 41 00 00 	sw (r2+0),r1
}
 260:	c3 a0 00 00 	ret

00000264 <prueba>:

isr_ptr_t isr_table[32];

void prueba()
{
	   uart0->rxtx=30;
 264:	78 01 00 00 	mvhi r1,0x0
 268:	38 21 06 5c 	ori r1,r1,0x65c
	   uart1->rxtx=30;
 26c:	78 02 00 00 	mvhi r2,0x0

isr_ptr_t isr_table[32];

void prueba()
{
	   uart0->rxtx=30;
 270:	28 24 00 00 	lw r4,(r1+0)
	   uart1->rxtx=30;
 274:	38 42 06 68 	ori r2,r2,0x668
	   spi0->rxtx=1;
 278:	78 01 00 00 	mvhi r1,0x0
isr_ptr_t isr_table[32];

void prueba()
{
	   uart0->rxtx=30;
	   uart1->rxtx=30;
 27c:	28 43 00 00 	lw r3,(r2+0)
	   spi0->rxtx=1;
 280:	38 21 06 6c 	ori r1,r1,0x66c
 284:	28 21 00 00 	lw r1,(r1+0)

isr_ptr_t isr_table[32];

void prueba()
{
	   uart0->rxtx=30;
 288:	34 02 00 1e 	mvi r2,30
 28c:	58 82 00 04 	sw (r4+4),r2
	   uart1->rxtx=30;
 290:	58 62 00 04 	sw (r3+4),r2
	   spi0->rxtx=1;
 294:	34 02 00 01 	mvi r2,1
 298:	58 22 00 00 	sw (r1+0),r2
	   spi0->status=2;
	   spi0->cs=3;
	   spi0->divisor=4;
	   spi0->nop=5;
	   timer0->tcr0 = 0xAA;
 29c:	78 03 00 00 	mvhi r3,0x0
void prueba()
{
	   uart0->rxtx=30;
	   uart1->rxtx=30;
	   spi0->rxtx=1;
	   spi0->status=2;
 2a0:	34 02 00 02 	mvi r2,2
 2a4:	58 22 00 04 	sw (r1+4),r2
	   spi0->cs=3;
 2a8:	34 04 00 03 	mvi r4,3
	   spi0->divisor=4;
	   spi0->nop=5;
	   timer0->tcr0 = 0xAA;
 2ac:	38 63 06 60 	ori r3,r3,0x660
	   gpio0->ctrl=0x55;
 2b0:	78 02 00 00 	mvhi r2,0x0
{
	   uart0->rxtx=30;
	   uart1->rxtx=30;
	   spi0->rxtx=1;
	   spi0->status=2;
	   spi0->cs=3;
 2b4:	58 24 00 08 	sw (r1+8),r4
	   spi0->divisor=4;
	   spi0->nop=5;
	   timer0->tcr0 = 0xAA;
 2b8:	28 63 00 00 	lw r3,(r3+0)
	   uart0->rxtx=30;
	   uart1->rxtx=30;
	   spi0->rxtx=1;
	   spi0->status=2;
	   spi0->cs=3;
	   spi0->divisor=4;
 2bc:	34 04 00 04 	mvi r4,4
	   spi0->nop=5;
	   timer0->tcr0 = 0xAA;
	   gpio0->ctrl=0x55;
 2c0:	38 42 06 64 	ori r2,r2,0x664
	   uart0->rxtx=30;
	   uart1->rxtx=30;
	   spi0->rxtx=1;
	   spi0->status=2;
	   spi0->cs=3;
	   spi0->divisor=4;
 2c4:	58 24 00 10 	sw (r1+16),r4
	   spi0->nop=5;
	   timer0->tcr0 = 0xAA;
	   gpio0->ctrl=0x55;
 2c8:	28 42 00 00 	lw r2,(r2+0)
	   uart1->rxtx=30;
	   spi0->rxtx=1;
	   spi0->status=2;
	   spi0->cs=3;
	   spi0->divisor=4;
	   spi0->nop=5;
 2cc:	34 04 00 05 	mvi r4,5
 2d0:	58 24 00 0c 	sw (r1+12),r4
	   timer0->tcr0 = 0xAA;
 2d4:	34 01 00 aa 	mvi r1,170
 2d8:	58 61 00 00 	sw (r3+0),r1
	   gpio0->ctrl=0x55;
 2dc:	34 01 00 55 	mvi r1,85
 2e0:	58 41 00 00 	sw (r2+0),r1

}
 2e4:	c3 a0 00 00 	ret

000002e8 <irq_handler>:
void isr_null()
{
}

void irq_handler(uint32_t pending)
{
 2e8:	37 9c ff f0 	addi sp,sp,-16
 2ec:	5b 8b 00 10 	sw (sp+16),r11
 2f0:	5b 8c 00 0c 	sw (sp+12),r12
 2f4:	5b 8d 00 08 	sw (sp+8),r13
 2f8:	5b 9d 00 04 	sw (sp+4),ra
 2fc:	78 0b 00 00 	mvhi r11,0x0
 300:	39 6b 06 70 	ori r11,r11,0x670
 304:	b8 20 60 00 	mv r12,r1
 */
void isr_null()
{
}

void irq_handler(uint32_t pending)
 308:	35 6d 00 80 	addi r13,r11,128
 30c:	e0 00 00 04 	bi 31c <irq_handler+0x34>
{
	int i;

	for(i=0; i<32; i++) {
		if (pending & 0x01) (*isr_table[i])();
 310:	35 6b 00 04 	addi r11,r11,4

void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
 314:	45 6d 00 08 	be r11,r13,334 <irq_handler+0x4c>
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
 318:	01 8c 00 01 	srui r12,r12,1
void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
		if (pending & 0x01) (*isr_table[i])();
 31c:	21 81 00 01 	andi r1,r12,0x1
 320:	44 20 ff fc 	be r1,r0,310 <irq_handler+0x28>
 324:	29 61 00 00 	lw r1,(r11+0)
 328:	35 6b 00 04 	addi r11,r11,4
 32c:	d8 20 00 00 	call r1

void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
 330:	5d 6d ff fa 	bne r11,r13,318 <irq_handler+0x30>
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
	}
}
 334:	2b 9d 00 04 	lw ra,(sp+4)
 338:	2b 8b 00 10 	lw r11,(sp+16)
 33c:	2b 8c 00 0c 	lw r12,(sp+12)
 340:	2b 8d 00 08 	lw r13,(sp+8)
 344:	37 9c 00 10 	addi sp,sp,16
 348:	c3 a0 00 00 	ret

0000034c <isr_init>:

void isr_init()
{
 34c:	78 01 00 00 	mvhi r1,0x0
 350:	78 02 00 00 	mvhi r2,0x0
 354:	38 21 06 70 	ori r1,r1,0x670
 358:	38 42 02 34 	ori r2,r2,0x234
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
	}
}

void isr_init()
 35c:	34 23 00 80 	addi r3,r1,128
{
	int i;
	for(i=0; i<32; i++)
		isr_table[i] = &isr_null;
 360:	58 22 00 00 	sw (r1+0),r2
 364:	34 21 00 04 	addi r1,r1,4
}

void isr_init()
{
	int i;
	for(i=0; i<32; i++)
 368:	5c 23 ff fe 	bne r1,r3,360 <isr_init+0x14>
		isr_table[i] = &isr_null;
}
 36c:	c3 a0 00 00 	ret

00000370 <isr_register>:

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 370:	78 03 00 00 	mvhi r3,0x0
 374:	3c 21 00 02 	sli r1,r1,2
 378:	38 63 06 70 	ori r3,r3,0x670
 37c:	b4 61 18 00 	add r3,r3,r1
 380:	58 62 00 00 	sw (r3+0),r2
}
 384:	c3 a0 00 00 	ret

00000388 <isr_unregister>:

void isr_unregister(int irq)
{
	isr_table[irq] = &isr_null;
 388:	78 03 00 00 	mvhi r3,0x0
 38c:	3c 21 00 02 	sli r1,r1,2
 390:	38 63 06 70 	ori r3,r3,0x670
 394:	78 02 00 00 	mvhi r2,0x0
 398:	b4 61 18 00 	add r3,r3,r1
 39c:	38 42 02 34 	ori r2,r2,0x234
 3a0:	58 62 00 00 	sw (r3+0),r2
}
 3a4:	c3 a0 00 00 	ret

000003a8 <msleep>:
void msleep(uint32_t msec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000)*msec;
 3a8:	78 04 00 00 	mvhi r4,0x0
 3ac:	38 84 06 58 	ori r4,r4,0x658
 3b0:	28 83 00 00 	lw r3,(r4+0)
 3b4:	78 02 00 00 	mvhi r2,0x0
 3b8:	38 42 06 60 	ori r2,r2,0x660
 3bc:	28 42 00 00 	lw r2,(r2+0)
 3c0:	88 23 08 00 	mul r1,r1,r3
 3c4:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 3c8:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 3cc:	34 01 00 08 	mvi r1,8
 3d0:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 3d4:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 3d8:	20 21 00 01 	andi r1,r1,0x1
 3dc:	44 20 ff fe 	be r1,r0,3d4 <msleep+0x2c>
}
 3e0:	c3 a0 00 00 	ret

000003e4 <nsleep>:
void nsleep(uint32_t nsec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000000)*nsec;
 3e4:	78 02 00 00 	mvhi r2,0x0
 3e8:	38 42 06 60 	ori r2,r2,0x660
 3ec:	28 42 00 00 	lw r2,(r2+0)
 3f0:	08 21 00 64 	muli r1,r1,100
 3f4:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 3f8:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 3fc:	34 01 00 08 	mvi r1,8
 400:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 404:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 408:	20 21 00 01 	andi r1,r1,0x1
 40c:	44 20 ff fe 	be r1,r0,404 <nsleep+0x20>
}
 410:	c3 a0 00 00 	ret

00000414 <tic_init>:
void tic_init()
{
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 414:	78 01 00 00 	mvhi r1,0x0
 418:	38 21 06 60 	ori r1,r1,0x660
 41c:	28 23 00 00 	lw r3,(r1+0)
 420:	34 02 27 10 	mvi r2,10000
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 424:	78 01 00 00 	mvhi r1,0x0

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 428:	58 62 00 04 	sw (r3+4),r2
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 42c:	38 21 06 f0 	ori r1,r1,0x6f0

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
 430:	58 60 00 08 	sw (r3+8),r0
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 434:	58 20 00 00 	sw (r1+0),r0
		isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 438:	78 02 00 00 	mvhi r2,0x0
 43c:	78 01 00 00 	mvhi r1,0x0
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 440:	34 04 00 0e 	mvi r4,14
 444:	58 64 00 00 	sw (r3+0),r4
		isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 448:	38 21 06 70 	ori r1,r1,0x670
 44c:	38 42 02 38 	ori r2,r2,0x238
 450:	58 22 00 04 	sw (r1+4),r2
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;

	isr_register(1, &tic_isr);
}
 454:	c3 a0 00 00 	ret

00000458 <uart_init>:
	//uart0->lcr = 0x03;  // Line Control Register:    8N1
	//uart0->mcr = 0x00;  // Modem Control Register

	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
}
 458:	c3 a0 00 00 	ret

0000045c <uart_getchar1>:

char uart_getchar1()
{   
 45c:	78 01 00 00 	mvhi r1,0x0
 460:	38 21 06 68 	ori r1,r1,0x668
 464:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart1->ucr & UART_DR)) ;
 468:	28 41 00 00 	lw r1,(r2+0)
 46c:	20 21 00 01 	andi r1,r1,0x1
 470:	44 20 ff fe 	be r1,r0,468 <uart_getchar1+0xc>
	return uart1->rxtx;
 474:	28 41 00 04 	lw r1,(r2+4)
}
 478:	20 21 00 ff 	andi r1,r1,0xff
 47c:	c3 a0 00 00 	ret

00000480 <uart_getchar0>:
char uart_getchar0()
{   
 480:	78 01 00 00 	mvhi r1,0x0
 484:	38 21 06 5c 	ori r1,r1,0x65c
 488:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart0->ucr & UART_DR)) ;
 48c:	28 41 00 00 	lw r1,(r2+0)
 490:	20 21 00 01 	andi r1,r1,0x1
 494:	44 20 ff fe 	be r1,r0,48c <uart_getchar0+0xc>
	return uart0->rxtx;
 498:	28 41 00 04 	lw r1,(r2+4)
}
 49c:	20 21 00 ff 	andi r1,r1,0xff
 4a0:	c3 a0 00 00 	ret

000004a4 <uart_putchar0>:

void uart_putchar0(char c)
{
 4a4:	78 02 00 00 	mvhi r2,0x0
 4a8:	38 42 06 5c 	ori r2,r2,0x65c
 4ac:	28 43 00 00 	lw r3,(r2+0)
 4b0:	20 21 00 ff 	andi r1,r1,0xff
	while (uart0->ucr & UART_BUSY) ;
 4b4:	28 62 00 00 	lw r2,(r3+0)
 4b8:	20 42 00 10 	andi r2,r2,0x10
 4bc:	5c 40 ff fe 	bne r2,r0,4b4 <uart_putchar0+0x10>
	uart0->rxtx = c;
 4c0:	58 61 00 04 	sw (r3+4),r1
}
 4c4:	c3 a0 00 00 	ret

000004c8 <uart_putchar1>:
void uart_putchar1(char c)
{
 4c8:	78 02 00 00 	mvhi r2,0x0
 4cc:	38 42 06 68 	ori r2,r2,0x668
 4d0:	28 43 00 00 	lw r3,(r2+0)
 4d4:	20 21 00 ff 	andi r1,r1,0xff
	while (uart1->ucr & UART_BUSY) ;
 4d8:	28 62 00 00 	lw r2,(r3+0)
 4dc:	20 42 00 10 	andi r2,r2,0x10
 4e0:	5c 40 ff fe 	bne r2,r0,4d8 <uart_putchar1+0x10>
	uart1->rxtx = c;
 4e4:	58 61 00 04 	sw (r3+4),r1
}
 4e8:	c3 a0 00 00 	ret

000004ec <uart_putstr0>:

void uart_putstr0(char *str)
{
	char *c = str;
	while(*c) {
 4ec:	40 24 00 00 	lbu r4,(r1+0)
 4f0:	44 80 00 0b 	be r4,r0,51c <uart_putstr0+0x30>
 4f4:	78 02 00 00 	mvhi r2,0x0
 4f8:	38 42 06 5c 	ori r2,r2,0x65c
 4fc:	28 43 00 00 	lw r3,(r2+0)
	return uart0->rxtx;
}

void uart_putchar0(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 500:	28 62 00 00 	lw r2,(r3+0)
 504:	20 42 00 10 	andi r2,r2,0x10
 508:	5c 40 ff fe 	bne r2,r0,500 <uart_putstr0+0x14>
	uart0->rxtx = c;
 50c:	58 64 00 04 	sw (r3+4),r4
void uart_putstr0(char *str)
{
	char *c = str;
	while(*c) {
		uart_putchar0(*c);
		c++;
 510:	34 21 00 01 	addi r1,r1,1
}

void uart_putstr0(char *str)
{
	char *c = str;
	while(*c) {
 514:	40 24 00 00 	lbu r4,(r1+0)
 518:	5c 82 ff fa 	bne r4,r2,500 <uart_putstr0+0x14>
 51c:	c3 a0 00 00 	ret

00000520 <uart_putstr1>:
}

void uart_putstr1(char *str)
{
	char *c = str;
	while(*c) {
 520:	40 24 00 00 	lbu r4,(r1+0)
 524:	44 80 00 0b 	be r4,r0,550 <uart_putstr1+0x30>
 528:	78 02 00 00 	mvhi r2,0x0
 52c:	38 42 06 68 	ori r2,r2,0x668
 530:	28 43 00 00 	lw r3,(r2+0)
	while (uart0->ucr & UART_BUSY) ;
	uart0->rxtx = c;
}
void uart_putchar1(char c)
{
	while (uart1->ucr & UART_BUSY) ;
 534:	28 62 00 00 	lw r2,(r3+0)
 538:	20 42 00 10 	andi r2,r2,0x10
 53c:	5c 40 ff fe 	bne r2,r0,534 <uart_putstr1+0x14>
	uart1->rxtx = c;
 540:	58 64 00 04 	sw (r3+4),r4
void uart_putstr1(char *str)
{
	char *c = str;
	while(*c) {
		uart_putchar1(*c);
		c++;
 544:	34 21 00 01 	addi r1,r1,1
}

void uart_putstr1(char *str)
{
	char *c = str;
	while(*c) {
 548:	40 24 00 00 	lbu r4,(r1+0)
 54c:	5c 82 ff fa 	bne r4,r2,534 <uart_putstr1+0x14>
 550:	c3 a0 00 00 	ret

00000554 <spi_putget>:
}


char spi_putget(char c)
{
        spi0->cs=1;
 554:	78 02 00 00 	mvhi r2,0x0
 558:	38 42 06 6c 	ori r2,r2,0x66c
 55c:	28 42 00 00 	lw r2,(r2+0)
 560:	34 03 00 01 	mvi r3,1
	}
}


char spi_putget(char c)
{
 564:	20 21 00 ff 	andi r1,r1,0xff
        spi0->cs=1;
 568:	58 43 00 08 	sw (r2+8),r3
	while (spi0->status & SPI_RUN) ;
 56c:	28 43 00 04 	lw r3,(r2+4)
 570:	20 63 00 01 	andi r3,r3,0x1
 574:	5c 60 ff fe 	bne r3,r0,56c <spi_putget+0x18>
	spi0->rxtx = c;
 578:	58 41 00 00 	sw (r2+0),r1
	while (spi0->status & SPI_RUN) ;
 57c:	28 41 00 04 	lw r1,(r2+4)
 580:	20 21 00 01 	andi r1,r1,0x1
 584:	5c 20 ff fe 	bne r1,r0,57c <spi_putget+0x28>
        spi0->cs=0;
 588:	58 40 00 08 	sw (r2+8),r0
        return spi0->rxtx;
 58c:	28 41 00 00 	lw r1,(r2+0)
}
 590:	20 21 00 ff 	andi r1,r1,0xff
 594:	c3 a0 00 00 	ret

00000598 <resetcommand>:

#include "cam.h"
#include "soc-hw.h"

void resetcommand(char c){
 598:	37 9c ff fc 	addi sp,sp,-4
 59c:	5b 9d 00 04 	sw (sp+4),ra

	uart_putchar1(COMMANDSEND);
 5a0:	34 01 00 56 	mvi r1,86
 5a4:	fb ff ff c9 	calli 4c8 <uart_putchar1>
	uart_putchar1(SERIALNUM);
 5a8:	34 01 00 00 	mvi r1,0
 5ac:	fb ff ff c7 	calli 4c8 <uart_putchar1>
	uart_putchar1(CMD_RESET);
 5b0:	34 01 00 26 	mvi r1,38
 5b4:	fb ff ff c5 	calli 4c8 <uart_putchar1>
	uart_putchar1(COMMANDEND);
 5b8:	34 01 00 00 	mvi r1,0
 5bc:	fb ff ff c3 	calli 4c8 <uart_putchar1>
/*
		for (i =  0; i <  (size); i++){
				uart_putchar0(arreglo[i]);
		}
*/
}
 5c0:	2b 9d 00 04 	lw ra,(sp+4)
 5c4:	37 9c 00 04 	addi sp,sp,4
 5c8:	c3 a0 00 00 	ret

000005cc <getversioncommand>:

void getversioncommand(char c)
{
 5cc:	37 9c ff b4 	addi sp,sp,-76
 5d0:	5b 8b 00 10 	sw (sp+16),r11
 5d4:	5b 8c 00 0c 	sw (sp+12),r12
 5d8:	5b 8d 00 08 	sw (sp+8),r13
 5dc:	5b 9d 00 04 	sw (sp+4),ra
	uart_putchar1(COMMANDSEND);
 5e0:	34 01 00 56 	mvi r1,86
 5e4:	fb ff ff b9 	calli 4c8 <uart_putchar1>
	//msleep(5);
	uart_putchar1(SERIALNUM);
 5e8:	34 01 00 00 	mvi r1,0
 5ec:	fb ff ff b7 	calli 4c8 <uart_putchar1>
	//msleep(5);
	uart_putchar1(CMD_GETVERSION);
 5f0:	34 01 00 11 	mvi r1,17
 5f4:	fb ff ff b5 	calli 4c8 <uart_putchar1>
	//msleep(5);	
	uart_putchar1(COMMANDEND);	
 5f8:	34 01 00 00 	mvi r1,0
 5fc:	37 8b 00 14 	addi r11,sp,20
 600:	fb ff ff b2 	calli 4c8 <uart_putchar1>
				uart_putchar0(arreglo[i]);
		}
*/
}

void getversioncommand(char c)
 604:	37 8d 00 54 	addi r13,sp,84
 608:	b9 60 08 00 	mv r1,r11
	uint32_t arreglo_get[15];
    	uint32_t	size_get=16;
	uint32_t i_get=0;

for (i_get =  0; i_get <  (size_get); i_get++){
		arreglo_get[i_get]=0;
 60c:	58 20 00 00 	sw (r1+0),r0
 610:	34 21 00 04 	addi r1,r1,4
	
	uint32_t arreglo_get[15];
    	uint32_t	size_get=16;
	uint32_t i_get=0;

for (i_get =  0; i_get <  (size_get); i_get++){
 614:	5c 2d ff fe 	bne r1,r13,60c <getversioncommand+0x40>
 618:	b9 60 60 00 	mv r12,r11
		arreglo_get[i_get]=0;
}

for (i_get =  0; i_get <  (size_get); i_get++){
		arreglo_get[i_get]=uart_getchar1();
 61c:	fb ff ff 90 	calli 45c <uart_getchar1>
 620:	59 81 00 00 	sw (r12+0),r1
 624:	35 8c 00 04 	addi r12,r12,4

for (i_get =  0; i_get <  (size_get); i_get++){
		arreglo_get[i_get]=0;
}

for (i_get =  0; i_get <  (size_get); i_get++){
 628:	5d 8d ff fd 	bne r12,r13,61c <getversioncommand+0x50>
}

//if (arreglo_get[0]==0x76 && arreglo_get[2]==0x11){
		
		for (i_get =  0; i_get <  (size_get); i_get++){
		uart_putchar0(arreglo_get[i_get]);
 62c:	41 61 00 03 	lbu r1,(r11+3)
 630:	35 6b 00 04 	addi r11,r11,4
 634:	fb ff ff 9c 	calli 4a4 <uart_putchar0>
		arreglo_get[i_get]=uart_getchar1();
}

//if (arreglo_get[0]==0x76 && arreglo_get[2]==0x11){
		
		for (i_get =  0; i_get <  (size_get); i_get++){
 638:	5d 6d ff fd 	bne r11,r13,62c <getversioncommand+0x60>
		uart_putchar0(arreglo_get[i_get]);
			}
	//}

//  esta es la parte para probar si los comamando si llegan a la camara 
}
 63c:	2b 9d 00 04 	lw ra,(sp+4)
 640:	2b 8b 00 10 	lw r11,(sp+16)
 644:	2b 8c 00 0c 	lw r12,(sp+12)
 648:	2b 8d 00 08 	lw r13,(sp+8)
 64c:	37 9c 00 4c 	addi sp,sp,76
 650:	c3 a0 00 00 	ret

00000654 <pppp>:

//p = &arreglo[0]; 

		
	
}
 654:	c3 a0 00 00 	ret
